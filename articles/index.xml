<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Articles on Kablamo</title>
        <link>http://blog.kablamo.org/articles/</link>
        <description>Recent content in Articles on Kablamo</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Sat, 08 Aug 2020 00:00:00 +0000</lastBuildDate>
        <atom:link href="http://blog.kablamo.org/articles/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>The Formula</title>
            <link>http://blog.kablamo.org/articles/the-formula/</link>
            <pubDate>Sat, 08 Aug 2020 00:00:00 +0000</pubDate>
            
            <guid>http://blog.kablamo.org/articles/the-formula/</guid>
            <description>A terse and hasty overview for the impatient Successful parents&amp;hellip;
 Have a vision. They are intentional and strategic. Not passive. Make time to learn &amp;ndash; often by reading lots of books. Adapt to the child. They study the child closely and tailor their approach. Define a few strict rules but let the child make the remaining decisions. Perform 8 key roles for their kids.  The early learning partner The flight engineer The fixer The revealer The philosopher The model The negotiator The GPS      The story behind the book &amp;ldquo;The Formula&amp;rdquo; is a collaboration between a reporter from the Boston Globe and a Harvard professor.</description>
            <content type="html"><![CDATA[<h2 id="a-terse-and-hasty-overview-for-the-impatient">A terse and hasty overview for the impatient</h2>
<p>Successful parents&hellip;</p>
<ol>
<li><strong>Have a vision.</strong>  They are intentional and strategic.  Not passive.</li>
<li><strong>Make time to learn</strong> &ndash; often by reading lots of books.</li>
<li><strong>Adapt to the child.</strong> They study the child closely and tailor their approach.</li>
<li><strong>Define a few strict rules</strong> but let the child make the remaining decisions.</li>
<li><strong>Perform 8 key roles for their kids.</strong>
<ul>
<li>The early learning partner</li>
<li>The flight engineer</li>
<li>The fixer</li>
<li>The revealer</li>
<li>The philosopher</li>
<li>The model</li>
<li>The negotiator</li>
<li>The GPS</li>
</ul>
</li>
</ol>
<div style="margin-bottom: 2rem; margin-top: 2rem; width: 800px; position: relative; left: -2rem; background: #333; height: 2rem;"></div>
<p><img src="/images/books/the-formula-huge.jpg"
alt="cover art"
style="padding: 0rem; padding-right: 0; margin-left: auto; margin-right: auto; width: 400px;" /></p>
<div style="margin-top: 2rem; width: 800px; position: relative; left: -2rem; background: #333; height: 2rem;"></div>
<h2 id="the-story-behind-the-book">The story behind the book</h2>
<p>&ldquo;The Formula&rdquo; is a collaboration between a reporter from the Boston Globe and a
Harvard professor.  The &ldquo;How I Was Parented Project&rdquo; at Harvard interviewed
successful Harvard graduates and their parents years later.   This book
summarizes the resulting patterns (the 8 key parenting roles) this duo
discovered.</p>
<h2 id="what-it-means-to-be-a-successful-parent">What it means to be a successful parent</h2>
<p>The authors say successful parenting is not about sitting on the couch eating
chocolate ice cream with chocolate cake chunks in it every day.  They define it
as raising children who become &ldquo;fully realized&rdquo;, meaning they have:</p>
<ol>
<li><strong>Purpose:</strong> &ldquo;Something deeply meaningful that provides clear direction in life&rdquo;</li>
<li><strong>Agency:</strong> They take action (related to their purpose) and produce results</li>
<li><strong>Smarts:</strong> Academic smarts, social smarts, emotional smarts, etc.  Also: people who &ldquo;learned to generate their own questions, think through the implications of those questions, and form their own opinions, then communicate those opinions&rdquo;.</li>
</ol>
<h2 id="intentional-parenting">Intentional Parenting</h2>
<p>The authors found that master parents <em>&ldquo;had a clear vision of the type of adult
they wanted their child to become, and a drive to make that vision a reality—a
“Burn,” which &hellip; came from their own backstories.  Each also had a plan.
Strategically, day by day, they nurtured in their child the qualities they
thought would best serve them as an adult.&quot;</em></p>
<p>The master parent&rsquo;s vision doesn&rsquo;t include living their dreams through their
children.  Children are not clones.  The vision is not a straight jacket.  Its
more of a loose framework that the child will build on and reinterpret as their
own.</p>
<h2 id="the-formula---the-8-roles-of-master-parenting">The Formula - The 8 roles of master parenting:</h2>
<p>After studying their data and interviews, the authors discovered these roles
were a recurring pattern in the stories they were hearing.</p>
<p>Note that all 8 roles don&rsquo;t necessarily need to be played by a single parent
and its unlikely that a single person would be equally good at all roles.  A
master parent knows their weaknesses and will work to find someone who can fill
in the gaps.</p>
<h3 id="1-the-early-learning-partner">1. The Early Learning Partner</h3>
<p>The early learning partner works closely with the child during the first 5
years.</p>
<p>How master parents do it:</p>
<ul>
<li>They ask questions that the child needs to work to answer.  The child will gain confidence that they can learn.</li>
<li>They teach discipline, curiosity and love of learning while being responsive to what the child is interested in.  &ldquo;This is interesting to me and it might be interesting to you, too&rdquo; vs &ldquo;You must learn this&rdquo;.</li>
<li>They teach &ldquo;the basics&rdquo; before age 5:</li>
<li>Maximize Love, Manage Stress</li>
<li>Talk, Sing, Point</li>
<li>Count, Group, Compare</li>
<li>Explore Through Movement And Play</li>
<li>Read And Discuss Stories</li>
</ul>
<h3 id="2-the-flight-engineer">2. The Flight Engineer</h3>
<p>Once school begins, the flight engineer &ldquo;ensures all of the people and systems
working on behalf of the child are functioning properly and in the child’s best
interest.&rdquo;  If problems arise, the flight engineer will intervene or work with
others to solve them.</p>
<p>How master parents do it:</p>
<ul>
<li>They monitor the situation:  Check in to be aware of whats working or not working.  Especially in regards to school.</li>
<li>They assert authority and stand up for your child if necessary:  Authority figures (eg teachers or coaches) are usually right, but not always.  You are the expert  because no one knows your child better than you.</li>
<li>They know when to step in: If there is a problem your child cannot and should not solve on their own.</li>
<li>They know when to not step in.  Kids need to learn to stand up for themselves.  A master parent will coach and support them.</li>
</ul>
<h3 id="3-the-fixer">3. The Fixer</h3>
<p>The fixer is an emergency responder who notices a major problem and takes
immediate action to resolve it.</p>
<p>How master parents do it:</p>
<ul>
<li>They are vigilante:  In order to know when there is an emergency.</li>
<li>They are relentless:  Nothing is more important than the child&rsquo;s journey.</li>
<li>They are resourceful.  If necessary find an ally with more money or connections.</li>
</ul>
<h3 id="4-the-revealer">4. The Revealer</h3>
<p>The revealer exposes the child to new ideas and shows whats possible for them.</p>
<p>How master parents do it:</p>
<ul>
<li>They expose their child to their tribe.</li>
<li>They expose their child to new learning experiences</li>
<li>They expose their child to the world and harsh realities.  They don&rsquo;t shelter them.  eg include them in adult conversations about adult topics.</li>
<li>They expose their child to possible careers and futures and encourage them to have a vision for what they want to become and to work towards that.</li>
<li>They help their child find a passion project and encourage that.</li>
<li>Its great if some activities are failures and don&rsquo;t work out.  Their child will discover what they don&rsquo;t want.</li>
</ul>
<h3 id="5-the-philosopher">5. The Philosopher</h3>
<p>The philosopher starts early and helps the child to find meaning and purpose.
The authors note that if you consider the definition of a fully realized child
(purpose + agency + smarts), this role is one of the most important.</p>
<p>Philosophies that master parents commonly teach::</p>
<ul>
<li>To seek deep understanding, to struggle with an idea, to be analytical, and to be self analytical.</li>
<li>To avoid poverty.  eg: &ldquo;Don&rsquo;t be poor&rdquo;, &ldquo;Don&rsquo;t live like this&rdquo;, &ldquo;Don&rsquo;t be dependent or trapped&rdquo;, &ldquo;Financial independence is security and freedom&rdquo;</li>
<li>To help improve other&rsquo;s lives</li>
</ul>
<h3 id="6-the-model">6. The Model</h3>
<p>Master parents teach the qualities they want to transmit to their child by
modeling those behaviors in their own lives.</p>
<p>How master parents do it:</p>
<ul>
<li>Model the behavior</li>
<li>Talk about it</li>
<li>Influence rather than coercion</li>
<li>Extended family, ancestors, friends, neighbors, teachers can be models</li>
</ul>
<h3 id="7-the-negotiator">7. The Negotiator</h3>
<p>The negotiator prepares the child to self advocate and make decisions.  They
encourage independence, but sets guidelines.</p>
<p>How master parents do it:</p>
<ul>
<li>They teach the child how to challenge authority</li>
<li>Parents and children spend a lot of time negotiating.  These are learning moments.  Mast parents set the rules (eg in the house), but also listen respectfully and teach the child to how negotiate those rules.  The child will learn to listen and how to defend a viewpoint.</li>
<li>They teach empathy &ndash; how to think from the other person&rsquo;s frame of mind</li>
<li>They teach children to be negotiators, not push overs.</li>
</ul>
<h3 id="8-the-gps">8. The GPS</h3>
<p>Parental advice and wisdom in the child&rsquo;s memory that guides them even when the
parent is not there.  Often this navigational voice will cross generations when
the child becomes a parent.</p>
<p>How master parents do it:</p>
<ul>
<li>They encourage a growth or success mindset</li>
<li>They create high expectations by giving less praise (because success is not surprising) and more encouragement (because hard things take time).</li>
<li>They repeatedly emphasize key points and philosophy.  These points act as a navigational voice in the child&rsquo;s head and can used throughout life as a guidepost during difficult challenges.</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Book Review: The Secrets of Happy Families</title>
            <link>http://blog.kablamo.org/articles/the-secrets-of-happy-families/</link>
            <pubDate>Sun, 29 Jul 2018 00:00:00 +0000</pubDate>
            
            <guid>http://blog.kablamo.org/articles/the-secrets-of-happy-families/</guid>
            <description>The Secrets of Happy Families
Agile families
 Just like agile software development: iterative  </description>
            <content type="html"><![CDATA[<p><a href="https://www.amazon.com/Secrets-Happy-Families-Improve-Mornings/dp/0349402221">The Secrets of Happy Families</a></p>
<p>Agile families</p>
<ul>
<li>Just like agile software development: iterative</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Recommended Modules: Working With Files</title>
            <link>http://blog.kablamo.org/articles/happy-families/</link>
            <pubDate>Tue, 03 Apr 2018 00:00:00 +0000</pubDate>
            
            <guid>http://blog.kablamo.org/articles/happy-families/</guid>
            <description>This week I updated the Recommended Libraries chapter of Minimum Viable Perl.
There are thousands of modules on MetaCPAN. Some are abandoned, some were an experiment that never took off, some are discouraged, and sometimes its just not obvious which module solves your problem best. In the Recommended Libraries chapter I&amp;rsquo;m creating a curated guide to MetaCPAN.
I&amp;rsquo;ve included the latest article below but the canonical (and most up to date version) is available here: Working with files.</description>
            <content type="html"><![CDATA[<p>This week I updated the <strong>Recommended Libraries</strong> chapter of Minimum Viable Perl.</p>
<p>There are thousands of modules on MetaCPAN.  Some are abandoned, some were an
experiment that never took off, some are discouraged, and sometimes its just
not obvious which module solves your problem best.  In the <strong>Recommended
Libraries</strong> chapter I&rsquo;m creating a curated guide to MetaCPAN.</p>
<p>I&rsquo;ve included the latest article below but the canonical (and most up to date
version) is available here: <a href="http://mvp.kablamo.org/cpan/files/">Working with
files</a>.</p>
<hr>
<p>If you are working with files in Perl, be sure to consider these fine CPAN
modules.</p>
<h2 id="table-of-contents">Table Of Contents</h2>
<p class="toc_section">High Level Modules</p>
<ul>
<li>Path::Tiny</li>
<li>IO::All</li>
</ul>
<p class="toc_section">Misc Useful Modules</p>
<ul>
<li>Path::Iterator::Rule</li>
<li>File::chmod</li>
<li>File::pushd</li>
<li>File::ReadBackwards</li>
</ul>
<p class="toc_section">Lower Level Modules</p>
<ul>
<li>Cwd</li>
<li>File::Basename</li>
<li>File::Copy</li>
<li>File::Copy::Recursive</li>
<li>File::MimeInfo</li>
<li>File::Path</li>
<li>File::Slurp</li>
<li>File::Slurper</li>
<li>File::Spec</li>
<li>File::stat</li>
<li>File::Temp</li>
</ul>
<br>
<h1 id="high-level-modules">High Level Modules</h1>
<p>These high level modules making working with files and directories easier by
providing convenience and safety in a single unified object oriented interface.
For most situations choosing one of these is probably the best way to go.</p>
<h2 id="pathtiny">Path::Tiny</h2>
<div class="module">
    <div class="column">MetaCPAN: <a href="https://metacpan.org/pod/Path::Tiny">Path::Tiny</a></div>
    <div class="column">++ rating: 126</div>
    <div class="column">Last update: 2017</div>
    <div class="column">Maintainer: DAGOLDEN</div>
</div>
<p>Path::Tiny is a small fast library with a fairly traditional object oriented
interface for dealing with files and directories.  Its probably the most
popular high level module.</p>
<p>Path::Tiny began life as a minimalist rewrite of the venerable Path::Class
module with a improved user interface.  Over the years its grown in popularity
and has become a mature, full featured library and one of the most common
choices for dealing with files.  These days anyone interested in Path::Class is
probably better served using Path::Tiny.</p>
<h2 id="ioall">IO::All</h2>
<div class="module">
    <div class="column">MetaCPAN: <a href="https://metacpan.org/pod/IO::All">IO::All</a></div>
    <div class="column">++ rating: 58</div>
    <div class="column">Last update: 2017</div>
    <div class="column">Maintainer: FREW</div>
</div>
<p>IO::All is the other library for dealing with files and directories.  It is
also a good solution and nearly as popular as Path::Tiny.</p>
<p>While Path::Tiny aims to be somewhat minimalist and focused, IO::All does
everything.  It does file and directory IO but it also has functionality from
IO::Socket and MLDBM and LWP.  You can use it to create a web server, get files
from ftp sites, or send email.</p>
<p>The user interface is somewhat contraversial.  Depending on your point of view
its powerful, concise, and convenient or makes for hard to read code at times.</p>
<p>Developers visiting Perl from another language are probably going to be more
comfortable with Path::Tiny.</p>
<br>
<h1 id="misc-useful-modules">Misc Useful Modules</h1>
<h2 id="pathiteratorrule">Path::Iterator::Rule</h2>
<div class="module">
    <div class="column">MetaCPAN: <a href="https://metacpan.org/pod/Path::Iterator::Rule">Path::Iterator::Rule</a></div>
    <div class="column">++ rating: 64</div>
    <div class="column">Last update: 2018</div>
    <div class="column">Maintainer: DAGOLDEN</div>
</div>
<p>There are many libraries for iterating over files.  But the bottom line is if
you need to walk a directory tree, select some files, and do stuff you should
almost certainly be using Path::Iterator::Rule.  The user interface is fabulous
and the performance is good.</p>
<p>Alternatives include File::Find which is part of core (distributed with Perl).
File::Find has similarly good performance but is a lot less fun to work with
due to its user interface.  For benchmarks and a good description of
some alternatives see this <a href="https://rjbs.manxome.org/rubric/entry/1981">rjbs
article</a>.</p>
<h2 id="filechmod">File::chmod</h2>
<div class="module">
    <div class="column">MetaCPAN: <a href="https://metacpan.org/pod/File::chmod">File::chmod</a></div>
    <div class="column">++ rating: 3</div>
    <div class="column">Last update: 2015</div>
    <div class="column">Maintainer: XENO</div>
</div>
<p>The Perl builtin function <code>chmod()</code> only accepts octal permissons.  File::chmod
replaces <code>chmod()</code> with its own version that accepts octal, symbolic,
or &ldquo;ls&rdquo; permissions.</p>
<h2 id="filechdir">File::chdir</h2>
<div class="module">
    <div class="column">MetaCPAN: <a href="https://metacpan.org/pod/File::chdir">File::chdir</a></div>
    <div class="column">++ rating: 9</div>
    <div class="column">Last update: 2016</div>
    <div class="column">Maintainer: DAGOLDEN</div>
</div>
<p>The Perl builtin function <code>chdir()</code> changes the current working directory
globally.  If any part of your application or and library calls <code>chdir()</code>, the
cwd for the entire application changes.  File::chdir provides a mechanism for
changing directory locally.</p>
<h2 id="filepushd">File::pushd</h2>
<div class="module">
    <div class="column">MetaCPAN: <a href="https://metacpan.org/pod/File::pushd">File::pushd</a></div>
    <div class="column">++ rating: 9</div>
    <div class="column">Last update: 2016</div>
    <div class="column">Maintainer: DAGOLDEN</div>
</div>
<p>File::pushd provides a way to change directory temporarily for a limited scope.</p>
<h2 id="filereadbackwards">File::ReadBackwards</h2>
<div class="module">
    <div class="column">MetaCPAN: <a href="https://metacpan.org/pod/File::ReadBackwards">File::ReadBackwards</a></div>
    <div class="column">++ rating: 6</div>
    <div class="column">Last update: 2011</div>
    <div class="column">Maintainer: URI</div>
</div>
<p>File::ReadBackwards can read in file contents backwards line by line.</p>
<br>
<h1 id="lower-level-modules">Lower Level Modules</h1>
<p>Modules like Path::Tiny and IO::All are built on top of lower level modules
such as these.  None of these provide an object oriented user interface unless
otherwise noted.</p>
<h2 id="cwd">Cwd</h2>
<div class="module">
    <div class="column">MetaCPAN: <a href="https://metacpan.org/pod/Cwd">Cwd</a></div>
    <div class="column">++ rating: 64</div>
    <div class="column">Last update: 2018</div>
    <div class="column">Maintainer: XSAWYERX</div>
</div>
<p>Cwd is a core module (distributed with Perl) which gets the pathname of the
current working directory.</p>
<h2 id="filebasename">File::Basename</h2>
<div class="module">
    <div class="column">MetaCPAN: <a href="https://metacpan.org/pod/File::Basename">File::Basename</a></div>
</div>
<p>File::Basename is a core module (distributed with Perl) for parsing paths into
directory, filename, and suffix.</p>
<h2 id="filecopy">File::Copy</h2>
<div class="module">
    <div class="column">MetaCPAN: <a href="https://metacpan.org/pod/File::Copy">File::Copy</a></div>
</div>
<p>File::Copy is a core module (distributed with Perl) which provides <code>copy()</code> and <code>move()</code> functions.</p>
<h2 id="filecopyrecursive">File::Copy::Recursive</h2>
<div class="module">
    <div class="column">MetaCPAN: <a href="https://metacpan.org/pod/File::Copy::Recursive">File::Copy::Recursive</a></div>
    <div class="column">++ rating: 13</div>
    <div class="column">Last update: 2018</div>
    <div class="column">Maintainer: DMUEY</div>
</div>
<p>File::Copy::Recursive provides methods for copying directories recursively.</p>
<h2 id="filemimeinfo">File::MimeInfo</h2>
<div class="module">
    <div class="column">MetaCPAN: <a href="https://metacpan.org/pod/File::MimeInfo">File::MimeInfo</a></div>
    <div class="column">++ rating: 7</div>
    <div class="column">Last update: 2017</div>
    <div class="column">Maintainer: FREW</div>
</div>
<p>File::MimeInfo can determine the mimetype from a given filename.</p>
<h2 id="filepath">File::Path</h2>
<div class="module">
    <div class="column">MetaCPAN: <a href="https://metacpan.org/pod/File::Path">File::Path</a></div>
    <div class="column">++ rating: 38</div>
    <div class="column">Last update: 2017</div>
    <div class="column">Maintainer: JKEENAN</div>
</div>
<p>File::Path can create or remove directory trees.</p>
<h2 id="fileslurp">File::Slurp</h2>
<div class="module">
    <div class="column">MetaCPAN: <a href="https://metacpan.org/pod/File::Slurp">File::Slurp</a></div>
    <div class="column">++ rating: 62</div>
    <div class="column">Last update: 2011</div>
    <div class="column">Maintainer: URI</div>
</div>
<p>File::Slurp is not recommended.  This was a popular module for a while so
you may see this in older code.  It&rsquo;s abandoned and has critical flaws which
are not fixed including issues with unicode.  If you like this functionality
try File::Slurper (or better yet Path::Tiny or IO::All).</p>
<h2 id="fileslurper">File::Slurper</h2>
<div class="module">
    <div class="column">MetaCPAN: <a href="https://metacpan.org/pod/File::Slurper">File::Slurper</a></div>
    <div class="column">++ rating: 35</div>
    <div class="column">Last update: 2018</div>
    <div class="column">Maintainer: LEONT</div>
</div>
<p>File::Slurper provides a way to do fast and correct slurping (reading) and
spewing (writing).  All functions throw exceptions on errors.</p>
<h2 id="filespec">File::Spec</h2>
<div class="module">
    <div class="column">MetaCPAN: <a href="https://metacpan.org/pod/File::Spec">File::Spec</a></div>
    <div class="column">++ rating: 64</div>
    <div class="column">Last update: 2018</div>
    <div class="column">Maintainer: XSAWYERX</div>
</div>
<p>File::Spec is a core module (distributed with Perl) for portably manipulating
filenames.  It&rsquo;s not OO.</p>
<h2 id="filestat">File::stat</h2>
<div class="module">
    <div class="column">MetaCPAN: <a href="https://metacpan.org/pod/File::stat">File::stat</a></div>
    <div class="column">++ rating: 58</div>
    <div class="column">Last update: 2017</div>
    <div class="column">Maintainer: FREW</div>
</div>
<p>Perl&rsquo;s builtin <code>stat()</code> function returns a list of 13 file attributes: size,
mode, uid, gid, etc.  All you need to do is remember the order of all those
elements.  File::stat adds sanity by providing an object oriented user
interface to <code>stat()</code>.</p>
<h2 id="filetemp">File::Temp</h2>
<div class="module">
    <div class="column">MetaCPAN: <a href="https://metacpan.org/pod/File::Temp">File::Temp</a></div>
    <div class="column">++ rating: 50</div>
    <div class="column">Last update: 2013</div>
    <div class="column">Maintainer: DAGOLDEN</div>
</div>
<p>File::Temp provides an interface for returning the name and handle of a
temporary file safely.  The best part is it automatically cleans up the
temporary file once the variable has gone out of scope.</p>
]]></content>
        </item>
        
        <item>
            <title>Handling exceptions with try/catch</title>
            <link>http://blog.kablamo.org/articles/try-catch/</link>
            <pubDate>Wed, 28 Mar 2018 00:00:00 +0000</pubDate>
            
            <guid>http://blog.kablamo.org/articles/try-catch/</guid>
            <description>One way to handle exceptions in Perl is with Syntax::Keyword::Try which adds try and catch keywords to Perl. As always there are trade offs and it depends on your goals and preferences.
It has no dependencies and plays nicely with perltidy and perlcritic. However, it is 2.6 times slower than eval() and it&amp;rsquo;s not included in the Perl core so you will need to install it.
Alternate
Solutions There is more than one way to handle exceptions in Perl and several modules on MetaCPAN which add try/catch keywords to Perl.</description>
            <content type="html"><![CDATA[<h1 id="heading"></h1>
<p>One way to handle exceptions in Perl is with
<a href="https://metacpan.org/pod/Syntax::Keyword::Try">Syntax::Keyword::Try</a> which
adds <code>try</code> and <code>catch</code> keywords to Perl. As always there are trade offs and it
depends on your goals and preferences.</p>
<p>It has no dependencies and plays nicely with perltidy and perlcritic.  However,
it is 2.6 times slower than <code>eval()</code> and it&rsquo;s not included in the Perl core so
you will need to install it.</p>
<div class="tip">
    <div class="tip-title">Alternate<br>Solutions</div>
    <div class="tip-content" style="margin-left:6rem">
        There is more than one way to handle exceptions in Perl and several modules
on MetaCPAN which add try/catch keywords to Perl.  To find out which solution
is best for you, see <a href="https://mvp.kablamo.org/cpan/exceptions/">Whats the best way to handle
exceptions?</a>
    </div>
</div>
<h1 id="throwing-exceptions">Throwing exceptions</h1>
<p>To throw an exception call <code>die()</code>.  If the exception is not caught, an error
message is displayed to STDERR and the process exits with a non-zero value.
Syntax::Keyword::Try doesn&rsquo;t change how exceptions are thrown.</p>
<pre><code>die &quot;Something bad happened&quot;;
# prints &quot;Something bad happened at line 123.&quot; 
# and then the process exits;
</code></pre>
<h1 id="catching-exceptions">Catching exceptions</h1>
<pre><code>use Syntax::Keyword::Try

try {
    die &quot;its only a flesh wound&quot;;
}
catch {
    warn &quot;something bad happened: $@&quot;;
}
</code></pre>
<p>The catch block can inspect the exception by looking at <code>$@</code>.</p>
<h1 id="exceptions-as-objects">Exceptions as objects</h1>
<p>Exceptions are usually strings, but you can throw objects too.</p>
<pre><code>try {
    die My::Exception-&gt;new(
        error    =&gt; 'Something bad happened',
        request  =&gt; $request,
        response =&gt; $response,
    );
}
catch {
    warn &quot;something bad happened: &quot; . $@-&gt;error();
}
</code></pre>
<h1 id="pitfalls-for-perl-programmers">Pitfalls for Perl programmers</h1>
<p>These are not really pitfalls.  Syntax::Keyword::Try works the same as
try/catch works in other languages.  However if you are used to handling
exceptions with die/eval or Try::Tiny here are a few things that you may have
forgotten about try/catch:</p>
<p><em>1. A <code>try</code> block must be followed by <code>catch</code> or <code>finally</code> or both.</em></p>
<pre><code>try { do_something_risk() } # syntax error
</code></pre>
<p><em>2. A <code>try</code> block does not catch exceptions.</em>  The <code>catch</code> block catches exceptions.</p>
<pre><code>try     { die &quot;its just a flesh wound&quot; }
finally { say &quot;hello&quot; }
# no exception is caught
# prints &quot;its just a flesh wound&quot; to STDERR
# process exits
</code></pre>
<p><em>3. A <code>return</code> statement will exit the containing function &ndash; not the <code>try</code> block.</em></p>
<p><em>4. Loop control statements like <code>redo</code>, <code>next</code>, and <code>last</code> act on any containing loops.</em></p>
]]></content>
        </item>
        
        <item>
            <title>Handling exceptions with die/eval</title>
            <link>http://blog.kablamo.org/articles/die-eval/</link>
            <pubDate>Tue, 20 Mar 2018 00:00:00 +0000</pubDate>
            
            <guid>http://blog.kablamo.org/articles/die-eval/</guid>
            <description>The standard Perl syntax for handling exceptions (die/eval) is quirky and has some pitfalls that are easy to tumble into. However its pretty common so you will need to understand it.
Alternate
Solution Several modules exist that add try/catch syntax to Perl. As always there are some trade offs. See Handling exceptions with try/catch for details.   Throwing exceptions To throw an exception call die(). Other languages call it throw(), but in Perl its called die().</description>
            <content type="html"><![CDATA[<p>The standard Perl syntax for handling exceptions (die/eval) is quirky and has
some pitfalls that are easy to tumble into.  However its pretty common so
you will need to understand it.</p>
<div class="tip">
    <div class="tip-title">Alternate<br>Solution</div>
    <div class="tip-content" style="margin-left:6rem">
        Several modules exist that add try/catch syntax to Perl. 
        As always there are some trade offs.  See <a
href="https://mvp.kablamo.org/essentials/try-catch/"> Handling
exceptions with try/catch</a> for details.
    </div>
</div>
<h1 id="throwing-exceptions">Throwing exceptions</h1>
<p>To throw an exception call <code>die()</code>.  Other languages call it <code>throw()</code>, but in
Perl its called <code>die()</code>.  If the exception is not caught, an error message is
displayed to STDERR and the process exits with a non-zero value.</p>
<pre><code>die &quot;Something bad happened&quot;;
# prints &quot;Something bad happened at line 123.&quot; 
# and then the process exits;
</code></pre>
<h1 id="catching-exceptions">Catching exceptions</h1>
<p>To catch an exception, use <code>eval()</code>. Other languages call it <code>try()</code> but in
Perl its called <code>eval()</code> and its a little different.  <code>eval()</code> parses,
compiles, and evaluates a block of code at compile time and catches any
exceptions that are raised at runtime.  The exception is placed in the global
variable <code>$@</code>.</p>
<pre><code>eval { die &quot;Something bad happened&quot; }; # try (and catch)
warn $@ if $@;                         # handle exception
</code></pre>
<h1 id="exceptions-as-objects">Exceptions as objects</h1>
<p>Exceptions are usually strings, but you can throw objects too.</p>
<pre><code>eval {
    die My::Exception-&gt;new(
        error    =&gt; 'Something bad happened',
        request  =&gt; $request,
        response =&gt; $response,
    );
};
warn $@-&gt;error if $@;
</code></pre>
<h1 id="pitfalls">Pitfalls</h1>
<p><em>1. <code>$@</code> is a global variable</em></p>
<p>If your exception handling code calls <code>eval()</code>, <code>$@</code> will get clobbered.  This
is easy to forget.  Here is one way to avoid it:</p>
<pre><code>eval { die &quot;something bad&quot; };
if ($@) {
    my $error = $@;
    disconnect_from_the_database(); # calls eval()
    warn $error;
}
</code></pre>
<p>If you are a module author and want to be polite and not modify <code>$@</code> globally
you need to jump through hoops like this:</p>
<pre><code>my ($error1, $error2);
{
    local $@;
    unless (eval { ...; return 1 }) {
        $error1 = 1;
        $error2 = $@;
    }
}
if ($error1) {
    # handle exception
}
</code></pre>
<p><em>2. Exception objects that evaluate as false</em></p>
<p>You can <a href="https://metacpan.org/pod/overload">overload</a> Perl operators.  For
example, you could have an exception object evaluate to &ldquo;error&rdquo; in string
context.  You could also have an exception object evaluate to -1 in string
context.</p>
<p>This would cause mysterious problems for most people because the common
idiom <code>handle_exception() if $@</code> will silently fail and the exception won&rsquo;t be
handled.</p>
<p>One solution is to use a safer but more verbose idiom everywhere:</p>
<pre><code>unless ( eval { try_something_risky(); return 1 } ) {
    handle_exception();
}
</code></pre>
<p><em>3. <code>eval</code> blocks behave more like anonymous subroutines than if blocks.</em></p>
<p>For example:</p>
<ul>
<li>A <code>return</code> statement will exit the <code>eval</code> block &ndash; not the containing function.</li>
<li>Loop control statements like <code>redo</code>, <code>next</code>, and <code>last</code> only work in the context of whats inside the <code>eval</code> block.</li>
</ul>
<h1 id="see-also">See also</h1>
<p>For more info read the documentation for
<a href="http://perldoc.perl.org/functions/die.html">die()</a> and
<a href="http://perldoc.perl.org/functions/eval.html">eval()</a></p>
]]></content>
        </item>
        
        <item>
            <title>What&#39;s the best Perl module for X</title>
            <link>http://blog.kablamo.org/articles/recommended-modules/</link>
            <pubDate>Sat, 10 Mar 2018 00:00:00 +0000</pubDate>
            
            <guid>http://blog.kablamo.org/articles/recommended-modules/</guid>
            <description>Its hard for beginners and experts alike in any language to keep up with the flood of new libraries being written all the time. MetaCPAN has thousands of modules. Its hard to know which module is the best one. For example there are at least 7 modules for parsing JSON in Perl. New modules appear all the time which make the old best solution obsolete.
How to choose a module There are a couple good sources of advice:</description>
            <content type="html"><![CDATA[<p>Its hard for beginners and experts alike in any language to keep up with the
flood of new libraries being written all the time.  MetaCPAN has thousands of
modules. Its hard to know which module is the best one. For example there are
at least 7 modules for parsing JSON in Perl. New modules appear all the time
which make the old best solution obsolete.</p>
<h1 id="how-to-choose-a-module">How to choose a module</h1>
<p>There are a couple good sources of advice:</p>
<ul>
<li><a href="http://blog.kablamo.org/2015/09/08/mstpan/">mstpan</a> is a great
set of blog posts from 2015 written by
<a href="https://shadow.cat/blog/matt-s-trout/">mst</a>.</li>
<li><a href="https://metacpan.org/pod/Task::Kensho">Task::Kensho</a> is a list of approved
modules maintained by The Enlighted Perl Organization.</li>
<li><a href="http://neilb.org/">Neil Bowers</a> wrote some <a href="http://neilb.org/reviews/">great module reviews</a>.</li>
<li><a href="https://metacpan.org/pod/Perl::Critic::Policy::Freenode::DiscouragedModules">DiscuragedModules</a>
is a perlcritic policy which lists modules you probably shouldn&rsquo;t use.</li>
</ul>
<h1 id="some-problems">Some problems</h1>
<p>These are great sources of advice that insiders are familiar with.  There are few
issues though.</p>
<ul>
<li>This advice is hard to find for new people &ndash; or
even for people who are busy solving problems instead of navel gazing about
their language of choice (like I do).</li>
<li>There isn&rsquo;t always a sustained effort to keep these current.</li>
<li>Some sources don&rsquo;t discuss alternatives or provide reasons for the
recommendations.  A discussion helps developers make up their own mind about
whether the advice fits their situation or is outdated or is just silly.</li>
<li>Some topics aren&rsquo;t covered.</li>
</ul>
<h1 id="recomended-modules">Recomended Modules</h1>
<p>I&rsquo;m hoping I can solve some of these issues.  Its still new and experimental,
but I started writing a new chapter for my book Minimum Viable Perl called
&ldquo;Recommended Modules&rdquo;.</p>
<p>The first article is out and its about choosing <a href="http://mvp.kablamo.org/cpan/exceptions/">the best module for handling
exceptions</a>.  I reviewed 6 different
ways of handling exceptions and benchmarked them.  Its the 1st of 3
articles on handling exceptions.</p>
<p>The goal is to make the &ldquo;Recommended Modules&rdquo; chapter everyone&rsquo;s destination
for quickly discovering what the best Perl module is for solving a given
problem.</p>
<p>Its on github &ndash; like the rest of the book.  So feedback is welcome via <a href="https://github.com/kablamo/mvp.kablamo.org/issues">github
issues</a>.</p>
<p><img style="font-size: 20rem" class="emojidex-emoji" src="https://cdn.emojidex.com/emoji/seal/thumbsup(ye).png" emoji-code="thumbsup(ye)" emoji-moji="👍🏽" alt="thumbsup(ye)" /></p>
]]></content>
        </item>
        
        <item>
            <title>I wrote a Perl book</title>
            <link>http://blog.kablamo.org/articles/mvp/</link>
            <pubDate>Fri, 08 Dec 2017 00:00:00 +0000</pubDate>
            
            <guid>http://blog.kablamo.org/articles/mvp/</guid>
            <description>I wrote a Perl book accidentally during my vacation. I started typing and everything just fell out of my head over the next few days. Its still pretty rough but I think its a decent start.
The book is called Minimum Viable Perl.
Ok, its not a real published book. Maybe I&amp;rsquo;ll self publish it on Amazon some day. For now its just a website. I&amp;rsquo;m going to call it a book anyway.</description>
            <content type="html"><![CDATA[<p>I wrote a <a href="http://mvp.kablamo.org">Perl book</a> accidentally during my vacation.
I started typing and everything just fell out of my head over the next few days.
Its still pretty rough but I think its a decent start.</p>
<p>The book is called <a href="http://mvp.kablamo.org">Minimum Viable Perl</a>.</p>
<img style="border: 0px solid #ddd" src="/images/mvp-book.jpg">
<p>Ok, its not a real published book.  Maybe I&rsquo;ll self publish it on Amazon some
day.  For now its just a website.  I&rsquo;m going to call it a book anyway.</p>
<h1 id="what-its-about">What its about</h1>
<p>This book is for developers who want to get up to speed with Perl quickly
through concise tutorials (about 1 screenful in size).</p>
<p>Being concise is one of the primary goals.  In the age of stackoverflow and
blogs and info graphics everyone is in a hurry.  People shouldn&rsquo;t have to wade
through unnecessary prose. I literally review each sentence in each article and
try to remove unnecessary words.</p>
<p>In order to keep things short and to the point I&rsquo;ve also chosen to be
opinionated and intentionally left out some dicussions and edge cases that were
uncommon or not essential. Instead I&rsquo;ve tried to link to more information.</p>
<h1 id="why-i-wrote-it">Why I wrote it</h1>
<p>I keep meeting good developers who are visiting Perl from other languages who
are strugglng with the language.  I&rsquo;ve tried pointing them at various books and
resources but that doesn&rsquo;t seem to be enough. When I talk to them about their
struggles, the top 3 problems I hear about are:</p>
<ol>
<li>Dereferencing (confusing)</li>
<li>Object oriented programming (how?)</li>
<li>Random stuff they can easily do in their favorite language but don&rsquo;t yet
know how to do in Perl (opening files, testing, templates, dependencies, etc).</li>
</ol>
<p>My theory is these all boil down to the fact they don&rsquo;t have a good, concise,
easily digestable online source of information and answers in one easy to find
location.  The information is out there but its not easy for new people to
find.  This is my attempt to solve that problem.</p>
<h1 id="the-future-of-minimum-viable-perl">The future of Minimum Viable Perl</h1>
<p>If this seems useful to people, there are many more articles that could be
written and quite a few rough edges that could be smoothed.</p>
<p>Feedback and bug reports are welcome via
<a href="https://github.com/kablamo/mvp.kablamo.org/issues">github</a></p>
]]></content>
        </item>
        
        <item>
            <title>Vim plugin keybindings</title>
            <link>http://blog.kablamo.org/articles/vim-plugin-keybindings/</link>
            <pubDate>Sun, 26 Nov 2017 00:00:00 +0000</pubDate>
            
            <guid>http://blog.kablamo.org/articles/vim-plugin-keybindings/</guid>
            <description>I pick up all kinds of vim tricks and plugins but I can never remember all the shortcuts. I wrote up this quick reference to help myself memorize how to use these tools.
Caveat: some of these keybindings are unique to my .vimrc.
 table { margin-top: 0rem; } td { vertical-align : top; padding-left : .5em; padding-right : .5em; background : #999; color : #333; } th { text-align:left; background : #666; color : #ccc; white-space : nowrap; font-weight : normal; padding-left : .</description>
            <content type="html"><![CDATA[<p>I pick up all kinds of vim tricks and plugins but I can never remember all the
shortcuts.  I wrote up this quick reference to help myself memorize how to use
these tools.</p>
<p>Caveat: some of these keybindings are unique to my <a href="https://github.com/kablamo/yadm/blob/master/.vimrc">.vimrc</a>.</p>
<style>
table {
  margin-top: 0rem;
}
td {
  vertical-align : top;
  padding-left   : .5em;
  padding-right  : .5em;
  background     : #999;
  color          : #333;
}
th {
  text-align:left;
  background    : #666;
  color         : #ccc;
  white-space   : nowrap;
  font-weight   : normal;
  padding-left  : .5em;
  padding-right : .5em;
}
a.plugin, a.plugin:visited {
  color     : #666;
  font-size : 2rem;
}
kbd {
  background  : #666;
  border      : 0px;
  box-shadow  : none;
  color       : #333;
  font-weight : bold;
  font-weight : normal;
}
code {
  background : #111;
  color      : #fff;
}
*, *:before, *:after {
  -webkit-box-sizing: border-box;
      -moz-box-sizing: border-box;
          box-sizing: border-box;
}
</style>
<h3><a class="plugin" href="https://vimawesome.com/plugin/fzf">fzf</a></h3>
Fuzzy Finder
<table>
  <tr>
    <th><kbd>&lt;leader&gt;f</kbd></th>
    <td>Find files with rg by filename</td>
  </tr>
  <tr>
    <th><kbd>&lt;leader&gt;*</kbd></th>
    <td>Search file contents with rg (<kbd>alt-a</kbd> to select all). Results go in a QuickFix window.</td>
  </tr>
  <tr>
    <th><kbd>&lt;leader&gt;* -t perl</kbd></th>
    <td>Same as above but only search perl files</td>
  </tr>
  <tr>
    <th><kbd>&lt;leader&gt;&lt;tab&gt;</kbd></th>
    <td>Search all vim mappings</td>
  </tr>
  <tr>
    <th><kbd>&lt;c-x&gt;&lt;c-f&gt;</kbd></th>
    <td>Complete file names</td>
  </tr>
  <tr>
    <th><kbd>&lt;c-x&gt;&lt;c-l&gt;</kbd></th>
    <td>Complete line</td>
  </tr>
</table>
<br>
QuickFix keybindings: Search and replace across multiple files
<table>
  <tr>
    <th><kbd>fn</kbd></th>
    <td>next</td>
  </tr>
  <tr>
    <th><kbd>fp</kbd></th>
    <td>prev</td>
  </tr>
  <tr>
    <th><kbd>:cdo &lt;cmd&gt;</kbd></th>
    <td>For each entry run <kbd>&lt;cmd&gt;</kbd></td>
  </tr>
  <tr>
    <th><kbd>:cdo s/&lt;c-r&gt;"//c</kbd></th>
    <td>Same as above but don't need to retype the search regexp that was used by fzf</td>
  </tr>
  <tr>
    <th><kbd>:cfdo &lt;cmd&gt;</kbd></th>
    <td>For each file run <kbd>&lt;cmd&gt;</kbd></td>
  </tr>
</table>
<br>
<h3><a class="plugin" href="https://vimawesome.com/plugin/tagbar">Tagbar</a></h3>
Browse the tags (packages, labels, subroutines, etc) of the current file and get an overview of its structure.
<table>
  <tr>
    <th><kbd>&lt;leader&gt;m</kbd></th>
    <td>Show tags</td>
  </tr>
</table>
<h3><a class="plugin" href="https://vimawesome.com/plugin/buffergator">Buffergator</a></h3>
List, navigate between, and select buffers to edit.
<table>
  <tr>
    <th><kbd>&lt;leader&gt;b</kbd></th>
    <td>Open a window listing all buffers</td>
  </tr>
</table>
<h3><a class="plugin" href="https://vimawesome.com/plugin/vim-easy-align">EasyAlign</a></h3>
Vertically align stuff
<table>
  <tr>
    <th><kbd>&lt;leader&gt;a</kbd></th>
    <td>Align something</td>
  </tr>
  <tr>
    <th><kbd>&lt;leader&gt;a&lt;ctrl-p&gt;</kbd></th>
    <td>Align something in interactive mode</td>
  </tr>
  <tr>
    <th><kbd>&lt;leader&gt;a=</kbd></th>
    <td>Align around first occurance of <kbd>=</kbd></td>
  </tr>
  <tr>
    <th><kbd>&lt;leader&gt;a2=</kbd></th>
    <td>Align around 2nd <kbd>=</kbd></td>
  </tr>
  <tr>
    <th><kbd>&lt;leader&gt;a*=</kbd></th>
    <td>Align around all <kbd>=</kbd></td>
  </tr>
  <tr>
    <th><kbd>&lt;leader&gt;a-=</kbd></th>
    <td>Align around last <kbd>=</kbd></td>
  </tr>
  <tr>
    <th><kbd>&lt;leader&gt;a&lt;ctrl-x&gt;</kbd></th>
    <td>Align around a regular expression</td>
  </tr>
</table>
<h3><a class="plugin" href="https://vimawesome.com/plugin/vim-gurl">gurl</a></h3>
Provides links to the current line/selection on the github website so you easily talk about code with others.
<table>
  <tr>
    <th><kbd>&lt;leader&gt;t</kbd></th>
    <td>Get a link to the current line/selection</td>
  </tr>
</table>
<h3><a class="plugin" href="https://vimawesome.com/plugin/perlhelp-vim">PerlHelp</a></h3>
<p>Quick access to perldoc</p>
<table>
  <tr>
    <th><kbd>&lt;leader&gt;pd</kbd></th>
    <td>perldoc on the package name under cursor</td>
  </tr>
  <tr>
    <th><kbd>&lt;leader&gt;ph</kbd></th>
    <td>perldoc on the package name under cursor</td>
  </tr>
  <tr>
    <th><kbd>&lt;leader&gt;pf</kbd></th>
    <td>perldoc on the function name under cursor</td>
  </tr>
  <tr>
    <th><kbd>&lt;leader&gt;pv</kbd></th>
    <td>perldoc on the special Perl variable under cursor</td>
  </tr>
</table>
<h3><a class="plugin" href="https://vimawesome.com/plugin/perl-nextmethod">perl-nextmethod</a></h3>
Jump to the next/prev Perl method
<table>
  <tr>
    <th><kbd>]m</kbd></th>
    <td>Jump to the next Perl subroutine start</td>
  </tr>
  <tr>
    <th><kbd>]M</kbd></th>
    <td>Jump to the next Perl subroutine end</td>
  </tr>
  <tr>
    <th><kbd>[m</kbd></th>
    <td>Jump to the previous Perl subroutine start</td>
  </tr>
  <tr>
    <th><kbd>[M</kbd></th>
    <td>Jump to the previous Perl subroutine end</td>
  </tr>
</table>
]]></content>
        </item>
        
        <item>
            <title>My long term goals v2017.1</title>
            <link>http://blog.kablamo.org/articles/five-year-goals/</link>
            <pubDate>Sun, 08 Jan 2017 00:00:00 +0000</pubDate>
            
            <guid>http://blog.kablamo.org/articles/five-year-goals/</guid>
            <description>Maybe writing about my long term goals occasionally will help me think through them and commit to them.
I currently group my goals into 4 major categories. I try to re-evaluate them frequently. Which means they change. I try to look at them every day so they are top of mind and I don&amp;rsquo;t get off track.
To achieve these goals I need to break them down into smaller and smaller chunks until I find a chunk thats easy to do.</description>
            <content type="html"><![CDATA[<p>Maybe writing about my long term goals occasionally will help me think through
them and commit to them.</p>
<p>I currently group my goals into 4 major categories. I try to re-evaluate them
frequently.  Which means they change.  I try to look at them every day so they
are top of mind and I don&rsquo;t get off track.</p>
<p>To achieve these goals I need to break them down into smaller and smaller
chunks until I find a chunk thats easy to do.  Basically its just a matter of
solving problems until all the problems are gone and I reach my goal.
Prioritization, measuring progress, and not getting stuck are important too.</p>
<h1 id="financial-independence">Financial independence</h1>
<p>I want to be financially independent by 2020.  Which means I need to save
enough money that I can live off the investment returns.</p>
<p>Some clarification: Its not my goal to sit around and do nothing.   And I&rsquo;m
not necessarily going to quit my job.  My job is amazing, my coworkers are
brilliant, I&rsquo;m learning a lot, and our product is both cool and useful.</p>
<p>The purpose is to have the freedom to do what I want.  And to know with
certainty I&rsquo;m doing what I want.  And to be able to protect my family from risk
and change more easily.</p>
<p>There are 3 ways to generate wealth. I will need to:</p>
<ol>
<li>Keep expenses low</li>
<li>Keep income high</li>
<li>Invest wisely</li>
</ol>
<h1 id="good-health">Good health</h1>
<p>Life is good.  I want to live forever. Failing that I&rsquo;d like to live as long as
possible with a high quality of life.</p>
<p>Basic goals</p>
<ul>
<li>Eat well</li>
<li>Sleep a lot</li>
<li>Healthy teeth</li>
<li>Weight under 155</li>
<li>Aerobic:  Run 3 miles every day</li>
<li>Strength: 100 pushups every day</li>
<li>Strength:  20 pullups every day</li>
</ul>
<p>Stretch goals</p>
<ul>
<li>Strength: handstand</li>
<li>Body fat: 6 pack</li>
<li>Endurance: marathon</li>
</ul>
<p>The fitness goals seem fairly simple to achieve but require quite a bit of
time.  The hard part for me is avoiding injury.  Diet is a harder problem.  I
eat pretty well.  Doing better here might require asking some experts and/or
just doing more research.</p>
<h1 id="better-relationships">Better relationships</h1>
<p>I want:</p>
<ul>
<li>Friends who live in my neighborhood</li>
<li>To see everyone in my family at least once a year</li>
<li>To visit friends who are spread around the world once a year</li>
</ul>
<p>I&rsquo;m an introvert, I work too much, and I have a 1 year old.  So I
suck at relationships.  Tribes are helpful and fun.  One of the big advantages
to financial independence is having the money and time to spend with friends
and family.</p>
<p>I believe that like anything else I can do better through analysis, planning,
and practice.  I have some ideas, but exactly what I&rsquo;m going to do needs to be
fleshed out more.</p>
<h1 id="awesome-kids">Awesome kids</h1>
<p>I&rsquo;d have tons of kids if I had tons of money and time.  Atm having more kids
sounds like a terrifying amount of work.  But I also think its one of the most
rewarding things a person can do and I especially think its going to be totally
worth it when I&rsquo;m old.  This objective is woefully non specific atm and needs a
lot of work.</p>
]]></content>
        </item>
        
        <item>
            <title>My goals for 2017</title>
            <link>http://blog.kablamo.org/articles/next-year/</link>
            <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
            
            <guid>http://blog.kablamo.org/articles/next-year/</guid>
            <description>Spend less than $36,500 in 2017. If I can keep my spending at this level I should be on my way to a long term goal of being financially independent at age 42. We spent about $45,000 in 2016.
  Build a portfolio of airline miles and hotel points by travel hacking credit cards. This could save me $4,000 a year or more in annual plane tickets and hotels for a family of 3 to travel to Singapore.</description>
            <content type="html"><![CDATA[<ol>
<li>
<p><strong>Spend less than $36,500 in 2017.</strong> If I can keep my spending at this level
I should be on my way to a long term goal of being financially
independent at age 42.  We spent about $45,000 in 2016.</p>
</li>
<li>
<p><strong>Build a portfolio of airline miles and hotel points by travel hacking
credit cards.</strong> This could save me $4,000 a year or more in annual plane
tickets and hotels for a family of 3 to travel to Singapore.  We go every year
to visit my wife&rsquo;s family.  I completed a free 15 day email course at
<a href="https://travelmiles101.com">travelmiles101.com</a> and I can&rsquo;t recommend that
enough.</p>
</li>
<li>
<p><strong>Help my wife get her license.</strong> Time is the most valuable thing.  It would
be way more efficient if I can do chores while my wife goes to the grocery
store.</p>
</li>
<li>
<p><strong>Make at least 1 good friend who is a neighbor.</strong> We just moved.  Our
neighbors seem like they might be cool.  Science says having friends makes
you live longer &ndash; especially if they live close by.  Also part of the appeal
of financial independence is having more time to spend with friends and family.</p>
</li>
<li>
<p><strong>Write about how to get stuff done - project management for people
who aren&rsquo;t project managers.</strong> I think writing is the best way to learn.
Getting better at managing projects at home and at work has been on my mind for
the last 2 years.  Time is everyone&rsquo;s biggest constraint.</p>
</li>
<li>
<p><strong>Get 100 readers per month on this blog by the end of the year.</strong></p>
</li>
<li>
<p><strong>Learn to walk on my hands.</strong>  Last year my fitness goal was 100 pushups
and 20 pullups every other day.  Shockingly I managed to acheive that.  I am
apparently old and delicate so it took me most of the year.  But it was just a
stepping stone to my larger goal of learning to walk on my hands.  How is this
useful?  Its not.  I want to be strong but I need a specific goal.  This one
sounded more fun than &ldquo;lift 500 pounds&rdquo;.</p>
</li>
<li>
<p><strong>Fix my knee injury.</strong>  I need to see a physical therapist so I can run
again.  I&rsquo;ve been putting this off and trying to solve it on my own for
years which is dumb.</p>
</li>
</ol>
]]></content>
        </item>
        
        <item>
            <title>CPAN::Diff - Compare local Perl modules to your darkpan or cpan</title>
            <link>http://blog.kablamo.org/articles/cpan-diff/</link>
            <pubDate>Fri, 07 Oct 2016 00:00:00 +0000</pubDate>
            
            <guid>http://blog.kablamo.org/articles/cpan-diff/</guid>
            <description>At work we have a Pinto powered darkpan. But developers install stuff from cpan on their development servers to try things out and occasionally these experiments don&amp;rsquo;t get cleaned up and cause problems. It would be nice nice to know what modules are installed on a machine and how that compares to whats on our darkpan. Specifically I want to know which modules are:
 Older than those on the darkpan Newer than those on the darkpan Installed on the server but are not in the darkpan  I solved this by stealing a lot of code from cpan-outdated and writing CPAN::Diff:</description>
            <content type="html"><![CDATA[<p>At work we have a Pinto powered darkpan.  But developers install stuff from
cpan on their development servers to try things out and occasionally these
experiments don&rsquo;t get cleaned up and cause problems.  It would be nice nice to
know what modules are installed on a machine and how that compares to whats on
our darkpan.  Specifically I want to know which modules are:</p>
<ul>
<li>Older than those on the darkpan</li>
<li>Newer than those on the darkpan</li>
<li>Installed on the server but are not in the darkpan</li>
</ul>
<p>I solved this by stealing a lot of code from
<a href="https://metacpan.org/pod/cpan-outdated">cpan-outdated</a> and writing
<a href="https://metacpan.org/pod/CPAN::Diff">CPAN::Diff</a>:</p>
<pre><code># Usage
$ cpan-diff --help

# Find local modules which are older than whats available in the CPAN
$ cpan-diff older
Acme::LookOfDisapproval
Acme::What

$ cpan-diff older --verbose
Acme::LookOfDisapproval        0.005   0.006 ETHER/Acme-LookOfDisapproval-0.006
Acme::What                     0.004   0.005 T/TO/TOBYINK/Acme-What-0.005.tar.gz

# Find local modules which are older than the ones in your company darkpan.
$ cpan-diff older --verbose --mirror https://darkpan.yourcompany.com
Acme::LookOfDisapproval        0.005   0.006 ETHER/Acme-LookOfDisapproval-0.006
Acme::What                     0.004   0.005 T/TO/TOBYINK/Acme-What-0.005.tar.gz

# Find local modules which are newer than the ones in your darkpan.  
$ cpan-diff newer --mirror https://darkpan.yourcompany.com

# Find local modules which are 'extra' -- ie don't exist in your darkpan.
$ cpan-diff extra --mirror https://darkpan.yourcompany.com
</code></pre>
]]></content>
        </item>
        
        <item>
            <title>Bash tricks: set -euxo pipefail</title>
            <link>http://blog.kablamo.org/articles/bash-tricks-eux/</link>
            <pubDate>Sun, 08 Nov 2015 00:00:00 +0000</pubDate>
            
            <guid>http://blog.kablamo.org/articles/bash-tricks-eux/</guid>
            <description>set -eux is a super useful bash trick I&amp;rsquo;ve been using in Chef and Rex tasks. I&amp;rsquo;m going to break it down and explain it one option at a time:
set -e This
cmd1 &amp;amp;&amp;amp; cmd2 &amp;amp;&amp;amp; cmd3  is equivalent to this
set -e cmd1 cmd2 cmd3  set -u The shell prints a message to stderr when it tries to expand a variable that is not set. Also it immediately exits.</description>
            <content type="html"><![CDATA[<p><code>set -eux</code> is a super useful bash trick I&rsquo;ve been using in Chef and
<a href="https://metacpan.org/pod/Rex">Rex</a> tasks.  I&rsquo;m going to break it down and
explain it one option at a time:</p>
<h1 id="set--e">set -e</h1>
<p>This</p>
<pre><code>cmd1 &amp;&amp; cmd2 &amp;&amp; cmd3
</code></pre>
<p>is equivalent to this</p>
<pre><code>set -e
cmd1
cmd2
cmd3
</code></pre>
<h1 id="set--u">set -u</h1>
<p>The shell prints a message to stderr when it tries to expand a variable that is
not set.  Also it immediately exits. An interactive shell will not exit.  I
think this is similar to Perl&rsquo;s
<a href="https://metacpan.org/pod/strictures">use strictures</a> which is something Moo
enables.</p>
<h1 id="set--x">set -x</h1>
<p>The shell prints each command in a script to stderr before running it.  I think
this would be particularly useful in Rex.  And Chef.</p>
<pre><code>set -x
echo hey
echo woah
</code></pre>
<p>output:</p>
<pre><code>+ echo hey
hey
+ echo woah
woah
</code></pre>
<h1 id="set--o-pipefail">set -o pipefail</h1>
<p>Pipelines fail on the first command which fails instead of dying later on
down the pipeline.  This is especially good when cmd3 is a command that always
succeeds (like echo):</p>
<pre><code>cmd1 | cmd2 | cmd3
</code></pre>
<h1 id="see-also">See also</h1>
<ul>
<li><a href="http://www.peterbe.com/plog/set-ex">The most useful bash trick of the year</a></li>
<li>[explainshell: set -euxo pipefail](<a href="http://explainshell.com/explain?cmd=set+-euxo">http://explainshell.com/explain?cmd=set+-euxo</a> pipefail)</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>The Perl test ecosystem (slides)</title>
            <link>http://blog.kablamo.org/articles/slides-perl-testing/</link>
            <pubDate>Sat, 26 Sep 2015 00:00:00 +0000</pubDate>
            
            <guid>http://blog.kablamo.org/articles/slides-perl-testing/</guid>
            <description>I gave this talk last Thursday at Chicago.pm. This talk assumes the listener knows very little about testing in Perl but likely has something for more advanced users as well.
It begins with prove and Test::More, but then moves on to explore the Test:: namespace on CPAN and talk about 20 other test modules. CPAN has a large number of modules to help with testing &amp;ndash; its a pretty healthy ecosystem.</description>
            <content type="html"><![CDATA[<p>I gave this talk last Thursday at
<a href="http://chicago.pm.org/blog/2015/09/19/the-perl-test-ecosystem/">Chicago.pm</a>.
This talk assumes the listener knows very little about testing in Perl but
likely has something for more advanced users as well.</p>
<p>It begins with <code>prove</code> and <code>Test::More</code>, but then moves on to explore the <code>Test::</code>
namespace on CPAN and talk about 20 other test modules.  CPAN has a large
number of modules to help with testing &ndash; its a pretty healthy ecosystem.</p>
<p>My goal was to create talk which not only gives new people an introduction to
testing in Perl, but also provides up to date advice about which modules are
useful and recommended.  Feedback and corrections welcome.</p>
<p>As usual, this talk is both a living document and reference material. I keep my
talks updated and relevant so I can refer people to them. If I’ve missed
anything feel free to contribute to the github repo or leave a comment.</p>
<p><a href="http://kablamo.org/slides-perl-testing">Slides</a> |
<a href="http://github.com/kablamo/slides-perl-testing">GitHub repo</a></p>
]]></content>
        </item>
        
        <item>
            <title>Publish your first CPAN module in &lt; 5 minutes (slides)</title>
            <link>http://blog.kablamo.org/articles/slides-first-cpan-module/</link>
            <pubDate>Tue, 15 Sep 2015 00:00:00 +0000</pubDate>
            
            <guid>http://blog.kablamo.org/articles/slides-first-cpan-module/</guid>
            <description>I originally gave this talk at Chicago.pm as part of a “Distribution Management Shootout” – a 3 way duel between:
 jberger&amp;rsquo;s talk about Module::Build and and the &amp;ldquo;Classic&amp;rdquo; build systems preaction&amp;rsquo;s talk about Dist::Zilla, and my talk about Minilla and Carton.  It was a great overview of the most popular tools and I think all the talks are worth checking out.
As usual, this talk is both a living document and reference material.</description>
            <content type="html"><![CDATA[<p>I originally gave this talk at Chicago.pm as part of a “Distribution Management
Shootout” – a 3 way duel between:</p>
<ul>
<li>jberger&rsquo;s <a href="http://jberger.github.io/ModuleBuildPresentation">talk</a> about Module::Build and and the &ldquo;Classic&rdquo; build systems</li>
<li>preaction&rsquo;s <a href="http://preaction.github.io/Introduction-to-Dist-Zilla">talk</a> about Dist::Zilla, and</li>
<li>my <a href="http://kablamo.org/slides-first-cpan-module">talk</a> about Minilla and Carton.</li>
</ul>
<p>It was a great overview of the most popular tools and I think all the talks
are worth checking out.</p>
<p>As usual, this talk is both a living document and reference material. I keep my
talks updated and relevant so I can refer people to them. If I’ve missed
anything feel free to contribute to the github repo or leave a comment.</p>
<p><a href="http://kablamo.org/slides-first-cpan-module">Slides</a> |
<a href="http://github.com/kablamo/slides-first-cpan-module">GitHub repo</a></p>
]]></content>
        </item>
        
        <item>
            <title>mstpan quick reference</title>
            <link>http://blog.kablamo.org/articles/mstpan/</link>
            <pubDate>Tue, 08 Sep 2015 00:00:00 +0000</pubDate>
            
            <guid>http://blog.kablamo.org/articles/mstpan/</guid>
            <description>Last Christmas, the inimitable Matt Trout (mst) created an opinionated tour of CPAN where he recommended modules for some common problems. I think its brilliant, useful, and entertaining and I&amp;rsquo;ve decided to compile a high level overview all on one page in order to create a quick reference.
I&amp;rsquo;ve tried to distill his wisdom and wit down to a few words. But I recommend clicking the section headers and following the links to Matt&amp;rsquo;s original posts to see his actual real opinions in their full complexity.</description>
            <content type="html"><![CDATA[<p>Last Christmas, the inimitable Matt Trout (mst) created an opinionated tour of
CPAN where he recommended modules for some common problems.  I think its
brilliant, useful, and entertaining and I&rsquo;ve decided to compile a high level
overview all on one page in order to create a quick reference.</p>
<p>I&rsquo;ve tried to distill his wisdom and wit down to a few words.  But I recommend
clicking the section headers and following the links to Matt&rsquo;s original posts
to see his actual real opinions in their full complexity.  This single page
can&rsquo;t replace 16 great posts and he usually includes advice on the best way
to use the module.  You won&rsquo;t want to miss that.</p>
<h1 id="table-of-contents">Table of Contents</h1>
<ul>
<li><a href="#webframeworks">Web Frameworks</a></li>
<li><a href="#webdeployment">Web Deployment</a></li>
<li><a href="#xml">XML</a></li>
<li><a href="#html">HTML</a></li>
<li><a href="#files">Files</a></li>
<li><a href="#databases">Databases</a></li>
<li><a href="#json">JSON</a></li>
<li><a href="#async">Async</a></li>
<li><a href="#librarydeployment">Library Deployment</a></li>
<li><a href="#perlvmdeployment">Perl VM Deployment</a></li>
<li><a href="#distributionbuilding">Distribution building</a></li>
<li><a href="#objectorientation">Object orientation</a></li>
<li><a href="#soap">SOAP</a></li>
<li><a href="#exporting">Exporting</a></li>
<li><a href="#email">Email</a></li>
<li><a href="#logging">Logging</a></li>
</ul>
<h2><a name="webframeworks" href="http://shadow.cat/blog/matt-s-trout/mstpan-1">Web Frameworks</a></h2>
<ul>
<li><strong>CGI.pm (the CPAN module)</strong> - Run away</li>
<li><strong>Catalyst</strong> - Venerable</li>
<li><strong>Dancer</strong> - Solid and lightweight</li>
<li><strong>Mojolicious</strong> - Shiny</li>
<li><strong>Web::Simple</strong> - Low level</li>
<li><strong>Plack</strong> - Awesome (but not a web framework)</li>
</ul>
<h2><a name="webdeployment" href="http://shadow.cat/blog/matt-s-trout/mstpan-2">Web Deployment</a></h2>
<ul>
<li><strong>mod_perl</strong> - Run away</li>
<li><strong>CGI (the protocol)</strong> - Ok for some trivial things</li>
<li><strong>FastCGI + unix sockets for zero downtime deploys</strong> - Yes</li>
<li><strong>Apache + FastCgiExternalServer</strong> - Good</li>
<li><strong>Nginx + Starman + Unix sockets</strong> - Good</li>
<li><strong>Mojolicious + Hypnotoad</strong> - Good</li>
<li><strong>PSGI Async</strong>
<ul>
<li><strong>Net::Async::HTTP::Server::PSGI</strong> if you like IO::Async</li>
<li><strong>Twiggy</strong> if you like AnyEvent</li>
</ul>
</li>
</ul>
<h2><a name="xml" href="http://shadow.cat/blog/matt-s-trout/mstpan-3">XML</a></h2>
<ul>
<li><strong>XML::Simple</strong> - No</li>
<li><strong>XML::Twig</strong> - Excellent whipuptitude</li>
<li><strong>XPath</strong> - Not a CPAN module but you should learn it</li>
<li><strong>XML::LibXML</strong> - Good</li>
<li><strong>Template::Semantic</strong> - Good</li>
<li><strong>XML::Toolkit</strong> - Good</li>
<li><strong>XML::Rabbit</strong> - Nice</li>
<li><strong>xmllint</strong> - Not a Perl module. But useful if you&rsquo;re XML file is made of &ldquo;old man wee and fail&rdquo;</li>
</ul>
<h2><a name="html" href="http://shadow.cat/blog/matt-s-trout/mstpan-4">HTML</a></h2>
<ul>
<li>Parsing HTML
<ul>
<li><strong>Regular expressions</strong> - Don&rsquo;t</li>
<li><strong>HTML::TreeBuilder</strong> - Venerable</li>
<li><strong>Mojo::DOM</strong> - Pleasant</li>
<li><strong>XML::LibXML</strong> or <strong>XML::Twig</strong> - Ok but why</li>
</ul>
</li>
<li>Generating HTML
<ul>
<li><strong>CGI.pm</strong> - Please don&rsquo;t</li>
<li><strong>Template Toolkit</strong> - Venerable</li>
<li><strong>Text::Xslate</strong> - Brilliant</li>
<li><strong>HTML::Mason</strong> - Yes but no because embedded Perl</li>
<li><strong>Mojo::Template</strong> - Yes but no because embedded Perl</li>
<li><strong>HTML::Zoom</strong> - mst wrote it, mst doesn&rsquo;t hate it</li>
</ul>
</li>
</ul>
<h2><a name="files" href="http://shadow.cat/blog/matt-s-trout/mstpan-5">Files</a></h2>
<ul>
<li><strong>Files::Spec</strong> - Core, standard</li>
<li><strong>Files::Spec::Functions</strong> - Use this instead of File::Spec</li>
<li><strong>File::stat</strong> - Yes</li>
<li><strong>autodie</strong> - Core, but &ldquo;a giant bag of crack balanced precariously atop .. an even bigger bag of tainted crack&rdquo;</li>
<li><strong>File::Open</strong> - Better than autodie</li>
<li><strong>File::Slurp</strong> - Avoid</li>
<li><strong>Path::Tiny</strong> - Excellent</li>
<li><strong>IO::All</strong> - Good if you want to be procedural and don&rsquo;t want OO</li>
</ul>
<h2><a name="databases" href="http://shadow.cat/blog/matt-s-trout/mstpan-6">Databases</a></h2>
<ul>
<li><strong>DBI</strong> - 99% of the time, just use these 2 methods and nothing else</li>
</ul>
<pre><code>
    $dbh->do($sql, {}, @args);
    my @array_of_hashrefs = @{$dbh->selectall_arrayref($self, { Slice => {} }, @args)};
</code></pre>
<ul>
<li><strong>DBIx::Connector</strong> - You want it</li>
<li><strong>Mojo::PG</strong> - Yes</li>
<li><strong>DBIx::Class</strong> - Yes</li>
<li><strong>DBIx::Class::Candy</strong> - Shiny</li>
<li><strong>DBIx::Class::DeploymentHandler</strong> - Yes</li>
<li><strong>DBIx::Class::Fixtures</strong> - Useful for testing</li>
<li><strong>DBIx::Class::PassphraseColum</strong> - Yes please</li>
</ul>
<h2><a name="json" href="http://shadow.cat/blog/matt-s-trout/mstpan-7">JSON</a></h2>
<ul>
<li><strong>JSON</strong> - Yes but there are alternatives</li>
<li><strong>JSON::PP</strong> - Pure perl, core, fatpacks</li>
<li><strong>JSON::XS</strong> - Fast</li>
<li><strong>Cpanel::JSON::XS</strong> - Faster</li>
<li><strong>JSON::MaybeXS</strong> - Recommended</li>
<li><strong>JSON::Diffable</strong> - Useful</li>
<li><strong>Mojo::JSON</strong> - Really nice</li>
</ul>
<h2><a name="async" href="http://shadow.cat/blog/matt-s-trout/mstpan-8">Async</a></h2>
<ul>
<li>Don&rsquo;t</li>
<li><strong>threads.pm</strong> - Don&rsquo;t.  Its slow.</li>
<li><strong>POE</strong> - Good but weird UI.</li>
<li><strong>MooseX::POE</strong> - Better</li>
<li><strong>Reflex</strong> - Interesting</li>
<li><strong>AnyEvent</strong> - Ok, but maintainer is difficult</li>
<li><strong>IO::Async</strong> - Nice</li>
<li><strong>Mojo::IOLoop</strong> - Nice</li>
<li><strong>Promises</strong> - Neat but mst likes Future</li>
<li><strong>curry</strong> - Useful</li>
</ul>
<h2><a name="librarydeployment" href="http://shadow.cat/blog/matt-s-trout/mstpan-9">Library deployment</a></h2>
<ul>
<li><strong>cpan as root</strong> - No</li>
<li><strong>Vendor Packages</strong> - Ok</li>
<li><strong>CPANPLUS</strong> - Out of favor</li>
<li><strong>CPAN</strong> - Standard</li>
<li><strong>cpanminus</strong> - Use this</li>
<li><strong>FindBin</strong> - Good for git deploys, bad for dist deploys</li>
<li><strong>local::lib</strong> - Yes</li>
<li><strong>Carton</strong> - Yes</li>
<li><strong>App::FatPacker</strong> - Yes</li>
<li><strong>CPAN::Mini</strong> - Maximum underkill</li>
<li><strong>Pinto</strong> - Maximum overkill</li>
</ul>
<h2><a name="perlvmdeployment" href="http://shadow.cat/blog/matt-s-trout/mstpan-10">Perl VM deployment</a></h2>
<ul>
<li><strong>System perl</strong> - Ok with local::lib</li>
<li><strong>Manual compilation</strong> - Yes</li>
<li><strong>perlbrew</strong> - Yes usually all the shims are more annoying than necessary</li>
<li><strong>Perl::Build</strong> - Nice</li>
<li><strong>plenv</strong> - Nice</li>
<li><strong>Windows</strong> - Active State or Strawberry Perl</li>
</ul>
<h2><a name="distributionbuilding" href="http://shadow.cat/blog/matt-s-trout/mstpan-11">Distribution building</a></h2>
<ul>
<li><strong>ExtUtils::MakeMaker</strong> - Hated by everyone except people who like Makefiles.</li>
<li><strong>Module::Build</strong> - No</li>
<li><strong>Module::Install</strong> - &ldquo;a giant tower of crack&rdquo;</li>
<li><strong>Module::Build::Tiny</strong> - Nice.  See also App::ModuleBuildTiny.</li>
<li><strong>Dist::Zilla</strong> - Power.  Maximum overkill.</li>
<li><strong>Dist::Milla</strong> - Sensible</li>
<li><strong>Minilla</strong> - Great.  Maximum underkill.</li>
</ul>
<h2><a name="objectorientation" href="http://shadow.cat/blog/matt-s-trout/mstpan-12">Object orientation</a></h2>
<ul>
<li><strong>Moose</strong> - Awesome</li>
<li><strong>Moo</strong> - Shiny</li>
<li><strong>Mouse</strong> - Niche</li>
<li><strong>Type::Tiny</strong> - Yes</li>
<li><strong>Moops</strong> - Good</li>
<li><strong>Throwable</strong> - Sensible</li>
<li><strong>Safe::Isa</strong> - Might be useful</li>
</ul>
<h2><a name="soap" href="http://shadow.cat/blog/matt-s-trout/mstpan-13">SOAP</a></h2>
<ul>
<li><strong>SOAP::WSDL</strong> - Avoid</li>
<li><strong>XML::Compile::SOAP</strong> - Insane and brilliant</li>
<li><strong>Catalyst::Controller::SOAP</strong> - Least worst option</li>
<li><strong>SOAP::Lite</strong> - Ancient and insane</li>
</ul>
<h2><a name="exporting" href="http://shadow.cat/blog/matt-s-trout/mstpan-14">Exporting</a></h2>
<ul>
<li><strong>Exporter</strong> - Sufficient</li>
<li><strong>Sub::Exporter</strong> - Worth a look</li>
<li><strong>Sub::Exporter::Progressive</strong> - Light</li>
<li><strong>Moose::Exporter</strong> - Yes</li>
<li><strong>Exporter::Tiny</strong> - Recommended</li>
<li><strong>Exporter::Declare</strong> - Maximum overkill</li>
<li><strong>namespace::(auto)clean</strong> - Useful</li>
<li><strong>Import::Into</strong> - or Import::Base</li>
</ul>
<h2><a name="email" href="http://shadow.cat/blog/matt-s-trout/mstpan-15">Email</a></h2>
<ul>
<li><strong>Net::SMTP</strong> - Too low level</li>
<li><strong>Email::Send</strong> - Usable</li>
<li><strong>Email::Sender</strong> - Recommended</li>
<li><strong>Email::Stuffer</strong> - mst favorite</li>
<li><strong>Emailesque</strong> - mst favorite with sugar on top</li>
<li><strong>Email::Mime</strong> - Standard</li>
<li><strong>Email::Mime::Kit</strong> - Best answer for templating</li>
<li><strong>Mail::Box</strong> - Brilliant and insane</li>
<li><strong>Courriel</strong> - Elegant</li>
</ul>
<h2><a name="logging" href="http://shadow.cat/blog/matt-s-trout/mstpan-16">Logging</a></h2>
<ul>
<li><strong>warn()</strong> - Perfectly fine</li>
<li><strong>Log::Dispatch</strong> - Nice</li>
<li><strong>Log::Log4Pperl</strong> - Maximum overkill</li>
<li><strong>Log::Any</strong> - Good</li>
<li><strong>Log::Contextual</strong> - Nice</li>
<li><strong>Message::Passing</strong> - Worth a look. Not quite logging.</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>HTTP::Request::AsCurl</title>
            <link>http://blog.kablamo.org/articles/http-request-ascurl/</link>
            <pubDate>Tue, 27 May 2014 00:00:00 +0000</pubDate>
            
            <guid>http://blog.kablamo.org/articles/http-request-ascurl/</guid>
            <description>Today, on a whim, I released a module called HTTP::Request::AsCurl to CPAN. It converts an HTTP::Request object to a curl command.
use HTTP::Request::Common; use HTTP::Request::AsCurl; my $request = POST(&#39;api.earth.defense/weapon1&#39;, { target =&amp;gt; &#39;mothership&#39;, when =&amp;gt; &#39;now&#39; }); say join &amp;quot;\n&amp;quot;, $request-&amp;gt;as_curl; # curl --dump-header - -XPOST &amp;quot;api.earth.defense/weapon1&amp;quot; \ # --data &#39;target=mothership&#39; \ # --data &#39;when=now&#39;  It works by injecting the as_curl() method into the HTTP::Request namespace. This must be a bad idea and probably not a great bit of code to rely on in a production environment.</description>
            <content type="html"><![CDATA[<p>Today, on a whim, I released a module called
<a href="https://metacpan.org/pod/HTTP::Request::AsCurl">HTTP::Request::AsCurl</a> to
CPAN.  It converts an HTTP::Request object to a curl command.</p>
<pre><code>use HTTP::Request::Common;
use HTTP::Request::AsCurl;

my $request = POST('api.earth.defense/weapon1', { 
    target =&gt; 'mothership', 
    when   =&gt; 'now' 
});

say join &quot;\n&quot;, $request-&gt;as_curl;
# curl --dump-header - -XPOST &quot;api.earth.defense/weapon1&quot; \
# --data 'target=mothership' \
# --data 'when=now'
</code></pre>
<p>It works by injecting the <code>as_curl()</code> method into the HTTP::Request namespace.
This must be a bad idea and probably not a great bit of code to rely on in a
production environment.  But it is pretty convenient syntax for debugging a
REST API and I couldn&rsquo;t resist.  Thoughts, suggestions, criticism?</p>
<h1 id="---update-2014-06-01---">&ndash; UPDATE (2014-06-01) &ndash;</h1>
<p>I released a new version which has a totally different user interface.  Here is
the new synopsis:</p>
<pre><code>use HTTP::Request::Common;
use HTTP::Request::AsCurl qw/as_curl/;

my $request = POST('api.earth.defense/weapon1', { 
    target =&gt; 'mothership', 
    when   =&gt; 'now' 
});

system as_curl($request);

print as_curl($request, pretty =&gt; 1, newline =&gt; &quot;\n&quot;, shell =&gt; 'bourne');
# curl \
# --request POST api.earth.defense/weapon1 \
# --dump-header - \
# --data target=mothership \
# --data when=now
</code></pre>
<p>There are 2 major changes.</p>
<ol>
<li>I&rsquo;m no longer doing namespace injection.  I really liked the syntax, but it
was problematic and unnecessary.</li>
<li>The old version returned a formatted array of strings which was
not very useful.  The problem with a formatted string (as was helpfully
pointed out to me) is you have worry about stuff like newlines which
depends on the system you are targeting and shell escaping which depends on
the shell you are targeting.  This is a can of worms.  Hopefully this new
interface is an improvement.</li>
</ol>
]]></content>
        </item>
        
        <item>
            <title>Reading code - Camel-Snake-Kebab</title>
            <link>http://blog.kablamo.org/articles/perl-camel-snake-kebab/</link>
            <pubDate>Mon, 26 May 2014 00:00:00 +0000</pubDate>
            
            <guid>http://blog.kablamo.org/articles/perl-camel-snake-kebab/</guid>
            <description>Camel-Snake-Kebab is a Clojure library for word case conversions. I have wanted to see this on CPAN for a while so last week I finally ported it to Perl. I even ported the test suite. Here is a synopsis of my String::CamelSnakeKebab Perl module:
use String::CamelSnakeKebab qw/:all/; lower_camel_case(&#39;flux-capacitor&#39;) # Returns &#39;fluxCapacitor&#39; upper_camel_case(&#39;flux-capacitor&#39;) # Returns &#39;FluxCapacitor&#39; lower_snake_case &#39;ASnakeSlithersSlyly&#39; # Returns &#39;a_snake_slithers_slyly&#39; upper_snake_case(&#39;ASnakeSlithersSlyly&#39;) # Returns &#39;A_Snake_Slithers_Slyly&#39; constant_case(&amp;quot;I am constant&amp;quot;) # Returns &amp;quot;I_AM_CONSTANT&amp;quot; kebab_case(&#39;Peppers_Meat_Pineapple&#39;) # Returns &#39;peppers-meat-pineapple&#39; http_header_case(&amp;quot;x-ssl-cipher&amp;quot;) # Returns &amp;quot;X-SSL-Cipher&amp;quot;  Clojure This was my first contact with Clojure and I found the code I was reading to be bite sized, concise, elegant code.</description>
            <content type="html"><![CDATA[<p><a href="https://github.com/qerub/camel-snake-kebab">Camel-Snake-Kebab</a> is a Clojure
library for word case conversions.  I have wanted to see this on CPAN for a
while so last week I finally ported it to Perl.  I even ported the test suite.
Here is a synopsis of my
<a href="https://metacpan.org/pod/String::CamelSnakeKebab">String::CamelSnakeKebab</a> Perl module:</p>
<pre><code>use String::CamelSnakeKebab qw/:all/;

lower_camel_case('flux-capacitor')
       # Returns 'fluxCapacitor'

upper_camel_case('flux-capacitor')
       # Returns 'FluxCapacitor'

lower_snake_case 'ASnakeSlithersSlyly'    
       # Returns 'a_snake_slithers_slyly'

upper_snake_case('ASnakeSlithersSlyly')
       # Returns 'A_Snake_Slithers_Slyly'

constant_case(&quot;I am constant&quot;)
    # Returns &quot;I_AM_CONSTANT&quot;

kebab_case('Peppers_Meat_Pineapple')
 # Returns 'peppers-meat-pineapple'

http_header_case(&quot;x-ssl-cipher&quot;)
       # Returns &quot;X-SSL-Cipher&quot;
</code></pre>
<h1 id="clojure">Clojure</h1>
<p>This was my first contact with Clojure and I found the code I was reading to be
bite sized, concise, elegant code.  It reads a bit like math equations to
me.  Or sort of vaguely BNF-like as you will see.  I suspect I would have had a
hard time choosing a better library as my introduction to the language.</p>
<h1 id="functional-programming">Functional programming</h1>
<p>Clojure is a functional language &ndash; as contrasted with more common imperative
languages.  I will admit I didn&rsquo;t really know what that means.  But hey I
looked it up so I can now present to you 3 central concepts of functional
programming.  (Btw Perl is usually imperative but it can be written
functionally as well.  Although its a little easier and more natural in
Clojure).</p>
<h2 id="1-first-class-and-higher-order-functions">1. First class and higher order functions</h2>
<p>These are functions which accept other functions as arguments.  So functional
programmers enjoy passing around code refs.  Thats not radical for Perl
developers.  Perl has always had excellent support for that.</p>
<p>This flavor of code is often shorter, more general, and less repetitive.
But its harder to read and requires me to use my brains causes me some
discomfort.</p>
<h3 id="example">Example</h3>
<p>The most important function in Camel-Snake-Kebab is <code>convert-case</code>.  It is
called by every case conversion function in the library.  It splits a string
into words, applies a case rule to the first word and then a second possibly
different case rule to the remaining words.  Then all the words are joined back
together using the given separator.  Here it is written in Clojure:</p>
<pre><code>(defn convert-case [first-fn rest-fn sep s]
&quot;Converts the case of a string according to the rule for the first
word, remaining words, and the separator.&quot;
(let [[first &amp; rest] (split s word-separator-pattern)]
    (join sep (cons (first-fn first) (map rest-fn rest)))))
</code></pre>
<p>Using this I could implement lower snake case like this:</p>
<pre><code>(defn lower-snake-case [s]
    (convert-case lower-case lower-case &quot;_&quot; s))
</code></pre>
<p>Here is the translation in Perl I came up with:</p>
<pre><code>sub convert_case {
    my ($first_coderef, $rest_coderef, $separator, $string) = @_; 

    my ($first, @rest) = split $WORD_SEPARATOR_PATTERN, $string;

    my @words = $first_coderef-&gt;($first);
    push @words, $rest_coderef-&gt;($_) for @rest;

    return join $separator, @words;
}

sub my_lc { lc $_ }

sub lower_snake_case {
    convert_case( \&amp;my_lc, \&amp;my_lc, &quot;_&quot;, shift );
}
</code></pre>
<p>The cool thing about this is the different case methods (lower_camel_case,
kebab_case, etc) are not actually implemented this way.  They are dynamically
created when the module loads using a set of conversion rules that looks like
this:</p>
<pre><code>our %CONVERSION_RULES = (
    'lower_camel_case' =&gt; [ \&amp;lc,               \&amp;ucfirst,          &quot;&quot;  ],
    'upper_camel_case' =&gt; [ \&amp;ucfirst,          \&amp;ucfirst,          &quot;&quot;  ],
    'lower_snake_case' =&gt; [ \&amp;lc,               \&amp;lc,               &quot;_&quot; ],
    'upper_snake_case' =&gt; [ \&amp;ucfirst,          \&amp;ucfirst,          &quot;_&quot; ],
    'constant_case'    =&gt; [ \&amp;uc,               \&amp;uc,               &quot;_&quot; ],
    'kebab_case'       =&gt; [ \&amp;lc,               \&amp;lc,               &quot;-&quot; ],
    'http_header_case' =&gt; [ \&amp;http_header_caps, \&amp;http_header_caps, &quot;-&quot; ],
);
</code></pre>
<h2 id="2-purely-functional-functions">2. Purely functional functions</h2>
<p>These are functions with no state and no side effects.  In functional
programming I can&rsquo;t do assignments because that alters state (and that is a
side effect).  Which sounds rediculous.  How can I program without doing
assignments?  I&rsquo;m not sure, but the advantage of no side effects is
performance.  I can run functions in parallel without affecting each other.
Also the function&rsquo;s output will depend entirely on the input which makes purely
functional functions great for <a href="https://metacpan.org/pod/Memoize">memoization</a>.</p>
<h3 id="example-1">Example</h3>
<p>This concept was also evident in the code I ported.  Functions did not modify
state.  There were very few if any assignments.  And the output of functions
depended entirely on the input.</p>
<p>I did try memoizing String::CamelSnakeKebab but it did not make it faster.  I&rsquo;m
not sure why.  Perhaps case conversion is just not computationally intensive
enough to make a difference?  So unfortunately I have no example for you.  Any
help in the comments would be awesome.</p>
<h2 id="3-no-for-loops">3. No <code>for</code> loops</h2>
<p><code>for</code> loops require state and assignments.  To implement loops in functional
programming I&rsquo;m supposed to use recursion.  I didn&rsquo;t see any examples of this
in this library and my brain is grateful to the author for sparing me the
exertion.</p>
<h1 id="the-end">The End</h1>
<p>Thats the end of my story today.  If you are interested, compare the
<a href="https://github.com/kablamo/perl-string-camelsnakekebab/blob/master/lib/String/CamelSnakeKebab.pm">Perl source code</a>
with the
<a href="https://github.com/qerub/camel-snake-kebab/blob/stable/src/camel_snake_kebab.clj">Clojure source code</a>.
Each version is about 70 lines of code.</p>
]]></content>
        </item>
        
        <item>
            <title>Test::Pretty - because TAP is unnattractive</title>
            <link>http://blog.kablamo.org/articles/test-pretty/</link>
            <pubDate>Thu, 08 May 2014 00:00:00 +0000</pubDate>
            
            <guid>http://blog.kablamo.org/articles/test-pretty/</guid>
            <description>Test::Pretty (artfully written by the inimitable @tokuhirom) makes my tests look like this:
This is especially nice when I have subtests.
How it works I can enable Test::Pretty like this
prove -MTest::Pretty -vlr t  But typing extra characters is not fun. Happily @tokuhirom also created a prove plugin (which is included with the Test::Pretty module) which allows me to do this:
prove -Pretty -vlr t  Shorter but still too much typing so I created a ~/.</description>
            <content type="html"><![CDATA[<p><a href="https://metacpan.org/pod/Test::Pretty">Test::Pretty</a> (artfully written by
the inimitable <a href="http://tokuhirom.github.io/">@tokuhirom</a>) makes my tests look like this:</p>
<p><img src="/images/for-posts/2014-05-08-test-pretty.png" alt="x"></p>
<p>This is especially nice when I have subtests.</p>
<p><img src="/images/for-posts/2014-05-08-test-pretty-subtest2.png" alt="x">
<img src="/images/for-posts/2014-05-08-test-pretty-subtest.png" alt="x"></p>
<h1 id="how-it-works">How it works</h1>
<p>I can enable Test::Pretty like this</p>
<pre><code>prove -MTest::Pretty -vlr t
</code></pre>
<p>But typing extra characters is not fun.  Happily
@tokuhirom also created a prove
<a href="https://metacpan.org/pod/App::Prove::Plugin::retty">plugin</a> (which is included
with the Test::Pretty module) which allows me to do this:</p>
<pre><code>prove -Pretty -vlr t
</code></pre>
<p>Shorter but still too much typing so I created a <code>~/.proverc</code> file which contains
the following lines:</p>
<pre><code>--lib
--verbose
--comments
--recurse
-Pretty
</code></pre>
<p>Now I can get pretty verbose recursive (etc) tests and I only need to type this</p>
<pre><code>prove t
</code></pre>
<p>You can view my <code>~/.proverc</code> and more goodies in my <a href="https://github.com/kablamo/dotfiles">dotfiles repo</a>).</p>
]]></content>
        </item>
        
        <item>
            <title>Why reading code is good for me</title>
            <link>http://blog.kablamo.org/articles/reading-code/</link>
            <pubDate>Wed, 23 Apr 2014 00:00:00 +0000</pubDate>
            
            <guid>http://blog.kablamo.org/articles/reading-code/</guid>
            <description>So I can start kicking butt faster - When I start a new job or a new contract. Or when I hack on a new feature. Or every day of my life as a programmer that involves legacy code. Yeah pretty much all the time. So I can learn new tricks - Healthy languages evolve. Idioms and slang are tools for more efficiently expressing ideas. I want to be on top of that.</description>
            <content type="html"><![CDATA[<ul>
<li><strong>So I can start kicking butt faster</strong> - When I start a new job or a new
contract. Or when I hack on a new feature.  Or every day of my life as a
programmer that involves legacy code.  Yeah pretty much all the time.</li>
<li><strong>So I can learn new tricks</strong> - Healthy languages evolve.  Idioms and slang
are tools for more efficiently expressing ideas.  I want to be on top of
that.  Also its best way to peak inside the mind of a talented developer and
steal and copy their skills.</li>
<li><strong>So I can work better with others</strong> - I understand their idioms because I have
seen them before.  And I can probably articulate why their idioms are awesome
or feeble.</li>
</ul>
<p>I must remember that attitude matters.  If I think of reading code as a painful
chore it will be.  But if I look for opportunity I find it.</p>
]]></content>
        </item>
        
        <item>
            <title>An experiment - Write code every day</title>
            <link>http://blog.kablamo.org/articles/write-code-every-day/</link>
            <pubDate>Sun, 20 Apr 2014 00:00:00 +0000</pubDate>
            
            <guid>http://blog.kablamo.org/articles/write-code-every-day/</guid>
            <description>If you missed John Resig&amp;rsquo;s recent post about writing code everyday I highly recommend it.
He is a busy guy with a full time job (at Khan Academy), a few open source side projects (the author of jQuery), a wife, and a few hobbies. How to sustainably get stuff done on his open source side projects without his wife leaving him? He decided to start writing (non work) code for 30 minutes every day.</description>
            <content type="html"><![CDATA[<p>If you missed John Resig&rsquo;s recent post about <a href="http://ejohn.org/blog/write-code-every-day/">writing code everyday</a> I highly recommend it.</p>
<p>He is a busy guy with a full time job (at Khan Academy), a few open source side
projects (the author of jQuery), a wife, and a few hobbies.  How to sustainably
get stuff done on his open source side projects without his wife leaving him?
He decided to start writing (non work) code for 30 minutes every day.  This by
itself is not a revolutionary idea.  What blew my mind out of my nose and on to
the table are the benefits he encountered:</p>
<ul>
<li><strong>Minimum viable code</strong> - No time for more than that.</li>
<li><strong>Small but continuous progress</strong> - No anxiety about not getting stuff done.</li>
<li><strong>Free time on the weekends</strong> - Instead of working all
weekend to catch up from doing nothing during the week.</li>
<li><strong>Lowered cost of context switching</strong> - Compared to resuming work on a side project just on the weekends.</li>
<li><strong>Brain solves side project issues in the background</strong></li>
</ul>
<p>Wow, I need to do this too.  So this is
<a href="http://blog.kablamo.org/2014/03/24/experiments/">another</a>
<a href="http://blog.kablamo.org/2014/01/01/no-dessert-forever/">experiment</a> and here
are the rules.</p>
<ol>
<li>I will write code for a minimum of 30 minutes each day.</li>
<li>I must push working code every day.</li>
<li>I will write for a minimum of 10 minutes each day.</li>
<li>I must publish a blog post at least once a week.</li>
</ol>
]]></content>
        </item>
        
        <item>
            <title>Codecube.io now supports Perl</title>
            <link>http://blog.kablamo.org/articles/codecube/</link>
            <pubDate>Sat, 19 Apr 2014 00:00:00 +0000</pubDate>
            
            <guid>http://blog.kablamo.org/articles/codecube/</guid>
            <description>Codecube.io is a jsfiddle type service which runs Perl code (and other languages) and shows the results in your browser.
The website is written in Go and runs your code inside a Docker container. It originally had support for C, Go, Python, and Ruby. I was looking for an excuse to play with Docker and Go so I submitted a pull request which added support for Perl.
See also:
 The original Codecube blog post which is a good introduction to Docker.</description>
            <content type="html"><![CDATA[<p><a href="http://codecube.io">Codecube.io</a> is a jsfiddle type service which runs Perl
code (and other languages) and shows the results in your browser.</p>
<p>The website is written in Go and runs your code inside a Docker container.  It
originally had support for C, Go, Python, and Ruby.  I was looking for an
excuse to play with Docker and Go so I submitted a pull request which added
support for Perl.</p>
<p>See also:</p>
<ul>
<li>The original Codecube <a href="http://hmarr.com/2013/oct/16/codecube-runnable-gists/">blog post</a> which is a good introduction to Docker.</li>
<li>The <a href="https://github.com/hmarr/codecube">Codecube github repo</a>.</li>
<li>My previous post on <a href="http://golang.org/">Go</a>.</li>
<li>My previous post on <a href="http://www.docker.io/">Docker</a>.</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Reading code - Plack::Builder</title>
            <link>http://blog.kablamo.org/articles/read-plack-4/</link>
            <pubDate>Sat, 12 Apr 2014 00:00:00 +0000</pubDate>
            
            <guid>http://blog.kablamo.org/articles/read-plack-4/</guid>
            <description>Part 1 - An Overview Part 2 - plackup Architecture Part 3 - PSGI Application Architecture Part 4 - Plack::Builder  Plack::Builder provides a domain specific language (DSL) for middleware developers. It looks like this:
use Plack::Builder; my $app1 = sub { ... }; my $app2 = sub { ... }; builder { enable &amp;quot;Deflater&amp;quot;; enable &amp;quot;Session&amp;quot;, store =&amp;gt; &amp;quot;File&amp;quot;; enable &amp;quot;Debug&amp;quot;, panels =&amp;gt; [ qw(DBITrace Memory Timer) ]; mount &amp;quot;/narwhale&amp;quot; =&amp;gt; $app1; mount &amp;quot;/unicorn&amp;quot; =&amp;gt; $app2; };  How does it work?</description>
            <content type="html"><![CDATA[<ul>
<li><a href="/2014/04/08/read-plack-1">Part 1 - An Overview</a></li>
<li><a href="/2014/04/09/read-plack-2">Part 2 - plackup Architecture</a></li>
<li><a href="/2014/04/11/read-plack-3">Part 3 - PSGI Application Architecture</a></li>
<li><a href="/2014/04/12/read-plack-4"><strong>Part 4 - Plack::Builder</strong></a></li>
</ul>
<p>Plack::Builder provides a domain specific language (DSL) for middleware
developers.  It looks like this:</p>
<pre><code>use Plack::Builder;

my $app1 = sub { ... };
my $app2 = sub { ... };

builder {
    enable &quot;Deflater&quot;;
    enable &quot;Session&quot;, store =&gt; &quot;File&quot;;
    enable &quot;Debug&quot;, panels =&gt; [ qw(DBITrace Memory Timer) ];

    mount &quot;/narwhale&quot; =&gt; $app1;
    mount &quot;/unicorn&quot;  =&gt; $app2;
};
</code></pre>
<p>How does it work?  With three artful tricks.</p>
<h1 id="artful-trick-1">Artful trick #1</h1>
<p>The first artful trick is the <code>builder</code> block.</p>
<pre><code>sub builder(&amp;) {
    my $block = shift;
    ...
}
</code></pre>
<p>The <code>&amp;</code> is a function prototype.  Perl offers some limited compile time checking
for parameters passed to subs.  Here is what <code>perldoc perlsub</code> says about <code>&amp;</code>:</p>
<blockquote>
<p>An &ldquo;&amp;&rdquo; requires an anonymous subroutine, which, if passed as the first
argument, does not require the &ldquo;sub&rdquo; keyword or a subsequent comma.</p>
</blockquote>
<p>So if I try to pass <code>builder()</code> a scalar or an array or anything thats not an
anonymous subroutine, I will get a compile time error.  But if I pass it an
anonymous subroutine, the compiler will allow things to continue.</p>
<h1 id="artful-trick-2">Artful trick #2</h1>
<p>The next artful trick is that Plack::Builder implements the DSL keywords as
subs and then exports those subs.</p>
<pre><code>package Plack::Builder;
use strict;
use parent qw( Exporter );
our @EXPORT = qw( builder enable enable_if mount );
...
sub enable    {...}
sub enable_if {...}
sub mount     {...}
# etc
</code></pre>
<p>Actually thats 90% of the whole thing isn&rsquo;t it?  Now its starting to look
obvious.  But lets continue.</p>
<h1 id="artful-trick-3">Artful trick #3</h1>
<p>There is one more interesting idea here.  Notice that if I use <code>enable</code>,
<code>enable_if</code>, or <code>mount</code> outside of a <code>builder</code> block I will get an
error.  This works because the DSL keywords are subs which run code references.
By default those code references refer to code which croaks an error.  But when
<code>builder</code> runs, those references are temporarily replaced with real working
code.</p>
<p>Here&rsquo;s some simplified code to illustrate how it works.</p>
<pre><code>our $_enable = sub { Carp::croak(...) }; # &lt;&lt; default code reference

sub enable { $_enable-&gt;(@_) }

sub builder(&amp;) {
    my $block = shift;
    ...
    local $_enable = sub {...}; # &lt;&lt; temporarily assign real working code
    ...
    my $app = $block-&gt;();
    ...
}
</code></pre>
]]></content>
        </item>
        
        <item>
            <title>Reading code - PSGI Application Architecture</title>
            <link>http://blog.kablamo.org/articles/read-plack-3/</link>
            <pubDate>Fri, 11 Apr 2014 00:00:00 +0000</pubDate>
            
            <guid>http://blog.kablamo.org/articles/read-plack-3/</guid>
            <description>Part 1 - An Overview Part 2 - plackup Architecture Part 3 - PSGI Application Architecture Part 4 - Plack::Builder  PSGI Applications The PSGI spec defines a PSGI application.
 A PSGI application is a Perl code reference. It takes exactly one argument, the environment, and returns an array reference containing exactly three values.
 The three values are a status, headers, and a body. Here is an example:</description>
            <content type="html"><![CDATA[<ul>
<li><a href="/2014/04/08/read-plack-1">Part 1 - An Overview</a></li>
<li><a href="/2014/04/09/read-plack-2">Part 2 - plackup Architecture</a></li>
<li><a href="/2014/04/11/read-plack-3"><strong>Part 3 - PSGI Application Architecture</strong></a></li>
<li><a href="/2014/04/12/read-plack-4">Part 4 - Plack::Builder</a></li>
</ul>
<h1 id="psgi-applications">PSGI Applications</h1>
<p>The <a href="https://metacpan.org/pod/distribution/PSGI/PSGI.pod">PSGI spec</a> defines
a PSGI application.</p>
<blockquote>
<p>A PSGI application is a Perl code reference. It takes exactly one argument,
the environment, and returns an array reference containing exactly three
values.</p>
</blockquote>
<p>The three values are a status, headers, and a body.  Here is an example:</p>
<pre><code>my $app = sub {
    my $env = shift;
    return [
        '200',
        [ 'Content-Type' =&gt; 'text/plain' ],
        [ &quot;Hello World&quot; ], # or IO::Handle-like object
    ];
};
</code></pre>
<h1 id="the-psgi-environment-hash">The PSGI environment hash</h1>
<p>The PSGI environment hash is a hashref with many keys.  But mostly it is the
data (headers, body, etc) from an HTTP::Request which has been parsed and put into
a hash for convenient access.</p>
<h1 id="middleware">Middleware</h1>
<p>A middleware component takes a PSGI application and runs it, passing in the
PSGI environment hash.  But before it runs the app, it gets to modify the
environment if it wants to.  And after running the app, it can modify the
response if it wants to.</p>
<h1 id="plackmiddleware">Plack::Middleware</h1>
<p>Middleware is a wrapper around a PSGI app.  More than one middleware can be
wrapped around an app, creating a series of layers like an
<a href="http://blogs.perl.org/users/jakob/2012/09/28/middleware-onion.png/500px-MiddlewareOnion.svg.png">onion</a>.
What makes the middleware onion a somewhat unusual construct is the event
driven / callback nature of it.  Lets look at how its implemented.</p>
<p>All middleware inherits from Plack::Middleware which is an itsy bitsy (teeny
weeny) module.  The middleware onion is created with just 2 short subroutines
(notice the <code>call()</code> and <code>prepare_app()</code> subs are written by middleware authors):</p>
<pre><code>sub wrap {
    my($self, $app, @args) = @_;
    if (ref $self) {
        $self-&gt;{app} = $app;
    } else {
        $self = $self-&gt;new({ app =&gt; $app, @args });
    }
    return $self-&gt;to_app;
}

sub to_app {
    my $self = shift;
    $self-&gt;prepare_app;
    return sub { $self-&gt;call(@_) };
}
</code></pre>
<p>How do these subs work together?  The middleware onion is sometimes constructed as follows:</p>
<pre><code>my $app = MyWebApp-&gt;new-&gt;to_app;
$app = Plack::Middleware::A-&gt;wrap($app);
$app = Plack::Middleware::B-&gt;wrap($app);
$app = Plack::Middleware::C-&gt;wrap($app);
</code></pre>
<p>But it might be more clear to write it this way</p>
<pre><code>my $app0 = MyWebApp-&gt;new-&gt;to_app;           # $app0-&gt;($env) runs the web app
$app1 = Plack::Middleware::A-&gt;wrap($app0);  # $app1-&gt;($env) calls P::M::A-&gt;call() which calls $app0-&gt;($env)
$app2 = Plack::Middleware::B-&gt;wrap($app1);  # $app2-&gt;($env) calls P::M::B-&gt;call() which calls $app1-&gt;($env)
$app3 = Plack::Middleware::C-&gt;wrap($app2);  # $app3-&gt;($env) calls P::M::C-&gt;call() which calls $app2-&gt;($env)
                                            # When the server receives a request it calls $app3-&gt;($env)
</code></pre>
<p>So when an event occurs &ndash; for example the PSGI server sees a new request &ndash; it
passes the event to the app.  The app is a chain of callbacks which run each
other.  This is clearly an example of event driven programming.</p>
<h1 id="plackcomponent-and-plackapp">Plack::Component and Plack::App</h1>
<p>Plack::Middleware inherits from Plack::Component.  So the most common use of
Plack::Component is in middleware.</p>
<p>Plack::Component can also be used as a tool for creating PSGI applications.  It
has a light dusting of code, but mostly its an interface which is implemented
by modules in the Plack::App namespace.  For example Plack::App::File is a web
app which serves static files from a root directory, and Plack::App::URLMap is
a web app which maps multiple web apps to multiple urls.</p>
<p>But notice that I am not required to use Plack::Component to create a PSGI
application. A PSGI application is just a code reference.  The PSGI spec does
not say that a PSGI application is a reference to code that inherits from
Plack::Component.</p>
<p>The nice thing about using Plack::Component to build my app is that it
provides a common interface for all PSGI apps.  Whenever I see <code>$app</code>, I
can rely on that behavior.  This is clearly important for middleware.  And it
feels good from a design point of view.</p>
<p>But its not required and it adds some complexity.</p>
]]></content>
        </item>
        
        <item>
            <title>Reading code - plackup Architecture</title>
            <link>http://blog.kablamo.org/articles/read-plack-2/</link>
            <pubDate>Wed, 09 Apr 2014 00:00:00 +0000</pubDate>
            
            <guid>http://blog.kablamo.org/articles/read-plack-2/</guid>
            <description>Part 1 - An Overview Part 2 - plackup Architecture Part 3 - PSGI Application Architecture Part 4 - Plack::Builder  Plack::Runner and plackup plackup starts a PSGI server which executes a PSGI application. However the script itself is just a very small wrapper around Plack::Runner which does all the heavy lifting. Plack::Runner
 parses the command line options. instantiates the chosen loader class (which is in the Plack::Loader namespace).</description>
            <content type="html"><![CDATA[<ul>
<li><a href="/2014/04/08/read-plack-1">Part 1 - An Overview</a></li>
<li><a href="/2014/04/09/read-plack-2"><strong>Part 2 - plackup Architecture</strong></a></li>
<li><a href="/2014/04/11/read-plack-3">Part 3 - PSGI Application Architecture</a></li>
<li><a href="/2014/04/12/read-plack-4">Part 4 - Plack::Builder</a></li>
</ul>
<h1 id="plackrunner-and-plackup">Plack::Runner and plackup</h1>
<p><code>plackup</code> starts a PSGI server which executes a PSGI application.  However
the script itself is just a very small wrapper around Plack::Runner which does
all the heavy lifting.  Plack::Runner</p>
<ol>
<li>parses the command line options.</li>
<li>instantiates the chosen loader class (which is in the Plack::Loader namespace).</li>
<li>instatiates the chosen server library (which is in the Plack::Handler namespace).</li>
<li>starts the PSGI server and passes it a PSGI application</li>
</ol>
<h1 id="plackloader">Plack::Loader</h1>
<p>Loaders are responsible for instantiating and running the PSGI server.  Here are
the more interesting capabilities a <code>$loader</code> object has:</p>
<ul>
<li><code>$loader-&gt;guess()</code> guesses which server library should be loaded by looking at command line opts, $ENV, and %INC.</li>
<li><code>$loader-&gt;load()</code> instantiates the server library and returns the object.</li>
<li><code>$loader-&gt;run()</code> starts the server.</li>
</ul>
<p>The Plack::Loader namespace contains 3 kinds of loaders:</p>
<ul>
<li>Plack::Loader::Delayed - delays compilation of the web app until the first request occurs</li>
<li>Plack::Loader::Restarter - reloads the server if any files are changed</li>
<li>Plack::Loader::Shotgun - foreach request, forks a child which compiles the web app and runs it</li>
</ul>
<p>I can choose which loader I want using <code>plack --loader</code></p>
<h1 id="plackhandler">Plack::Handler</h1>
<p>The <a href="https://metacpan.org/pod/distribution/PSGI/PSGI.pod">PSGI spec</a>
tells me that PSGI defines the interface between an application and a server.
Because the PSGI spec is (intentionally) very minimal, there is a good deal of
wiggle room to interpret how an application and a server might want to play
together.</p>
<p>A library in the Plack::Handler namespace is the place where the application
meets the server.  This layer contains all the wiggling.</p>
<p>Lets say I wrote a new server called AngryBrontosaurus and I want to be able to
use it with <code>plackup --server AngryBrontosaurus</code>.  I could implement a small
class like this:</p>
<pre><code>package Plack::Handler::AngryBrontosaurus
use strict;
use AngryBrontosaurus;

sub new {
    my $class = shift;
    bless { @_ }, $class;
}

sub run {
    my ($self, $app) = @_; 
    AngryBrontosaurus-&gt;new-&gt;run($app, $self);
}
</code></pre>
<p>Then, to make sure AngryBrontosaurus and Plack::Handler::AngryBrontosaurus
correctly implement the PSGI spec, I should also test my code with
Plack::Test::Suite.</p>
<pre><code>use Test::More;
use Plack::Test::Suite;
Plack::Test::Suite-&gt;run_server_tests('AngryBrontosaurus');
done_testing;
</code></pre>
<p>Notice that while the Plack::Handler namespace contains classes for several
PSGI servers like Plack::Handler::Starman or Plack::Handler::Twiggy, it also
includes some classes like Plack::Handler::Apache2 and Plack::Handler::FCGI.
Clearly Apache2 was not written with PSGI compliance in mind, but there is glue
in the Plack::Handler::Apache2 layer to enable it to speak with PSGI compliant
applications.</p>
<h1 id="sequence-diagram">Sequence diagram</h1>
<p>This diagram describes how Plack::Runner, Plack::Handler, and Plack::Loader
interact.</p>
<p><img src="/images/for-posts/2014-04-01-plack.png" alt="x"></p>
]]></content>
        </item>
        
        <item>
            <title>Reading code - Plack</title>
            <link>http://blog.kablamo.org/articles/read-plack-1/</link>
            <pubDate>Tue, 08 Apr 2014 00:00:00 +0000</pubDate>
            
            <guid>http://blog.kablamo.org/articles/read-plack-1/</guid>
            <description>I write lots of code. But I want to be better and faster at reading code. When I had the privilege of working with @ranguard I discovered he is a code reading cheetah and I always envied that. So I&amp;rsquo;ve decided to practice by reading the source code of various CPAN modules. I&amp;rsquo;m starting with Plack.
 Part 1 - An Overview Part 2 - plackup Architecture Part 3 - PSGI Application Architecture Part 4 - Plack::Builder  Plack Plack describes itself as a set of tools for using PSGI (the Perl Server Gateway Interface).</description>
            <content type="html"><![CDATA[<p>I write lots of code.  But I want to be better and faster at reading code.
When I had the privilege of working with @ranguard I discovered he is a code
reading <em>cheetah</em> and I always envied that.  So I&rsquo;ve decided to practice
by reading the source code of various CPAN modules.  I&rsquo;m starting with Plack.</p>
<ul>
<li><a href="/2014/04/08/read-plack-1"><strong>Part 1 - An Overview</strong></a></li>
<li><a href="/2014/04/09/read-plack-2">Part 2 - plackup Architecture</a></li>
<li><a href="/2014/04/11/read-plack-3">Part 3 - PSGI Application Architecture</a></li>
<li><a href="/2014/04/12/read-plack-4">Part 4 - Plack::Builder</a></li>
</ul>
<h1 id="plack">Plack</h1>
<p>Plack describes itself as a set of tools for using
<a href="https://metacpan.org/pod/PSGI">PSGI</a> (the Perl Server Gateway Interface).</p>
<p>The earliest release of Plack on CPAN is version 0.9000 from 2009-10-13.  There
were releases several times a week for the first <strong>two years</strong>.  Impressively, in
2012 releases were still happening roughly once a week.  In 2013 things seem to
have cooled and now releases happen about once a month.</p>
<p>The code itself is written tersely and with attention to detail.  There are
almost no comments.  In fact 43 out of 71 files have fewer than 3 comments.
Of course the code is very well written which makes comments less necessary and
nowadays there is quite a bit of excellent POD as well.</p>
<p>The code also makes heavy use of callbacks (code references).  That is to say
its heavily event driven. Which makes sense given the event driven nature of web
servers.  For me this gave the code a JavaScript flavor.  Take for example
<code>Plack::Util::foreach</code> which works just like
<a href="http://api.jquery.com/jQuery.each/">jQuery.each()</a> by iterating over an array
calling a code reference on each item.</p>
<pre><code>Plack::Util::foreach([1,2,3], sub { print shift }); # prints &quot;123&quot;
</code></pre>
<h2 id="background-reading">Background reading</h2>
<p>The most important thing to read is the <a href="https://metacpan.org/pod/distribution/PSGI/PSGI.pod">PSGI spec</a>.
This is the problem Plack was built to solve.  Its clear and well
written but perhaps also a little boring and lacking in context. Still I found
it very helpful to refer back to while reading the code.</p>
<h2 id="getting-started">Getting started</h2>
<pre><code>~/code ⚡ git clone git@github.com:plack/Plack.git
~/code ⚡ cd Plack
</code></pre>
<p>The first thing I noticed is a <code>cpanfile</code> containing a list of the project
dependencies.  Because understanding and running the tests is often useful
when reading new code I installed the dependencies using
<a href="https://metacpan.org/pod/Carton">Carton</a> and ran the tests.</p>
<pre><code>~/code/Plack ⚡ carton
~/code/Plack ⚡ prove -rl t
</code></pre>
<h2 id="who-works-on-plack">Who works on Plack?</h2>
<p>Lets get a feel for who is involved in the project.</p>
<pre><code>~/code/Plack ⚡ git shortlog --summary --numbered | head
1567  Tatsuhiko Miyagawa
    70  Kazuho Oku
    68  Tokuhiro Matsuno
    20  Daisuke Murase
    20  Jesse Luehrs
    19  yappo
    16  Karen Etheridge
    16  Mark Stosberg
    12  hiratara
    11  Stevan Little
</code></pre>
<h2 id="how-big-is-it">How big is it?</h2>
<pre><code>~/code/Plack ⚡ tree lib | tail -1
17 directories, 70 files

~/code/Plack ⚡ cloc . 2&gt;/dev/null | tail -13
-------------------------------------------------------------------------------
Language                     files          blank        comment           code
-------------------------------------------------------------------------------
Perl                            82           2889           3341           5309
Bourne Shell                     8             55            138            251
YAML                             1              0              0             19
HTML                             3              2              0             14
Python                           1              2              1              6
Javascript                       1              0              0              1
CSS                              1              0              0              1
-------------------------------------------------------------------------------
SUM:                            97           2948           3480           5601
-------------------------------------------------------------------------------
</code></pre>
<h2 id="what-is-the-lib-directory-structure-like">What is the lib directory structure like?</h2>
<p>Unfortunately with 71 files in the lib directory its hard to grok whats
happening in a single glance so maybe thats not a great question.  Instead I
found it helpful to group the code by functionality.  I came up
with 3 major categories which look like this:</p>
<ul>
<li><em>Category 1</em> - Modules for loading and running PSGI servers
<ul>
<li>plackup</li>
<li>Plack::Handler</li>
<li>Plack::Handler::*</li>
<li>Plack::Loader</li>
<li>Plack::Loader::*</li>
<li>Plack::Runner</li>
</ul>
</li>
<li><em>Category 2</em> - Modules for building PSGI apps
<ul>
<li>Plack::App::*</li>
<li>Plack::Builder</li>
<li>Plack::Component</li>
<li>Plack::Middleware</li>
<li>Plack::Middleware::*</li>
</ul>
</li>
<li><em>Category 3</em> - Modules for testing
<ul>
<li>Plack::Test</li>
<li>Plack::Test::*</li>
<li>Plack::HTTP::Message::PSGI</li>
<li>Plack::LWPish</li>
</ul>
</li>
</ul>
<p>However I also got crazy and went ahead and listed <em>everything</em> in the lib
directory along with a brief description.  I guess it might be handy for
reference purposes.  The numbers (1), (2), (3) below correspond to the three
categories I listed above.</p>
<pre><code>~/code/Plack ⚡ tree lib
lib
├── HTTP
│   ├── Message
│   │   └── PSGI.pm               # (3) Converts an HTTP::Request to a PSGI env hash
│   └── Server                    
│       └── PSGI.pm               # (1) Reference PSGI web server; no deps; not usually for prod
├── Plack                         
│   ├── App                       # (2) These libs inherit from Plack::Component; they are PSGI web apps
│   │   ├── Cascade.pm               # Foreach request, tries a number of PSGI apps until one is successful
│   │   ├── CGIBin.pm                # Creates many PSGI apps for a directory with many CGI scripts (uses WrapCGI.pm)
│   │   ├── Directory.pm             # Serves a directory of files
│   │   ├── File.pm                  # Serves a file
│   │   ├── PSGIBin.pm               # Create PSGI apps from a directory of .psgi files
│   │   ├── URLMap.pm                # Maps a url to a PSGI app
│   │   └── WrapCGI.pm               # Creates a single PSGI app from a single CGI script
│   ├── Builder.pm                # (2) A DSL for building Plack Middleware
│   ├── Component.pm              # (2) A (optional) tool for building PSGI web apps
│   ├── Handler
│   │   ├── Apache1.pm
│   │   ├── Apache2
│   │   │   └── Registry.pm
│   │   ├── Apache2.pm
│   │   ├── CGI.pm
│   │   ├── FCGI.pm
│   │   ├── HTTP
│   │   │   └── Server
│   │   │       └── PSGI.pm                 # A Plack::Handler for HTTP::Server::PSGI
│   │   └── Standalone.pm            # Alias for Plack::Handler::HTTP::Server::PSGI
│   ├── Handler.pm                # (1) Instantiate and run PSGI compatible servers
│   ├── HTTPParser
│   │   └── PP.pm                    # Parse HTTP headers with XS
│   ├── HTTPParser.pm             # (1) Parse HTTP headers; used by HTTP::Server::PSGI
│   ├── Loader
│   │   ├── Delayed.pm               # Delay compilation of the PSGI app until the first request
│   │   ├── Restarter.pm             # Restart the server when a watched file changes
│   │   └── Shotgun.pm               # Recompile the PSGI app for every request
│   ├── Loader.pm                 # (1) Load PSGI compatible web servers
│   ├── LWPish.pm                 # (3) Light version of LWP for testing
│   ├── Middleware                
│   │   ├── AccessLog
│   │   │   └── Timed.pm                # Write access logs but can handle a fake File::IO body
│   │   ├── AccessLog.pm             # Write access logs
│   │   ├── Auth
│   │   │   └── Basic.pm                # Basic authentication
│   │   ├── BufferedStreaming.pm     # Enable streaming for servers that don't
│   │   ├── Chunked.pm               # Implements part of HTTP/1.1 - chunked HTTP transfer encoding
│   │   ├── ConditionalGET.pm        # Implements part of HTTP/1.1 - Conditional GET
│   │   ├── Conditional.pm           # Runs the specified middleware if a specified condition is met
│   │   ├── ContentLength.pm         # Adds a Content-Length header if possible
│   │   ├── ContentMD5.pm            # Sets the Content-MD5 header when the body is an arrayref
│   │   ├── ErrorDocument.pm         # Show different error documents for different HTTP errors
│   │   ├── Head.pm                  # Delete any response body from HEAD requests
│   │   ├── HTTPExceptions.pm        # Redirect to an error page when HTTP::Exceptions are caught
│   │   ├── IIS6ScriptNameFix.pm     # Fix for IIS
│   │   ├── IIS7KeepAliveFix.pm      # Fix for IIS
│   │   ├── JSONP.pm                 # Change JSON responses to JSONP if a callback param is specified
│   │   ├── LighttpdScriptNameFix.pm # Fix for Lighttpd
│   │   ├── Lint.pm                  # Checks input/output for compliance w/PSGI spec
│   │   ├── Log4perl.pm              # Log with Log::Log4Perl
│   │   ├── LogDispatch.pm           # Log with Log::Dispatch
│   │   ├── NullLogger.pm            # Don't log anything
│   │   ├── RearrangeHeaders.pm      # Fix for very old MSIE and broken HTTP proxy servers
│   │   ├── Recursive.pm             # Allows the app to forward the request to a different (url) path
│   │   ├── Refresh.pm               # Similar to Plack::Loader::Restarter but less effective
│   │   ├── Runtime.pm               # Sets the 'X-Runtime' HTTP response header = app's response time
│   │   ├── SimpleContentFilter.pm   # Filter response content
│   │   ├── SimpleLogger.pm          # Logs messages
│   │   ├── StackTrace.pm            # Displays a stacktrace when a PSGI app dies
│   │   ├── Static.pm                # Serve static files
│   │   ├── XFramework.pm            # Adds an X-Framework HTTP response header
│   │   └── XSendfile.pm             # Adds an X-Sendfile HTTP response header
│   ├── Middleware.pm             # (2) Wraps PSGI apps; can modify incoming requests / outgoing responses
│   ├── MIME.pm                   # A list of MIME types (mostly)
│   ├── Request
│   │   └── Upload.pm                # A subclass of Plack::Request for file uploads
│   ├── Request.pm                # (2) Low level request obj for middleware and web apps
│   ├── Response.pm               # (2) Low level response obj for middleware and web apps
│   ├── Runner.pm                 # (1) The guts of plackup -- uses Plack::Loader and Plack::Handler
│   ├── TempBuffer.pm             # For backward compat. Saves data in memory or to a file if its big;
│   ├── Test
│   │   ├── MockHTTP.pm              # Test a PSGI app without using a server (faster)
│   │   ├── Server.pm                # Test a PSGI app using a very small server (fast)
│   │   └── Suite.pm                 # Ensure the web server complies with the PSGI spec
│   ├── Test.pm                   # (3) A factory for generating test objects
│   ├── Util
│   │   └── Accessor.pm              # Light version of Class::Accessor for backward compat
│   └── Util.pm                   # Misc but important utilities used throughout the code base
└── Plack.pm                   # No code here -- just pod and a version number
</code></pre>
]]></content>
        </item>
        
        <item>
            <title>Look around assertions in Perl regular expressions</title>
            <link>http://blog.kablamo.org/articles/regex/</link>
            <pubDate>Mon, 31 Mar 2014 00:00:00 +0000</pubDate>
            
            <guid>http://blog.kablamo.org/articles/regex/</guid>
            <description>When Perl&amp;rsquo;s regex engine evaluates a string, it moves from left to right, one letter at a time checking the match at each position. That position is called the current match position.
Look around assertions allow you to match a specific pattern before or after the current match position without moving the match position.
Look ahead assertions Look ahead assertions match the text after the current match position (without moving the match position).</description>
            <content type="html"><![CDATA[<p>When Perl&rsquo;s regex engine evaluates a string, it moves from left to right, one
letter at a time checking the match at each position.  That position is called
the <em>current match position</em>.</p>
<p>Look around assertions allow you to match a specific pattern before or after
the current match position without moving the match position.</p>
<h1 id="look-ahead-assertions">Look ahead assertions</h1>
<p>Look ahead assertions match the text after the current match position
(without moving the match position).  They look like <code>(?=pattern)</code>.</p>
<pre><code>my $job = &quot;space cowboy&quot;;
$job =~ /space (?=cow)/;    # matches
$job =~ /space (?=cow)cow/; # also matches
</code></pre>
<h1 id="look-behind-assertions">Look behind assertions</h1>
<p>Look behind assertions match the text before the current match position
(without moving the match position).  They look like <code>(?&lt;=pattern)</code>.</p>
<pre><code>my $job = &quot;space cowboy&quot;;
$job =~ /(?&lt;=space) cowboy/;      # matches
$job =~ /space(?&lt;=space) cowboy/; # also matches
</code></pre>
<h1 id="positive-and-negative-look-ahead-assertions">Positive and negative look ahead assertions</h1>
<p><em>Positive</em> look ahead assertions are look ahead assertions which match when their
subpattern matches. They look like <code>(?=pattern)</code>.</p>
<pre><code>my $job = &quot;space cowboy&quot;;
$job =~ /space (?=cowboy)/;   # matches
</code></pre>
<p><em>Negative</em> look ahead assertions are look ahead assertions which match when their
subpattern fails. They look like <code>(?!pattern)</code>.</p>
<pre><code>my $job = &quot;space cowboy&quot;;
$job =~ /space (?!mooseboy)/;   # matches
</code></pre>
<h1 id="positive-and-negative-look-behind-assertions">Positive and negative look behind assertions</h1>
<p>Positive look behind assertions are look behind assertions which match when their
subpattern matches. They look like <code>(?&lt;=pattern)</code>.</p>
<pre><code>my $job = &quot;space cowboy&quot;;
$job =~ /(?&lt;=space) cowboy/;   # matches
</code></pre>
<p>Negative look behind assertions are look behind assertions which match when
their subpattern fails. They look like <code>(?&lt;!pattern)</code>.</p>
<pre><code>my $job = &quot;space cowboy&quot;;
$job =~ /(?&lt;!earth) cowboy/;   # matches
</code></pre>
<p>For more details see <code>perldoc perlre</code>.  I also recommend the DuckDuckGo
<a href="https://duckduckgo.com/?q=regex+cheat+sheet">regex cheat sheet</a>.</p>
]]></content>
        </item>
        
        <item>
            <title>Vim cheat sheet</title>
            <link>http://blog.kablamo.org/articles/ddg-vim/</link>
            <pubDate>Fri, 28 Mar 2014 00:00:00 +0000</pubDate>
            
            <guid>http://blog.kablamo.org/articles/ddg-vim/</guid>
            <description>I created a Vim cheat sheet instant answer for DuckDuckDuckGo. If you search for vim cheat sheet or vim help you will get a result like this:
The data is from rtorruellas&amp;rsquo;s excellent vim cheat sheet (also available on github) which has a responsive mobile friendly layout and is also available in Japanese.</description>
            <content type="html"><![CDATA[<p>I created a Vim cheat sheet instant answer for DuckDuckDuckGo.  If you search
for <a href="https://duckduckgo.com/?q=vim+cheat+sheet">vim cheat sheet</a> or
<a href="https://duckduckgo.com/?q=vim+help">vim help</a> you will get a result like this:</p>
<p><img src="/images/for-posts/2014-03-28-ddg-vim.png" alt="x"></p>
<p>The data is from rtorruellas&rsquo;s excellent <a href="http://rtorruellas.com/vim-cheat-sheet/">vim cheat sheet</a>
(also available on <a href="https://github.com/rtorr/vim-cheat-sheet">github</a>) which has a responsive
mobile friendly layout and is also available in Japanese.</p>
]]></content>
        </item>
        
        <item>
            <title>An experiment - Living with less than 200 things</title>
            <link>http://blog.kablamo.org/articles/experiments/</link>
            <pubDate>Mon, 24 Mar 2014 00:00:00 +0000</pubDate>
            
            <guid>http://blog.kablamo.org/articles/experiments/</guid>
            <description>Stuff is expensive to buy. Especially when I end up only using things once or twice like books, dvds, dress shoes, and ties. Stuff is expensive to store. One time I had to rent a storage locker because I couldn&amp;rsquo;t take my things when I moved to China. Some people get big houses with walk in closets and a three car garage. Stuff is expensive to maintain. Broken stuff needs to be fixed.</description>
            <content type="html"><![CDATA[<ul>
<li><strong>Stuff is expensive to buy.</strong>  Especially when I end up only using things
once or twice like books, dvds, dress shoes, and ties.</li>
<li><strong>Stuff is expensive to store.</strong>  One time I had to rent a storage locker
because I couldn&rsquo;t take my things when I moved to China.  Some people get
big houses with walk in closets and a three car garage.</li>
<li><strong>Stuff is expensive to maintain.</strong>  Broken stuff needs to be fixed.  Owning
a house means I need to fix the roof. Owning a car means I need to change
the tires.</li>
<li><strong>Stuff is time consuming to maintain.</strong>  I have to dust my stuff.
A bigger house means more sweeping.
A bigger yard means more mowing. Owning a car means cleaning it and
changing the oil and scraping ice off the windows.<br>
I need to go to the store to find replacement parts,
batteries, light bulbs, cleaning supplies, and duct tape.</li>
<li><strong>Stuff is stressful to own.</strong>  I might
lose it or dent it or scratch it or drop it or step on it.  Or it might
catch on fire.  Or someone might steal it.  Sometimes I get so stressed I buy
insurance for my stuff.</li>
<li><strong>Stuff reduces my freedom.</strong>  Its hard to move to new place because I have
to carry all my stuff with me.</li>
</ul>
<p>Therefore I have decided to live with less stuff.  So I hereby declare war on
my stuff.  And also on my things.  Here is my 4 point plan to free myself from
the tedious tyranny of too many things:</p>
<ul>
<li><strong>Point 1:</strong> Keep a comprehensive inventory of all my stuff.</li>
<li><strong>Point 2:</strong> Ruthlessly reduce the number of things in my inventory to less than 200.</li>
<li><strong>Point 3:</strong> No new stuff unless I throw out some old stuff first.</li>
<li><strong>Point 4:</strong> Have a beer.</li>
</ul>
<p>If I were hard core I would throw out everything I didn&rsquo;t use in the last 6
months.  Maybe I&rsquo;ll be hard core at some point in the future.</p>
]]></content>
        </item>
        
        <item>
            <title>Introduction to online credit card processing - part 3</title>
            <link>http://blog.kablamo.org/articles/cc-processors-3/</link>
            <pubDate>Sat, 22 Mar 2014 00:00:00 +0000</pubDate>
            
            <guid>http://blog.kablamo.org/articles/cc-processors-3/</guid>
            <description>I am learning about online credit card processing. Part 1 introduced a number of basic definitions. Part 2 discussed the difference between traditional gateways and the newer full stack gateways.
In Part 3, I am exploring some of the new &amp;ldquo;full stack&amp;rdquo; gateways which are a bit more developer friendly and listing some key facts about each one. All of these provide a merchant account, gateway, payment processor etc and handle all that complexity for you.</description>
            <content type="html"><![CDATA[<p>I am learning about online credit card processing.
<a href="/2014/03/18/cc-processors/">Part 1</a> introduced a number of basic definitions.
<a href="/2014/03/21/cc-processors/">Part 2</a> discussed the difference between traditional gateways and the newer full stack gateways.</p>
<p>In Part 3, I am exploring some of the new &ldquo;full stack&rdquo; gateways which are a bit
more developer friendly and listing some key facts about each one.  All of
these provide a merchant account, gateway, payment processor etc and handle all
that complexity for you.</p>
<ul>
<li><a href="https://www.braintreepayments.com/">Braintree</a>
<ul>
<li>Tools for recurring billing</li>
<li>Tools to build a marketplace</li>
<li>Free for the first $50,000 in transactions</li>
<li>2.9% + $0.30 per transaction</li>
<li>$15 fee for each chargeback</li>
<li>Client side encryption of cc numbers with Braintree.js</li>
</ul>
</li>
<li><a href="https://stripe.com/">Stripe</a>
<ul>
<li>Tools for recurring billing</li>
<li>2.9% + $0.30 per transaction</li>
<li>$15 fee for each chargeback</li>
<li>Client side encryption of cc numbers with Stripe.js</li>
</ul>
</li>
<li><a href="https://www.balancedpayments.com/">Balanced</a>
<ul>
<li>Tools for recurring billing</li>
<li>Tools to build a marketplace</li>
<li>2.9% + $0.30 per transaction for credit/debit, volume discounts</li>
<li>Payouts to the business are $.25 each</li>
<li>No fees for chargebacks?</li>
<li>Client side encryption of cc numbers with Balanced.js</li>
</ul>
</li>
<li><a href="https://www.wepay.com/">WePay</a>
<ul>
<li>Tools for recurring billing</li>
<li>Tools to build a marketplace</li>
<li>2.9% + $0.30 per transaction for credit/debit, volume discounts</li>
<li>No client side encryption of cc numbers?</li>
</ul>
</li>
<li><a href="https://www.dwolla.com">Dwolla</a>
<ul>
<li>Tools for recurring billing</li>
<li>Tools to build a marketplace</li>
<li>Transactions under $10 are free, everything else is $0.25 per transaction</li>
<li>Does not accept credit or debit cards only ACH (so no gateway/merchant account are required)</li>
<li>Requires customers to create a Dwolla account</li>
<li>No client side encryption of cc numbers?</li>
</ul>
</li>
<li><a href="https://payments.amazon.com/home">Amazon FPS Payments</a>
<ul>
<li>Tools for recurring billing</li>
<li>Tools to build a marketplace</li>
<li>2.9% + $0.30 per transaction for credit/debit, volume discounts</li>
<li>2.9% + $0.30 per transaction, volume discounts</li>
<li>Can keep the customer on your site and customize the form for free</li>
<li>To contest a chargeback costs $10.</li>
<li>Merchants are not liable for chargebacks for physical goods (not services)</li>
<li>No client side encryption of cc numbers?</li>
</ul>
</li>
<li><a href="https://www.paypal.com/">Paypal</a>
<ul>
<li>Turn your computer into a credit card terminal</li>
<li>Swipe cards with a device that plugs into your phone or iPad.</li>
<li>2.9% + $0.30 per transaction, volume discounts</li>
<li>No monthly fee to send a customer to the Paypal site for payment</li>
<li>$30 monthly fee if you want to keep the customer on your site or customize the
form</li>
<li>No client side encryption of cc numbers?</li>
</ul>
</li>
<li><a href="http://square.com">Square</a> is in a similar space and positions themselves as being very simple.
<ul>
<li>Swipe cards with a device that plugs into your phone or iPad.</li>
<li>No developer api &ndash; you must use their web marketplace to sell online</li>
<li>2.75% per transaction</li>
</ul>
</li>
</ul>
<p>Please let me know if I&rsquo;ve made any errors and I will correct them.</p>
]]></content>
        </item>
        
        <item>
            <title>Introduction to online credit card processing - part 2</title>
            <link>http://blog.kablamo.org/articles/cc-processors-2/</link>
            <pubDate>Fri, 21 Mar 2014 00:00:00 +0000</pubDate>
            
            <guid>http://blog.kablamo.org/articles/cc-processors-2/</guid>
            <description>I am learning about online credit card processing. Part 1 introduced a number of basic definitions.
The number of online payments is going to grow. Only 6% of credit card transactions are currently done online. With so much at stake, there are hundreds of payment gateways who provide a variety of services. But I have chosen to divide them into two categories.
First there are traditional gateways who charge a monthly fee (in addition to a variety of other fees) and often you need to obtain a merchant account on your own which also has various fees associated with it.</description>
            <content type="html"><![CDATA[<p>I am learning about online credit card processing.
<a href="/2014/03/18/cc-processors/">Part 1</a> introduced a number of basic definitions.</p>
<p>The number of online payments is going to grow.  Only <a href="http://www.huffingtonpost.com/2012/06/07/credit-card-payments-growth_n_1575417.html">6% of credit card transactions are currently done online</a>.
With so much at stake, there are hundreds of payment gateways who provide a
variety of services. But I have chosen to divide them into two categories.</p>
<p>First there are <em>traditional gateways</em> who charge a monthly fee (in addition to
a variety of other fees) and often you need to obtain a merchant account on
your own which also has various fees associated with it.</p>
<p>The second category contains newer <em>full stack gateways</em> who are more user
friendly and provide a merchant account and a much simpler fee structure which
is generally a percentage charge on a per transaction basis with no monthly
fees.</p>
<p>These &ldquo;full stack&rdquo; gateways are convenient and easy but they can cost more.
They generally charge 2.9% + $0.30 per transaction.  Compare that to a
more traditional gateway such as <a href="http://www.authorize.net/">Authorize.net</a> who
charges $20 per month and $0.10 per transaction.  However you also have to
factor in the cost of a merchant account.  And both the gateway and merchant&rsquo;s
bank often charge a variety of fees which makes it difficult to assess the true
cost.</p>
<p>If you are doing a large number of transactions, saving small amounts of money
is going to make a big difference.  If you are not then it may be cheaper to
use a full stack processor and save yourself the dev work and accounting
effort.</p>
<p>One interesting company I would like to note is
<a href="https://spreedly.com">Spreedly</a>.  Spreedly provides an api layer on top many
other payment gateways so you can swap out gateways whenever you feel like it.
Their service works with a large number of payment gateways &ndash; currently 60
gateways in 73 countries.  They also give you the ability to deposit funds in
different merchant accounts based on location or other business logic.  They do
have a monthly fee structure and clearly you would only choose this solution if
you are processing a large number of transactions.</p>
<h1 id="additional-reading-and-resources">Additional reading and resources</h1>
<ul>
<li><a href="http://www.nerdwallet.com/blog/credit-card-data/credit-card-transaction-volume-statistics/">Credit card and debit card transaction volume statistics</a></li>
<li><a href="http://blog.zactownsend.com/credit-card-processing-as-a-commodity-business">Credit card processing as a commodity business</a> by Zac Townsend</li>
<li><a href="http://gatewayindex.spreedly.com/">Compare gateways</a></li>
<li><a href="http://www.cardpaymentoptions.com/credit-card-processors">Credit card processor reviews</a></li>
<li><a href="http://www.jeffmould.com/2014/02/16/comparing-stripe-vs-braintree-vs-balanced-vs-dwolla/">Stripe vs Braintree vs Balanced vs Dwolla</a></li>
</ul>
<p>Also I found this series of videos was an excellent introduction to
understanding payments at a lower level.  Be aware this is probably more than
most web developers need/want to know.</p>
<ol>
<li><a href="http://www.youtube.com/watch?v=fkUFizLjQo0">Names and nomenclature</a></li>
<li><a href="http://www.youtube.com/watch?v=WvSEDRkyg0Q">Mechanics of an electronic payment</a></li>
<li><a href="http://www.youtube.com/watch?v=tq316S9vW0s">Understanding interchange, Opening Visa &amp; Mastercards&rsquo; kimono</a></li>
<li><a href="http://www.youtube.com/watch?v=Ru4Dy-5IJEQ">Multicurrency in electronic payments</a></li>
</ol>
]]></content>
        </item>
        
        <item>
            <title>What does &#39;use strict&#39; do?</title>
            <link>http://blog.kablamo.org/articles/use-strict/</link>
            <pubDate>Wed, 19 Mar 2014 00:00:00 +0000</pubDate>
            
            <guid>http://blog.kablamo.org/articles/use-strict/</guid>
            <description>I always use strict in all my code. But what does that actually mean?
Enables strict refs Strict refs generates runtime errors when you use symbolic references.
use strict &#39;refs&#39;; $ref = &amp;quot;yarrr matey&amp;quot;; print $$ref; # runtime error but without strict refs this is ok  Enables strict vars Strict vars generates a compile time error if you access a variable that was not declared or is not fully qualified.</description>
            <content type="html"><![CDATA[<p>I always <code>use strict</code> in all my code.  But what does that actually mean?</p>
<h1 id="enables-strict-refs">Enables strict refs</h1>
<p>Strict refs generates runtime errors when you use symbolic references.</p>
<pre><code>use strict 'refs';
$ref = &quot;yarrr matey&quot;;
print $$ref;        # runtime error but without strict refs this is ok
</code></pre>
<h1 id="enables-strict-vars">Enables strict vars</h1>
<p>Strict vars generates a compile time error if you access a variable that was
not declared or is not fully qualified.</p>
<pre><code>use strict 'vars';
$X::foo = 1;         # ok because its fully qualified
my $foo = 10;        # ok because my() was used.
$baz = 9;            # compile time error because $baz not declared before
</code></pre>
<h1 id="enables-strict-subs">Enables strict subs</h1>
<p>Strict subs generates a compile time error if you use a bareword identifier
that&rsquo;s not a subroutine.</p>
<pre><code>no strict 'subs';
my $a = boop;
print $a; 
sub boop { return &quot;dinosaurs smell good&quot; }
</code></pre>
<p>The above prints &ldquo;boop&rdquo; instead of &ldquo;dinosaurs smell good&rdquo;.</p>
<pre><code>use strict 'subs';
my $b = splarf;      # &lt;--- compile time error here
sub splarf { return &quot;dinosaurs smell good&quot; }
</code></pre>
<p>The above generates a compile time error on line 2.</p>
<pre><code>use strict 'subs';
my $b = splarf(); 
sub splarf { return &quot;dinosaurs smell good&quot; }
</code></pre>
<p>The above prints &ldquo;dinosaurs smell good&rdquo; which is probably the desired output.</p>
<p>Sources:</p>
<ul>
<li><a href="https://metacpan.org/pod/strict">https://metacpan.org/pod/strict</a></li>
<li><a href="http://www.perl.com/pub/2001/01/begperl6.html#use">http://www.perl.com/pub/2001/01/begperl6.html#use</a> strict</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Introduction to online credit card processing - part 1</title>
            <link>http://blog.kablamo.org/articles/cc-processors-1/</link>
            <pubDate>Tue, 18 Mar 2014 00:00:00 +0000</pubDate>
            
            <guid>http://blog.kablamo.org/articles/cc-processors-1/</guid>
            <description>I want to understand credit card processing. So I will probably write a few articles about it. This article has some fundamental definitions.
acquiring bank An acquiring bank is a bank which processes card payments on behalf of a merchant. The term &amp;lsquo;acquirer&amp;rsquo; indicates the bank accepts (or acquires) credit card payments from card issuing banks within a credit card association. Acquirers take all the risk and bear the burdern of most of the regulation.</description>
            <content type="html"><![CDATA[<p>I want to understand credit card processing.  So I will probably write a few
articles about it.  This article has some fundamental definitions.</p>
<h2 id="acquiring-bank">acquiring bank</h2>
<p>An <a href="https://en.wikipedia.org/wiki/Acquiring_bank">acquiring bank</a> is a bank
which processes card payments on behalf of a merchant.  The term &lsquo;acquirer&rsquo;
indicates the bank accepts (or acquires) credit card payments from card
issuing banks within a credit card association.  Acquirers take all the risk
and bear the burdern of most of the regulation.  Examples of acquirers are
Bank of America, FirstData, and Chase.</p>
<h2 id="credit-card-association">credit card association</h2>
<p>Examples of credit card associations include Visa, MasterCard, Discover,
American Express, etc.</p>
<h2 id="issuing-bank">issuing bank</h2>
<p>An <a href="https://en.wikipedia.org/wiki/Issuing_bank">issuing bank</a> is a bank which
provides credit cards to consumers.  The term &lsquo;issue&rsquo; indicates the bank issues
payments to the acquiring bank on behalf of the consumer.  The top issuers in
the US are American Express and Chase.</p>
<h2 id="payment-processor">payment processor</h2>
<p>A <a href="http://storecoach.com/blog/whats-difference-between-payment-processor-gateway/">payment processor</a>
is a company which peforms the actual funds transfer.  Its the technical
underpinning of a transaction.  Processors do authorization, funds transfer,
statements, calculate the interchange fee, and handle dispute management.
Processors take no risk on a transaction.  Examples of companies who are
processors are FirstData, Chase, and RBS WorldPay.</p>
<h2 id="gateway">gateway</h2>
<p>A <a href="https://en.wikipedia.org/wiki/Payment_gateway">payment gateway</a> is a service
which ties all the various groups together and provides a nice simple interface for
the merchant to build a shopping cart or marketplace without needing to
understand all the gory details.  The gateway authorizes credit card payments
by facillitating the transfer of information between a merchant&rsquo;s bank (the
acquiring bank) and a customer&rsquo;s bank (the issuing bank).</p>
<h2 id="merchant-account">merchant account</h2>
<p>A <a href="https://en.wikipedia.org/wiki/Merchant_account">merchant account</a> is a type
of bank account provided by an acquiring bank which allows merchants to accept
payments via credit card.</p>
<h2 id="interchange-fee">interchange fee</h2>
<p>The <a href="https://en.wikipedia.org/wiki/Interchange_fee">interchange fee</a> is
the fee paid to the issuing bank by the acquiring bank.  The amount varies by
card type, card brand, transaction amount, and other factors and is set by the
card associations like Visa, Mastercard, or Discover.</p>
<h2 id="discount-rate">discount rate</h2>
<p>The <a href="http://merchantwarehouse.com/understanding-merchant-account-discount-rates">discount rate</a>
is made up of several different fees which are charged to the merchant.  This
usually includes the interchange fee.  The discount rate is a fixed
percentage-based fee charged for each transaction.  A portion of the fee is
passed to the acquiring bank who likely passes a portion to the issuing bank
who in turn passes a portion to the credit card association.</p>
<p>Rates are influenced by many things including the level of risk. Brick and
mortar stores where a card is physically present are considered the lowest
risk.  There are three categories of transaction types based on risk and each
have a different discount rate: qualified, mid-qualified and non-qualified.
Internet transactions are non-qualified which is the most expensive category.</p>
<h2 id="basis-point">basis point</h2>
<p>1 <a href="https://en.wikipedia.org/wiki/Merchant_account#Terms_to_know">basis point</a>
is 1%.  A term sometimes used when discussing the discount rate.</p>
<h2 id="average-ticket-size-avt">Average Ticket Size (AVT)</h2>
<p>The might make more sense to outsiders if they had called it Average
Transaction Size.  Its the total monthly sales amount divided by the total
number of transactions for that month.  Merchant account rates and fees are
often based on a merchant&rsquo;s monthly AVT.</p>
<h2 id="pci-dss">PCI DSS</h2>
<p>PCI stands for Payment Card Industry.  DSS stands for Data Security Standard.
It is a set of security standards for organizations who handle cardholder
information.  It is defined by the PCI Security Standards Council (PCI SSC)
which was formed in 2006 by the major card associations.  Note that there is a
difference between being compliant being validated as compliant.  Validation is
done annually by a Qualified Security Accessor (QSA) who creates a Report on
Compliance (ROC) for organizations handle lots of transactions or a
Self-Assessment Questionaire (SAQ) for companies handling less transactions.</p>
<h1 id="see-also">See also</h1>
<p><a href="http://merchantwarehouse.com/glossary">http://merchantwarehouse.com/glossary</a></p>
]]></content>
        </item>
        
        <item>
            <title>my vs our vs local</title>
            <link>http://blog.kablamo.org/articles/our-my-local/</link>
            <pubDate>Mon, 17 Mar 2014 00:00:00 +0000</pubDate>
            
            <guid>http://blog.kablamo.org/articles/our-my-local/</guid>
            <description>The short version for the impatient  my() creates a local variable our() creates a package variable local() temporarily changes the local value of a global variable The above is mostly true.  The long version for the irrepressibly quixotic my() my declares the listed variable to be local to the enclosing block, file, or eval. That is to say its scope is local. This kind of variable is known as a lexical variable.</description>
            <content type="html"><![CDATA[<h1 id="the-short-version-for-the-impatient">The short version for the impatient</h1>
<ul>
<li><code>my()</code> creates a local variable</li>
<li><code>our()</code> creates a package variable</li>
<li><code>local()</code> temporarily changes the local value of a global variable</li>
<li>The above is mostly true.</li>
</ul>
<h1 id="the-long-version-for-the-irrepressibly-quixotic">The long version for the irrepressibly quixotic</h1>
<h2 id="my">my()</h2>
<p><code>my</code> declares the listed variable to be local to the enclosing block, file,
or <code>eval</code>.  That is to say its <em>scope</em> is local.  This kind of variable is
known as a <em>lexical variable</em>.  Note that lexical variables are hidden from
subroutines which are called from within the enclosing block.  This is known as
<em>lexical scoping</em>.</p>
<h2 id="our">our()</h2>
<p><code>our</code> creates an alias to a <em>package variable</em>.  The alias is local to the
enclosing block, file, or <code>eval</code>.  That is to say the alias is lexically scoped
just like any lexical variable.  However a package variable belongs to a
package.  It can be accessed from anywhere if you use its fully qualified name.
Here are two examples of fully qualified package variables:</p>
<pre><code>$main::a
%MyPackage::boop
</code></pre>
<p>Note that package variables are also global variables.</p>
<h2 id="local">local()</h2>
<p><code>local</code> gives temporary values to global variables.  It does not create a local
variable.  It is most commonly used when you want to locally modify a global
variable such as one of the punctuation variables.  For example:</p>
<pre><code>{ 
    local $| = 1; # enable autoflush for STDOUT
    say &quot;hi mom&quot;;
}
</code></pre>
<p><code>local</code> modifies the listed variable to be local to the enclosing block,
file, or <code>eval</code> &ndash; AND to any subroutine called from within that block.  This
is known as <em>dynamic scoping</em>.</p>
<h1 id="sources">Sources</h1>
<p>For a more complete understanding I recommend <code>perldoc perlfunc</code> and especially
<code>perldoc perlsub</code>.  Also the following links may be helpful:</p>
<ul>
<li><a href="https://metacpan.org/pod/perlfunc">https://metacpan.org/pod/perlfunc</a></li>
<li><a href="https://metacpan.org/pod/perlsub">https://metacpan.org/pod/perlsub</a></li>
<li><a href="http://perlmaven.com/package-variables-and-lexical-variables-in-perl">http://perlmaven.com/package-variables-and-lexical-variables-in-perl</a></li>
<li><a href="http://www.perlmonks.org/?node_id=95813">http://www.perlmonks.org/?node_id=95813</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Why you should disagree in an interview</title>
            <link>http://blog.kablamo.org/articles/disagree-interview/</link>
            <pubDate>Sun, 16 Mar 2014 00:00:00 +0000</pubDate>
            
            <guid>http://blog.kablamo.org/articles/disagree-interview/</guid>
            <description>Today I&amp;rsquo;m writing about something I noticed while doing interviews recently.
If I disagree with a decision a company made, I need to jump into that with both feet. There is sometimes an instinct to say &amp;ldquo;I suppose I can live with that&amp;rdquo; or &amp;ldquo;I don&amp;rsquo;t know enough about why this choice was made to complain about it&amp;rdquo;. But the goal is not to complain or to highlight their ignorance or to have an argument.</description>
            <content type="html"><![CDATA[<p>Today I&rsquo;m writing about something I noticed while doing interviews recently.</p>
<p>If I disagree with a decision a company made, I need to jump into that with
both feet.  There is sometimes an instinct to say &ldquo;I suppose I can live with
that&rdquo; or &ldquo;I don&rsquo;t know enough about why this choice was made to complain about
it&rdquo;.  But the goal is not to complain or to highlight their ignorance or to
have an argument.</p>
<p>Disagreeing starts a discussion.  This creates an opportunity to do 2 things.</p>
<p>First, it allows me to show case what I know.  The fact I have an opinion shows
I have worked on this problem before and over the course of the discussion I
will be able to demonstrate I understand the pros and cons of the different
options and have expertise there.</p>
<p>Second, I will come to understand why the company got into the position they
are in.  Usually there is a good reason.  If it was made through ignorance I
will find out if are they open to fixing the problem &ndash; subject to priorities
of course.  I may also learn if they are interested in my opinion or are
looking for a soldier who follows orders.</p>
]]></content>
        </item>
        
        <item>
            <title>Questions I ask in interviews</title>
            <link>http://blog.kablamo.org/articles/interview-questions/</link>
            <pubDate>Fri, 14 Mar 2014 00:00:00 +0000</pubDate>
            
            <guid>http://blog.kablamo.org/articles/interview-questions/</guid>
            <description>I recently relocated from London to the Chicago area so I have been doing interviews. When I interview a potential client or employer I carry this list of questions with me. Most of the questions I have taken from other sources online. I have listed them in roughly the order I ask them.
Understanding the job  What will I be doing every day (precisely)? Why are you hiring? New product?</description>
            <content type="html"><![CDATA[<p>I recently relocated from London to the Chicago area so I have been doing
interviews.  When I interview a potential client or employer I carry this list of
questions with me.  Most of the questions I have taken from other sources
online.  I have listed them in roughly the order I ask them.</p>
<h1 id="understanding-the-job">Understanding the job</h1>
<ul>
<li>What will I be doing every day (precisely)?</li>
<li>Why are you hiring? New product? Scaling? Someone quit?</li>
<li>Who will I report to?</li>
<li>Who will I be working with?  How big are the teams?</li>
<li>What are my boss&rsquo; goals for the next 6 months/year?</li>
<li>What is the key metric for the company? For my group? For my boss?</li>
</ul>
<h1 id="understanding-the-culture">Understanding the culture</h1>
<ul>
<li>How do you build software?  Where do requirements and features come from?
Is it a very formal process or is there no process?</li>
<li>What problems does the group have that need to be solved?</li>
<li>Is there a mandate to fix legacy code and problems that exist?</li>
<li>What do you wish you had known before starting work here?</li>
<li>Whats the worst part of this job and whats the coolest thing you have built here, personally?</li>
</ul>
<h1 id="tools-and-best-practices">Tools and best practices</h1>
<ul>
<li>What tools are being used?
<ul>
<li>bug tracking</li>
<li>version control</li>
<li>which version of Perl</li>
<li>what operating system</li>
<li>why were those choices made</li>
</ul>
</li>
<li>Is there a mandate to use the latest stuff from CPAN?</li>
<li>Are there tests?</li>
<li>Are there automated tests?</li>
<li>What is deployment like?</li>
<li>Is Moose used? OO?</li>
</ul>
<h1 id="miscellaneous">Miscellaneous</h1>
<ul>
<li>Is there any allowance for remote work?</li>
<li>Are there core business hours?</li>
<li>Will I be oncall?</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>How to build a Duck Duck Go instant answer</title>
            <link>http://blog.kablamo.org/articles/duckduckgo/</link>
            <pubDate>Fri, 28 Feb 2014 00:00:00 +0000</pubDate>
            
            <guid>http://blog.kablamo.org/articles/duckduckgo/</guid>
            <description>Instant answers are those little boxes at the top of the DuckDuckGo search results page. I made one for discovering international calling codes &amp;ndash; or dialing codes if you prefer.
If you want to hack on DuckDuckGo and add your own instant answer its pretty simple to get started. You can use Vagrant and VirtualBox to get a complete working dev environment. But if you are already running Ubuntu or OSX the following recipe is easier:</description>
            <content type="html"><![CDATA[<p>Instant answers are those little boxes at the top of the DuckDuckGo search
results page.  I made one for discovering international calling codes &ndash; or
dialing codes if you prefer.</p>
<p><img src="/images/for-posts/2014-02-28-singapore.png" alt="x">
<img src="/images/for-posts/2014-02-28-down-under.png" alt="x"></p>
<p>If you want to hack on DuckDuckGo and add your own instant answer its pretty
simple to <a href="http://duckduckhack.com">get started</a>.  You can use Vagrant and
VirtualBox to get a complete working dev environment.  But if you are already
running Ubuntu or OSX the following recipe is easier:</p>
<pre><code>curl http://duckpan.org/install.pl | perl 
cpanm App::DuckPAN
duckpan installdeps # installs dependencies from DuckPAN (not CPAN) to locallib
</code></pre>
<p>Next fork the repository you want to hack on.  To choose the correct repository
think about what kind of data source you are using to generate your instant answer.</p>
<ul>
<li>Fork the <a href="https://github.com/duckduckgo/zeroclickinfo-spice">spice repo</a>
if you have a real time data source like a JSON web API.</li>
<li>Fork the <a href="https://github.com/duckduckgo/zeroclickinfo-goodie">goodie repo</a>
if you generate your instant answer with code and need no network access.</li>
<li>Fork the <a href="https://github.com/duckduckgo/zeroclickinfo-fathead">fathead repo</a>
if your data source can be placed in a key/value store.</li>
<li>Fork the <a href="https://github.com/duckduckgo/zeroclickinfo-fathead">longtail repo</a>
if your data source requires a full text search.</li>
</ul>
<p>Now you can start hacking.  I&rsquo;ll show you how the capitalization instant answer
from the goodie repo works.  Below is the code.  I added comments to explain
things a bit.</p>
<pre><code>package DDG::Goodie::Capitalize;
use DDG::Goodie;

# If a DuckDuckGo search query contains any of these words at the start or
# end of the query, the 'remainder' handler below will run.
triggers startend =&gt; 'capitalize', 'uppercase', 'upper case';

# This block of code is pretty much meta data describing this instant
# answer.  Mostly it is used by https://duckduckgo.com/goodies.
zci answer_type =&gt; &quot;capitalize&quot;;
primary_example_queries 'capitalize this';
secondary_example_queries 'uppercase that';
description 'capitalize a string';
name 'Capitalize';
code_url 'https://github.com/duckduckgo/zeroclickinfo-goodies/blob/master/lib/DDG/Goodie/Capitalize.pm';
category 'conversions';
topics 'programming';
attribution twitter =&gt; 'crazedpsyc',
            cpan    =&gt; 'CRZEDPSYC' ;

# This is is where the magic happens.  $_ contains the query minus the
# trigger word.  The return value from this sub shows up on the DuckDuckGo
# search results page as an instant answer.
handle remainder =&gt; sub { uc ($_) };
</code></pre>
<p>To test your new instant answer you can launch a little web server with the following command:</p>
<pre><code>duckpan server
</code></pre>
<p>Then open your favorite web browser and surf to
http://0:5000/?q=capitalize+aliens+smell+better+than+dinosaurs and you should
see something like this:</p>
<p><img src="/images/for-posts/2014-02-28-capitalize.png" alt="x"></p>
]]></content>
        </item>
        
        <item>
            <title>An experiment - No dessert forever</title>
            <link>http://blog.kablamo.org/articles/no-dessert-forever/</link>
            <pubDate>Wed, 01 Jan 2014 00:00:00 +0000</pubDate>
            
            <guid>http://blog.kablamo.org/articles/no-dessert-forever/</guid>
            <description>For years I have been hearing people say sugar is the new bad thing. So I finally got around to reading up on this claim. Here is what I learned.
Nutrition Food is composed of carbohydrates, fats, proteins, water, vitamins, and minerals. Of course, I sometimes swallow stuff that is not on that list but the list is comprehensive in the sense that it covers everything my body needs. Notice that sugar is not in the list.</description>
            <content type="html"><![CDATA[<p>For years I have been hearing people say sugar is the new bad thing.  So I
finally got around to reading up on this claim.  Here is what I learned.</p>
<h1 id="nutrition">Nutrition</h1>
<p>Food is composed of <strong>carbohydrates, fats, proteins, water, vitamins,</strong> and
<strong>minerals</strong>.  Of course, I sometimes swallow stuff that is not on that list
but the list is comprehensive in the sense that it covers everything my body
needs.  Notice that sugar is not in the list.  My body breaks down carbs and
fats into glucose (sugar) which can be used by my body as energy.</p>
<p>This means sugar has <em>zero</em> nutritional value.  There is no reason to ever
eat any.  Humans do not require sugar.</p>
<p>I have always been smug about the fact that I don&rsquo;t throw away my money on a
caffeine addiction.  But suddenly I realize I have been foolishly spending my
money on sugar.</p>
<h1 id="no-dessert-forever">No dessert forever</h1>
<p>As part of my long term plan to someday somehow acquire a svelte physique, I
hereby <strong>reject and repudiate</strong> the harmful cultural ritual known as dessert.
The rules are:</p>
<ul>
<li>No dessert forever.  No ice cream, no cake, no pie.</li>
<li>No candy forever.  No free candy or chocolate from the nice people at the office.</li>
<li>No fruit juice forever.</li>
<li>Exceptions
<ul>
<li>85%+ dark chocolate</li>
<li>Honey</li>
<li>Fruit</li>
<li>Small quantities of desserts that I have never had before.</li>
</ul>
</li>
</ul>
<p>Sources:</p>
<ul>
<li><a href="http://en.wikipedia.org/wiki/Food_energy">Wikipedia: Food energy</a></li>
<li><a href="http://www.ncbi.nlm.nih.gov/pmc/articles/PMC2235907/">Evidence for sugar addiction</a></li>
<li><a href="http://www.health.harvard.edu/newsletters/Harvard_Heart_Letter/2011/September/abundance-of-fructose-not-good-for-the-liver-heart">Abundance of fructose not good for the liver, heart</a></li>
<li><a href="http://nickwinter.net/experiments">Nick Winter</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>I made a Readline cheat sheet</title>
            <link>http://blog.kablamo.org/articles/readline-cheat-sheet/</link>
            <pubDate>Wed, 01 Jan 2014 00:00:00 +0000</pubDate>
            
            <guid>http://blog.kablamo.org/articles/readline-cheat-sheet/</guid>
            <description>Recently Ovid pointed out large projects are much more likely to fail. I have a few large goals I&amp;rsquo;d like to accomplish. For example I want to improve my front end design skills. Rather than trying to tackle this problem all at once, I made up a small project for myself.
I created a Readline cheat sheet and I was able to complete this project in about a day. Here are some of the things I learned:</description>
            <content type="html"><![CDATA[<p>Recently Ovid pointed out <a href="http://blogs.perl.org/users/ovid/2014/01/ditching-a-language.html">large projects are much more likely to fail</a>.
I have a few large goals I&rsquo;d like to accomplish.  For example I want to improve
my front end design skills.  Rather than trying to tackle this problem all
at once, I made up a small project for myself.</p>
<p>I created a <a href="http://readline.kablamo.org/emacs.html">Readline cheat sheet</a> and
I was able to complete this project in about a day.  Here are some
of the things I learned:</p>
<ul>
<li>
<p><strong>Bootstrap</strong> - I always worry libraries and frameworks like
<a href="http://getbootstrap.com">Bootstrap</a> are overkill and bloat since I only need
a tiny portion of their features.  But its undeniable that I was able to quickly
build a responsive mobile friendly website without needing to worry about the
technical details.</p>
</li>
<li>
<p><strong>Readline commands</strong> - If I had to pick one keyboad shortcut to recommend it
would be <code>Ctrl-r</code> which allows you to search backwards through your
history.  I also like the incremental undo command: <code>Ctrl-_</code>.</p>
</li>
<li>
<p><strong>Text::Xslate</strong> - People keep mentioning
<a href="https://metacpan.org/pod/Text::Xslate">Text::Xslate</a> so I wanted to give it a try.
The docs say its full featured and very fast.  I liked that HTML metacharacters
are escaped by default to avoid cross site scripting attacks.  Also it supports
Template Toolkit syntax.  I didn&rsquo;t find any new killer features, but it was a
pleasure to work with.</p>
</li>
<li>
<p><strong>Some new <a href="http://helabs.com.br/blog/2014/01/21/prevent-common-problems-when-writing-css-from-scratch/">CSS tricks</a></strong> -
The best trick I learned is how to keep my footer at the bottom of the page
even when it has only a few lines of content.</p>
</li>
</ul>
<p>I was able to practice design, layout, color, and font selection.  And who
knows &ndash; perhaps this project will also drive a tiny bit of traffic to my
github profile and increase my
<a href="http://www.codusoperandi.com/posts/increasing-your-luck-surface-area">luck surface area</a>.</p>
<p>The momentum feels good.  I need to remember to keep my projects small more often.</p>
<p><img src="/images/for-posts/2014-02-02.png" alt="x"></p>
]]></content>
        </item>
        
        <item>
            <title>Salt and pepper - How to encrypt database passwords</title>
            <link>http://blog.kablamo.org/articles/authen-passphrase/</link>
            <pubDate>Wed, 18 Dec 2013 00:00:00 +0000</pubDate>
            
            <guid>http://blog.kablamo.org/articles/authen-passphrase/</guid>
            <description>To explain how salt and pepper work in encryption, I will walk through a few scenarios.
No salt Summary for the impatient: Using no salt means an attacker doesn&amp;rsquo;t need to generate a rainbow table because they can reuse an existing one.
If an attacker obtains my database of encrypted passwords it will be very time consuming to brute force them. However there exist pre-computed tables of encrypted values of thousands of commonly used passwords.</description>
            <content type="html"><![CDATA[<p>To explain how salt and pepper work in encryption, I will walk through a few
scenarios.</p>
<h1 id="no-salt">No salt</h1>
<p><strong>Summary for the impatient:</strong>  <em>Using no salt means an attacker doesn&rsquo;t need
to generate a rainbow table because they can reuse an existing one.</em></p>
<p>If an attacker obtains my database of encrypted passwords it will be very time
consuming to brute force them.  However there exist pre-computed tables of
encrypted values of thousands of commonly used passwords.  These tables are called
rainbow tables.  It is computationally inexpensive to match the encrypted
values in a rainbow table with the encrypted values in my database.</p>
<h1 id="one-salt">One salt</h1>
<p><strong>Summary for the impatient:</strong>  <em>Using the same salt for all your passwords
means an attacker must generate 1 rainbow table.</em></p>
<p>Salt is data used as an additional input to the algorthim that encrypts a
password.  If I use a salt when I encrypt a password the resulting output will
be different from someone who did not use the same salt.  That means my
attacker cannot reuse an existing rainbow table.  They must generate a new one
using the same salt I used.</p>
<p>Note that salt is usually stored as plain text in the database with the
encrypted passwords.  So the attacker usually has access to the salt.  Even so,
I have successfully made the attack more expensive.</p>
<h1 id="a-random-salt-per-password">A random salt per password</h1>
<p><strong>Summary for the impatient:</strong>  <em>Using a random salt for each password means an
attacker must generate 1 rainbow table per password.</em></p>
<p>Instead of using a single salt for the entire database I can use a different
(random) salt for each user&rsquo;s password.  This means the attacker must generate
a set of rainbow tables for each password which is even more expensive.</p>
<p>Note that I also need to store the salt for each password I have generated.
This is a pain to do manually.  Happily some clever person came up with RFC
2307 which suggests a much simpler solution.</p>
<p>Instead of storing the just the encrypted password in the password column, store
a string which concatenates the salt and the encrypted password.  This may not
sound easier.  It implies the need to parse and concatenate strings.  However
this is handled for me by the encryption libraries so its 100% pain free.  Lets
see an example.</p>
<p>To encrypt the plaintext string &lsquo;pie&rsquo; use the following Perl code</p>
<pre><code>my $blowfish = Authen::Passphrase::BlowfishCrypt-&gt;new(
    passphrase  =&gt; 'pie',
    salt_random =&gt; 1,
    cost        =&gt; 16,
);

say $blowfish-&gt;as_rfc2307; 
# the output will look like this:
# {CRYPT}$2a$14$sS80d1JlF3oR6Q4UHT.9w.DIXnV0/dLQMoVBsOp2gMRT65bWvP0P2
</code></pre>
<p>That crazy <em>{CRYPT}$2a$blarblar</em> mumbo jumbo is what we will save to the db in the password
column.  However if I know what to look for, I can see the mumbo jumbo is actually
several things smushed together:</p>
<pre><code>{CRYPT} $ 2a $ 16 $ sS80d1JlF3oR6Q4UHT.9w.DIXnV0/dLQMoVBsOp2gMRT65bWvP0P2
</code></pre>
<ul>
<li><strong>{CRYPT}</strong> - This is the scheme identifier.  It indicates which scheme is being used
so I know how to parse the rest of the string.</li>
<li><strong>$</strong> - These are field separators</li>
<li><strong>2a</strong> - A version number for this scheme</li>
<li><strong>16</strong> - The cost</li>
<li>Then there is the <strong>salt</strong> (22 base 64 digits &ndash; plain text)</li>
<li>Followed by the <strong>encrypted password</strong> (31 base 64 digits)</li>
</ul>
<p>To check if a user has submitted a valid <code>$password</code>  use the following code</p>
<pre><code>my $secret   = ''{CRYPT}$2a$16$sS80d1JlF3oR6Q4UHT.9w.DIXnV0/dLQMoVBsOp2gMRT65bWvP0P2';
my $blowfish = Authen::Passphrase-&gt;from_rfc2307($secret);

if ($blowfish-&gt;match($password)) {
    say &quot;You may enter&quot;;
}
else {
    say &quot;You did not say the magic word&quot;;
}
</code></pre>
<p>Of course we want to build this into our ORM so the Authen::Passphrase objects
are inflated and deflated for us.  Here is what that looks like in a DBIx
Result class:</p>
<pre><code>__PACKAGE__-&gt;load_components(qw/FilterColumn/);
__PACKAGE__-&gt;filter_column( password =&gt; {
    filter_to_storage   =&gt; sub { $_[1]-&gt;as_rfc2307() },                      # deflate
    filter_from_storage =&gt; sub { Authen::Passphrase-&gt;from_rfc2307($_[1]) },  # inflate
});
</code></pre>
<p>But I only showed you that so you would understand what
DBIx::Class::InflateColumn::Authen::Passphrase does under the covers.  I use
that because it makes my code simpler:</p>
<pre><code>__PACKAGE__-&gt;load_components(qw/InflateColumn::Authen::Passphrase/);
__PACKAGE__-&gt;add_columns(
    ...,
    password =&gt; {
        data_type          =&gt; 'text',
        inflate_passphrase =&gt; 'rfc2307',
    },
    ...,
);
</code></pre>
<p>This is how I encrypt passwords on <a href="https://networthify.com">networthify.com</a>
and <a href="http://iijo.org">iijo.org</a>.</p>
<h1 id="adding-pepper">Adding pepper</h1>
<p><strong>Summary for the impatient:</strong>  <em>Using pepper means an attacker must generate
many rainbow tables per password. But few people use pepper and its
controversial.</em></p>
<p>Pepper is the same as salt except that I don&rsquo;t save the value anywhere.  Lets
say I choose an 8 bit value for my pepper.  That means there are 256
possible values.  If I don&rsquo;t save that value anywhere then when a user logs
in I will need to try up to 256 values to see if the user has the right
password.  However it means my attacker will need to generate up to 256
rainbow tables for each password.</p>
<p>One big problem is that trying 256 possible values is going to take me about 4
minutes on average hardware.</p>
<p>Even if I ignore that issue, this option is controversial and my understanding
is that few people do it.  It is generally accepted that messing about with
salt and pepper should be left to the professionals who are writing the
encryption libraries.  Pepper is not supported by Authen::Passphrase.</p>
<h1 id="caveats">Caveats</h1>
<p>Salting is done to make rainbow tables inneffective.  For various reasons
crackers rarely use rainbow tables anymore.  Instead they use sophisticated
brute force algorithms which combine dictionary attacks with databases of known
or commonly used passwords.  These kinds of brute force attacks can often crack
battery-horse-staple <a href="http://xkcd.com/936/">XKCD</a> style passwords even if they
are very long.  Password are not secure unless they are very long <em>and</em>
very random.</p>
<p>And there is more bad news.  While salting makes it harder to crack all the
passwords in the database, cracking a single targeted password is often not
computationally hard.  A single completely random 8 character password can be
cracked with brute force in 10 days.</p>
<p>The only way to protect your users is to require very long and very random
passwords.  Make sure your website requires a minimum password length of 8
characters or more.</p>
<h4 id="sources">Sources</h4>
<ul>
<li><a href="http://www.wired.co.uk/news/archive/2013-05/28/password-cracking/viewall">Anatomy of a hack: even your &lsquo;complicated&rsquo; password is easy to crack</a> (Wired magazine)</li>
<li><a href="https://metacpan.org/pod/Authen::Passphrase">Authen::Passphrase</a></li>
<li><a href="https://metacpan.org/pod/Authen::Passphrase::BlowfishCrypt">Authen::Passphrase::BlowfishCrypt</a></li>
<li><a href="https://metacpan.org/pod/DBIx::Class::InflateColumn::Authen::Passphrase">DBIx::Class::InflateColumn::Authen::Passphrase</a></li>
<li><a href="http://blog.afoolishmanifesto.com/archives/1910">frew</a></li>
<li><a href="http://crypto.stackexchange.com/questions/1776/can-you-help-me-understand-what-a-cryptographic-salt-is">crypto.stackexchange.com</a></li>
<li><a href="http://security.stackexchange.com/questions/3272/password-hashing-add-salt-pepper-or-is-salt-enough">security.stackexchange.com</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Ray Dalio&#39;s &#34;Principles&#34;</title>
            <link>http://blog.kablamo.org/articles/dalios-principles/</link>
            <pubDate>Sun, 15 Dec 2013 00:00:00 +0000</pubDate>
            
            <guid>http://blog.kablamo.org/articles/dalios-principles/</guid>
            <description>I have been reading Ray Dalio&amp;rsquo;s Principles. Ray Dalio is the CEO of Bridgewater which is a big famous successful hedge fund he started in the 70&amp;rsquo;s. Principles, is a 123 page philosophical text he published in 2011 about how to live your life and how to manage people and organizations. Its extremely good. I&amp;rsquo;m not done yet but I have a feeling it is something I&amp;rsquo;m going to be rereading many times over the next few years.</description>
            <content type="html"><![CDATA[<p>I have been reading Ray Dalio&rsquo;s <em>Principles</em>.  Ray Dalio is the CEO of
Bridgewater which is a big famous successful hedge fund he started in the 70&rsquo;s.
<em>Principles</em>, is a 123 page philosophical text he published in 2011 about how
to live your life and how to manage people and organizations.  Its extremely
good.  I&rsquo;m not done yet but I have a feeling it is something I&rsquo;m going to be
rereading many times over the next few years.  You can download it from the
<a href="http://www.bwater.com/Uploads/FileManager/Principles/Bridgewater-Associates-Ray-Dalio-Principles.pdf">Bridewater website</a>.</p>
<p>Here is a sample:</p>
<blockquote>
<p>Most people react to pain badly. They have “fight or flight” reactions to it:
they either strike out at whatever brought them the pain or they try to run
away from it. As a result, they don’t learn to find ways around their barriers,
so they encounter them over and over again and make little or no progress
toward what they want&hellip;</p>
<p>Believe it or not, you are lucky to feel the pain if you approach it correctly,
because it will signal that you need to find solutions and to progress. Since
the only way you are going to find solutions to painful problems is by thinking
deeply about them - i.e., reflecting - if you can develop a knee-jerk reaction
to pain that is to reflect rather than to fight or flee, it will lead to your
rapid learning/evolving.</p>
</blockquote>
<p>And from that he derives this equation:</p>
<blockquote>
<p>Pain + Reflection = Progress</p>
</blockquote>
<p>So I&rsquo;ve been trying to do this.  Whenever I experience conflict, stress, anger,
or pain, I will try to make that into an opportunity to evolve and to become
stronger.</p>
<p>Quite a lot of <em>Principles</em> feels like common sense.  But at the same time I
can see that some of that common sense stuff is stuff I haven&rsquo;t been doing or
have been doing half way or just have not thought through as much as Dalio has.
I think that having this set of considered formalized principles to refer
to will help me to get what I want from life.</p>
<p>By the way, I discovered <em>Principles</em> via
<a href="http://sebastianmarshall.com/">Sebastian Marshall</a>.  Sebastion is an American
who has been living and working in Japan for about 10 years.  His writing is
always interesting and is a great source of new ideas for me.</p>
]]></content>
        </item>
        
        <item>
            <title>How to find and restore deleted files with git</title>
            <link>http://blog.kablamo.org/articles/git-restore/</link>
            <pubDate>Sun, 08 Dec 2013 00:00:00 +0000</pubDate>
            
            <guid>http://blog.kablamo.org/articles/git-restore/</guid>
            <description>Don&amp;rsquo;t be afraid to delete files from your git repository. You can get restore them. You can even search for a string in a deleted file. Here is how to find a deleted file and its commit:
git log --diff-filter=D --summary # all deleted files ever git log --diff-filter=D --summary . # all deleted files in cwd git log --diff-filter=D --author=Batman --summary # all files deleted by Batman  How to restore a deleted file:</description>
            <content type="html"><![CDATA[<p>Don&rsquo;t be afraid to delete files from your git repository.  You can get restore
them.  You can even search for a string in a deleted file.  Here is how to find
a deleted file and its commit:</p>
<pre><code>git log --diff-filter=D --summary                  # all deleted files ever
git log --diff-filter=D --summary .                # all deleted files in cwd 
git log --diff-filter=D --author=Batman --summary  # all files deleted by Batman
</code></pre>
<p>How to restore a deleted file:</p>
<pre><code>git checkout &lt;commit&gt;~1 &lt;filename&gt;
</code></pre>
<p>To make this process a little easier next time I need to do it, I created a git
alias for finding deleted files by adding this to my .gitconfig file:</p>
<pre><code>[aliases]
deleted = log --diff-filter=D --summary
</code></pre>
<p>Now I can find and restore files like this:</p>
<pre><code>git deleted                         # find a deleted file and its commit
git checkout &lt;commit&gt;~1 &lt;filename&gt;  # restore the deleted file
</code></pre>
<h2 id="how-to-search-the-contents-of-deleted-files">How to search the contents of deleted files</h2>
<p>But lets say I don&rsquo;t remember the filename of that file I deleted in a fit of
cleanup passion.  I do remember the name of one of the functions in it though.
Here is how to deal with that.  Search the contents of all files that have ever
existed in git for a string:</p>
<pre><code>git log --summary -S&lt;string&gt; [&lt;path/to/file&gt;] [--since=2009.1.1] [--until=2010.1.1]
</code></pre>
<p>Another way to do this:</p>
<pre><code>git rev-list --all | xargs git grep 'string'
</code></pre>
<p>Git is all knowing and all seeing and all powerful.  Hail git, powerful arcane
lord of source control.</p>
]]></content>
        </item>
        
        <item>
            <title>Tmux reloaded</title>
            <link>http://blog.kablamo.org/articles/tmux-reloaded/</link>
            <pubDate>Wed, 27 Nov 2013 00:00:00 +0000</pubDate>
            
            <guid>http://blog.kablamo.org/articles/tmux-reloaded/</guid>
            <description>To reload your tmux configuration without restarting the server, add this to your ~/.tmux.conf file:
# reload the config file without restarting the tmux server bind R source-file ~/.tmux.conf \; display-message &amp;quot;Config reloaded&amp;quot;  Notice thats a capital R not a lowercase r. I keep forgetting that.</description>
            <content type="html"><![CDATA[<p>To reload your tmux configuration without restarting the server, add this to
your <code>~/.tmux.conf</code> file:</p>
<pre><code># reload the config file without restarting the tmux server
bind R source-file ~/.tmux.conf \; display-message &quot;Config reloaded&quot;
</code></pre>
<p>Notice thats a capital <code>R</code> not a lowercase <code>r</code>.  I keep forgetting that.</p>
]]></content>
        </item>
        
        <item>
            <title>Configure tmux to give you status updates about anything</title>
            <link>http://blog.kablamo.org/articles/tmux-status-updates/</link>
            <pubDate>Tue, 26 Nov 2013 00:00:00 +0000</pubDate>
            
            <guid>http://blog.kablamo.org/articles/tmux-status-updates/</guid>
            <description>I use and love OSX growl and Ubuntu notify style desktop notifications. They are gorgeous. But they are also distracting and after a few vibrant and whimsical but fleeting seconds they are gone forever and you have no way to get them back.
A more useful (and less glorious) way to receive notifications is in your tmux status bar. tmux is the brilliant successor to the venerable screen which hasn&amp;rsquo;t been actively developed for quite a while.</description>
            <content type="html"><![CDATA[<p>I use and love OSX growl and Ubuntu notify style desktop notifications.  They
are gorgeous.  But they are also distracting and after a few vibrant and
whimsical but fleeting seconds they are gone forever and you have no way to get
them back.</p>
<p>A more useful (and less glorious) way to receive notifications is in your
<a href="http://tmux.sourceforge.net/">tmux</a> status bar.  tmux is the brilliant
successor to the venerable screen which hasn&rsquo;t been actively developed for
quite a while.</p>
<p>Here is how I configure notifications in my .tmux.conf file:</p>
<pre><code>set -g status-interval 15    
set -g status-right !exec my_shell_script
</code></pre>
<p>This tells tmux to run <code>my_shell_script</code> every 15 seconds.  It displays the
first line of output from the shell script.  Now I can get unobtrusive status
updates which don&rsquo;t go away. And if I ate a good breakfast, feel rested, and
have the wind at my back I can write some code to log my notifications to a
file so that I don&rsquo;t miss any.</p>
<p>Here are some ideas that might be useful which I might someday do maybe perhaps
possibly:</p>
<ul>
<li>Status updates when someone says your name on irc</li>
<li>Status updates when jenkins tests fail</li>
<li>Status updates when people push code live</li>
<li>Status updates when people merge branches</li>
</ul>
<p>Any other ideas?</p>
<p>Also don&rsquo;t miss the tmux <a href="https://github.com/Lokaltog/powerline">powerline</a>
status bar.</p>
]]></content>
        </item>
        
        <item>
            <title>Anyenv &#43; Plenv &#43; Carton</title>
            <link>http://blog.kablamo.org/articles/plenv/</link>
            <pubDate>Mon, 25 Nov 2013 00:00:00 +0000</pubDate>
            
            <guid>http://blog.kablamo.org/articles/plenv/</guid>
            <description>Recently I started breaking out of my Perl-only isolation bubble and dabbling with other languages. I was surprised how easy and comfortable other languages are. I think its because these days good ideas spread from one language to the next incredibly fast. Even in a new language when I reach for a tool I can usually find some Perl technology analogue.
For example, I&amp;rsquo;ve been a perlbrew person for a long time and it has served me well.</description>
            <content type="html"><![CDATA[<p>Recently I started breaking out of my Perl-only isolation bubble and dabbling
with other languages. I was surprised how easy and comfortable other languages
are. I think its because these days good ideas spread from one language to the
next incredibly fast. Even in a new language when I reach for a tool I can
usually find some Perl technology analogue.</p>
<p>For example, I&rsquo;ve been a perlbrew person for a long time and it has served me
well.  Ruby has its own version of perlbrew called rbenv which is pretty great.
But actually it seems every language has a clone of rbenv.</p>
<ul>
<li>Python has pyenv.</li>
<li>PHP has phpenv.</li>
<li>Node has ndenv.</li>
<li>Java has jenv.</li>
<li>Perl has plenv.</li>
</ul>
<p>So I thought, what the heck &ndash; lets try that out.  The nice thing
is all the envs have pretty much the same command line options and the same
approach to managing dependencies.  I thought it might be calming and soothing
for my brain to have one way of doing things.</p>
<p>I found <a href="https://github.com/riywo/anyenv">Anyenv</a> just a second ago as I was
writing this.  It claims it will manage all my envs. Looks like brilliant
stuff. Fortune favors the bold. (I eat danger for breakfast.)  I&rsquo;ll try it.</p>
<pre><code>git clone https://github.com/riywo/anyenv ~/.anyenv
echo 'export PATH=&quot;$HOME/.anyenv/bin:$PATH&quot;' &gt;&gt; ~/.my_profile
echo 'eval &quot;$(anyenv init -)&quot;'               &gt;&gt; ~/.my_profile
exec bash -l
anyenv install rbenv    # ruby
anyenv install plenv    # perl
anyenv install pyenv    # python
anyenv install phpenv   # php
anyenv install ndenv    # nodejs
anyenv install denv     # dunno
anyenv install jenv     # java
exec bash -l            # &lt;-- useful trick btw
anyenv versions
</code></pre>
<p>Ok now I have all the envs.  But I want to actually do some work with plenv.
Lets see if I can do that.</p>
<pre><code>plenv install --list  # list all the potential perl versions you can use
plenv install 5.19.6  # install perl v5.19.6
plenv rehash          # reload the shell environment with the new perl
plenv global 5.19.6   # use v5.19.6 everywhere by default
plenv local  5.19.6   # use v5.19.6 in this directory for this project
plenv install-cpanm   # install cpanm for this version of perl
plenv rehash          #
plenv which cpanm     # see where cpanm is installed. should be ~/.anyenv
</code></pre>
<p>Now I will install the dependencies for my project.  I will manage them with
<a href="https://metacpan.org/pod/Carton">Carton</a>.</p>
<pre><code>cpanm Carton          # install carton for this version of perl
plenv list-modules
</code></pre>
<p>At this point I need to create a <code>cpanfile</code>.  There are all kinds of cool
things you can do in this file, but with your permision I will begin with baby
steps.  Here is mine cpanfile for now:</p>
<pre><code>requires &quot;Catalyst&quot;;
requires &quot;Plack&quot;;
requires &quot;DBD::SQLite&quot;;
</code></pre>
<p>And then I run carton to install these modules locally into local/lib/perl5.</p>
<pre><code>carton               # install all the dependencies from the cpanfile
ls local/lib/perl5/  # see all the new modules installed here
plenv list-modules   # see mountains of installed stuff
cd /tmp
plenv list-modules   # see nothing installed except Carton
</code></pre>
<p>Notice that a carton.snapshot file was created.  If I look inside, I can see a
list of all my project dependencies, and all their dependencies, etc all the
way down to the first turtle &ndash; AND there are version numbers for everything.</p>
<pre><code># carton snapshot format: version 1.0
DISTRIBUTIONS
Apache-LogFormat-Compiler-0.13
  pathname: K/KA/KAZEBURO/Apache-LogFormat-Compiler-0.13.tar.gz
    provides:
      Apache::LogFormat::Compiler 0.13
    requirements:
      CPAN::Meta 0
      CPAN::Meta::Prereqs 0
      Module::Build 0.38
...blah biddee blah etc...
</code></pre>
<p>I can add <code>cpanfile</code> and <code>cpanfile.snapshot</code> to my git repo.  Now when I deploy
or share the code, the user at the destination can run Carton and they will end
up with the exact dependencies with the exact same version numbers I had. This
way I can be sure my code will run as successfully for them as it did for me.</p>
]]></content>
        </item>
        
        <item>
            <title>Monit - How to know when your web site is down</title>
            <link>http://blog.kablamo.org/articles/monit/</link>
            <pubDate>Sun, 24 Nov 2013 00:00:00 +0000</pubDate>
            
            <guid>http://blog.kablamo.org/articles/monit/</guid>
            <description>If your website goes down, you want to find out fast. There are a few ways to accomplish this, but I&amp;rsquo;m using monit. Monit is a mature unix monitoring daemon and it gives me the ability not only get alerts but to restart services that go down.
Monit has lotsa power and options and you can read about all of them on the man page. Or if you don&amp;rsquo;t want to mess around with that you can pay them for a pretty web admin interface and some phone/tablet apps for a one time fee of € 65.</description>
            <content type="html"><![CDATA[<p>If your website goes down, you want to find out fast.  There are a few ways to
accomplish this, but I&rsquo;m using <a href="http://mmonit.com/monit">monit</a>.  Monit is a
mature unix monitoring daemon and it gives me the ability not only get alerts
but to restart services that go down.</p>
<p>Monit has lotsa power and options and you can read about all of them on
the man page.  Or if you don&rsquo;t want to mess around with that you can pay them
for a <a href="https://mmonit.com/screenshots/">pretty web admin interface</a> and some
phone/tablet apps for a one time fee of € 65.  Another simpler and I think less
powerful option is <a href="http://monitis.com/?affiliate=1303230640">monitor.us</a>.</p>
<p>I don&rsquo;t want to pay.  So I installed monit like this:</p>
<pre><code>apt-get install monit
</code></pre>
<p>The configuration file for monit lives at <code>/etc/monit/monitrc</code>.  You probably
don&rsquo;t need to bother with that.  When monit runs, it looks in
<code>/etc/monit/conf.d</code> and executes any scripts it finds in there.  Like many
people I&rsquo;m running nginx in front of my Starman web apps.  So I want monitor
both of those processes.</p>
<p>Here is how to do that.  Created a script named <code>/etc/monit/confd/nginx</code>:</p>
<pre><code>check process nginx with pidfile /var/run/nginx.pid

    start program = &quot;/etc/init.d/nginx start&quot;
    stop  program = &quot;/etc/init.d/nginx stop&quot;

    alert kablamo@example.com with mail-format {
           from: monit@example.com
        subject: monit alert: $SERVICE $EVENT $DATE
        message: $DESCRIPTION
    }

    if failed port 80 protocol HTTP
        request /
        with timeout 7 seconds
        then restart
</code></pre>
<p>Then create a second script named <code>/etc/monit/conf.d/mywebapp</code>.  Its very
similar.  This assumes you are running your web app as the user <code>web</code> on
localhost port 22222.</p>
<pre><code>check process mywebapp with pidfile /var/run/mywebapp.pid

    start program = &quot;/etc/init.d/mywebapp start&quot; as uid web and gid web
    stop  program = &quot;/etc/init.d/mywebapp stop&quot;  as uid web and gid web

    alert kablamo@example.com with mail-format {
           from: monit@example.com
        subject: monit alert: $SERVICE $EVENT $DATE
        message: $DESCRIPTION
    }

    if failed port 22222 protocol HTTP
        request /
        with timeout 7 seconds
        then restart
</code></pre>
<p>With these scripts, anytime your processes disappear or stop working you will
get email and monit will try to restart them.</p>
<p>But I&rsquo;m paranoid.  So I created a third monit script to do an end to end test in case
something ever gets misconfigured somewhere. <code>/etc/monit/conf.d/end2end</code>:</p>
<pre><code>check host networthify.com with address 71.19.156.131
        
    alert kablamo@example.com with mail-format {
           from: monit@monit@example.com
        subject: monit alert: $SERVICE $EVENT $DATE
        message: $DESCRIPTION
    }

    if failed port 80 protocol HTTP
        request /
        with timeout 9 seconds
        then alert
</code></pre>
<p>Suggestions for improvment?</p>
]]></content>
        </item>
        
        <item>
            <title>Devops with Rex</title>
            <link>http://blog.kablamo.org/articles/rex/</link>
            <pubDate>Fri, 22 Nov 2013 00:00:00 +0000</pubDate>
            
            <guid>http://blog.kablamo.org/articles/rex/</guid>
            <description>I have recently been playing with Rex and wanted to write down some of my initial thoughts.
Rex is a devops tool that helps you manage your servers. Its similar to Puppet Lab&amp;rsquo;s mcollective tool or ansible. You can easily run commands on your entire fleet of boxen or just on certain subgroups. And you can run them in parallel which saves you giant baskets of time.
The big advantage for People Who Prefer Perl (PWPP) is that Rex is written and configured with Perl.</description>
            <content type="html"><![CDATA[<p>I have recently been playing with <a href="http://www.rexify.org/">Rex</a> and wanted to
write down some of my initial thoughts.</p>
<p>Rex is a devops tool that helps you manage your servers.  Its similar to
Puppet Lab&rsquo;s <a href="http://puppetlabs.com/mcollective">mcollective</a> tool or
<a href="http://www.ansibleworks.com/docs/">ansible</a>.  You can easily run commands on
your entire fleet of boxen or just on certain subgroups.  And you can run
them in parallel which saves you giant baskets of time.</p>
<p>The big advantage for People Who Prefer Perl (PWPP) is that Rex is written and
configured with Perl. So for the most part you don&rsquo;t need to spend a lot of time
learning yet another DSL.</p>
<p>Another happy positive is that you don&rsquo;t need to install any software on your
servers. Installation is simple:</p>
<pre><code>$ apt-get install libssh2-1-dev
$ cpanm Rex
</code></pre>
<p>Configuration is also simple &ndash; at least if you know Perl.  The
Rex configuration file is named &lsquo;Rexfile&rsquo; and its syntax is Perl with some
extra Rexy sugar methods thrown in. And I feel the sugar and general API for
Rex is fairly well done.  Here is an example Rexfile:</p>
<pre><code># Configure the default user and your ssh keys.  The default user can be
# overridden on the command line with the -u option.
user &quot;joe&quot;;
private_key &quot;/home/joe/.ssh/id_rsa&quot;;
public_key &quot;/home/joe/.ssh/id_rsa.pub&quot;;
key_auth;

# Cofigure server groups
group prod =&gt; &quot;webserver&quot;, &quot;mailserver&quot;, &quot;dbserver&quot;;
group dev  =&gt; &quot;pancake[1-3]&quot;, &quot;narwhale[1-3]&quot;, &quot;honeybadger[1-3]&quot;;

# Run commands in parallel on up to 100 servers at one time.  This can be
# overridden on the command line with the -t option.
parallelism 100;

# Create tasks.  This task runs against all servers by default.  This can
# be overridden on the command line with the -G or -H options.
task 'uptime', group =&gt; 'all', sub {
    my $output = run &quot;uptime&quot;;
    say $output;
};
</code></pre>
<p>You can see that Perl&rsquo;s &lsquo;say&rsquo; command is available by default.  &lsquo;run&rsquo; is a Rex
sugar method which accepts a shell command and returns the output &ndash; similar
to Capture::Tiny.</p>
<p>Here is a command line example which runs the &lsquo;uptime&rsquo; task as the &lsquo;root&rsquo; user
on each server in the &lsquo;dev&rsquo; group:</p>
<pre><code>$ rex -G dev -u root uptime
    pancake1:  16:42:05 up 221 days,  9:49,  1 user,  load average: 0.00, 0.00, 0.00
   narwhale2:  16:42:05 up 8 days,  3:28,  4 users,  load average: 0.00, 0.00, 0.00
   narwhale3:  16:42:05 up 17 days,  3:57,  2 users,  load average: 0.01, 0.01, 0.00
honeybadger1:  16:42:05 up 80 days,  3:29,  1 user,  load average: 0.09, 0.06, 0.01
    pancake3:  16:42:05 up 137 days,  7:49,  1 user,  load average: 0.00, 0.00, 0.00
   narwhale1:  16:42:05 up 65 days,  5:30,  2 users,  load average: 0.46, 0.41, 0.37
honeybadger3:  16:42:04 up 15 days,  4:49,  1 user,  load average: 2.00, 2.00, 2.00
    pancake2:  16:42:04 up 1 day,  2:23,  3 users,  load average: 1.38, 1.35, 1.30
honeybadger2:  16:42:05 up 39 days,  1:24,  1 user,  load average: 0.08, 0.06, 0.01
</code></pre>
<p>Rex is fantastic for ad-hoc commands.  But it also has a great set of libraries
for doing much more like installing debian packages, user management,
virtualization, and managing EC2 boxes.  I have to say I&rsquo;m deeply attracted to
its simplicity &ndash; especially after dealing with Puppet&rsquo;s complicated and weird
DSL.</p>
<p>If anyone uses Rex to manage more than 50 servers, I would love to get in touch
with you and ask a few questions.</p>
]]></content>
        </item>
        
        <item>
            <title>Learning Ruby with online university classes</title>
            <link>http://blog.kablamo.org/articles/learning-ruby/</link>
            <pubDate>Tue, 19 Nov 2013 00:00:00 +0000</pubDate>
            
            <guid>http://blog.kablamo.org/articles/learning-ruby/</guid>
            <description>I just completed UC Berkeley&amp;rsquo;s Software as a Service class (via edX.com). I had a great experience and highly recommend it.
The class is a tour of all the tools Ruby developers use to create and deploy websites. It assumes you already know how to program at a fairly high level but not necessarily in Ruby. I have no plans to stop writing Perl code (which I love). I just wanted to broaden my horizons, have some fun, and increase my luck surface area.</description>
            <content type="html"><![CDATA[<p>I just completed UC Berkeley&rsquo;s Software as a Service class (via
<a href="http://edx.com">edX.com</a>).  I had a great experience and highly recommend
it.</p>
<p>The class is a tour of all the tools Ruby developers use to create and
deploy websites.  It assumes you already know how to program at a fairly high
level but not necessarily in Ruby.  I have no plans to stop writing Perl code
(which I love).  I just wanted to broaden my horizons, have some fun, and
increase my <a href="http://www.codusoperandi.com/posts/increasing-your-luck-surface-area">luck surface area</a>.</p>
<p>Hands up, who uses what they learned from university classes in their current
job?  No one right?  While online education is clearly the future I was
initially sceptical that a traditional, old school (hah) institution like
Berkeley was innovative enough to do a good job.</p>
<p>I underestimated them.  This class was refreshingly current and practical.  I
got an introduction to a tsunami of tools. I learned to use Ruby, Rails, Rake,
Heroku, ActiveRecord, HAML, SASS, RSpec, Cucumber, and Capybara.  They also
explained REST, DRY, agile iterative development processes, and other stuff I
can&rsquo;t remember right now.</p>
<p>Another thing they got right is we were able to submit our homework over and
over again until we got all the answers.  And the ability to play
lectures at double speed is every bit as brilliant as I imagined it would be.
I wish I had this super power on YouTube.  I was also happy to see the course
supplied students with an Ubuntu powered virtual machine preconfigured with all
the necessary software.</p>
<p>I only had a few minor complaints.  My biggest is that the course didn&rsquo;t spend
any time on sysadmin topics like rbenv and bundler.  I purposely avoided using
the virtual machine so that I would learn that stuff.  Knowing how to use your
tools and configure your environment is a crucial part of being a good
programmer.  This can perhaps be forgiven though since it was only a 5 week
class and we raced through every topic like our pants were on fire.</p>
<p>Altogether it was a fun experience at a great price (free) and I recommend it.
My next class is Chinese History.</p>
<pre style="font: 4px/2px monospace; color: #333; background: transparent; border: 0px; border-radius: 0; box-shadow: 0 0 0 0;">
                                                                                                                                         
                                                                                                                                         
                                                                                                                                         
                                                                                                                                         
                                                                                                                                         
                                                                                                                                         
                                                                                                                                         
                                                                                                                                         
                                                                                                                                         
                                                                                                                                         
                                                                                                                                         
                                                                                                                                         
                                                                                                                                         
                                                                                                                                         
                                                                    ::::::::;;;;;;;;;::::::::::::::::        `::::::::::::::::::::::::   
                                                                    ::::::::;''''''''::::::::::::::::        `:::::::::::::::::::::::;   
                                                                    ::::::::;''''''''::::::::::::::::        `:::::::::::::::::::::::;   
                                                                    ::::::::;''''''''::::::::::::::::        `:::::::::::::::::::::::;   
                                                                    ::::::::;''''''''::::::::::::::;:        `:::::::::::::::::::::::;   
                                                                    ::::::::;''''''''::::::::::::::;:        `:::::::::::::::::::::::;   
                                                                    ::::::::;''''''''::::::::::::::;:        `:::::::::::::::::::::::;   
                                                                    ::::::::;''''''''::::::::::::::::        `:::::::::::::::::::::::;   
                                                                    ::::::::;''''''''::::::::::::::::        `:::::::::::::::::::::::;   
                                                                    ::::::::;'''''''':::::::::::`````         `````:::::::::::;:::::::   
                                                                          ::::::::;'':::::::::::.                 ,:::::::::::::.        
                                                                          :::::::::;'::::::::::::                `:::;::::::::;:         
                                                                          ::::::::::':::::::::::::               ;::::::::::::;          
                                                                          ::::::::::,::::::::::::::             :::::::::::;::           
                       `,,::,.                                            :::::::::::`:;::::::::;:;.           ,:;:::::::::::`           
                   ,;;;;;;;;;;;;':                    .::::::::.          ::::::::::: ,:::::::::::::          `:::::::::::::.            
                 ;;;;;;;;;;;;;;;;;;;`             `:::::::::::::::.       :::::::::::  :::::::::::::;         :;:::::::::::,             
               ';;;;;;;;;;;;;;;;;;;;;;`         `:::::::::::::::::::.     :::::::::::   :;::::::::::::       :::::::::::::;              
             :;;;;;;;;;;;;;;;;;;;;;;;;;;       :::::::::::::::::::::::    :::::::::::    :::::::::::::.     ::::::::::::::               
            ';;;;;;;;;;;;;;;;;;;;;;;;;;;;`   `:::::::::::::::::::::::::`  :::::::::::    `::::::::::::;    `:::::::::::::                
           ';;;;;;;;;;;;;;;;;;;;;;;;;;;;;;, ::::::::::::::::::::::::::::. :::::::::::     ,;;::::::::::;   ;:;:::::::::;.                
          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;':::::::::::::::::::::::::::::`:::::::::::      ;;;::::::::::: ::::::::::::::                 
         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;++'::::::::::::::::::::::::::::::::::::::::       ;:::::::::;;:;:;:;:::::::::                  
        ';;;;;;;;;;;;;;;';'';;;;;;;;;;;;;'+++;:::::::::::::::::::::::::::::::::::::::        ::::::::::::::::::::::::;                   
       ;;;;;;;;;;;;;;;`       `;;;;;;;;;'+++++:::::::::::::::::::::::::::::::::::::::        .:::::::::::::::::::::::                    
      `;;;;;;;;;;;;;             :;;;;;;+++++++:::::::::.       `::::::::::::::::::::         :::::::::::::::::::;::`                    
      ;;;;;;;;;;;;.                ;;;;++++++++;::::::             ,:::::::::::::::::          ::::::::::::::::::::,                     
     ,;;;;;;;;;;;                   ;''+++++++++::::.                ::::::::::::::::           :::::::::::::::::::                      
     ;;;;;;;;;;;                     ;++++++++++:::`                  :::::::::::::::           `:::::::::::::::::                       
    `;;;;;;;;;;                       +++++++++++:`                    ::::::::::::::            .;::::::::::::::                        
    ;;;;;;;;;;:                      ::++++++++++.                      :::::::::::::             ;:::::::::::::`                        
    ;;;;;;;;;;                       ::'+++++++++`                      ,::::::::::::            `;:::::::::::::;                        
   `;;;;;;;;;,                      `:::++++++++;:                       ::::::::::::            :;:::::::::::::::                       
   :;;;;;;;;;                       ,:::++++++++;'                       ,:::::::::::           :::::::::::::::::::                      
   ';;;;;;;;;```````````````````````;;:;;++++++';;                        :::::::::::          ::::::::::::::::::::.                     
   ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;+++++++++++;;;                        :::::::::::         ,::::::::::::::::::;::                     
   ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;+++++++++++;;;                        :::::::::::        `::::::::::::::::::::::;                    
   ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;+++++++++++;;;`                       ,::::::::::        :;;:::::::::::::::::::::;                   
   ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;+++++++++++;;;`                       ,::::::::::       ;::::::::::::::::::::::::;,                  
   ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;+++++++++++;;;`                       ,::::::::::      :::::::::::::: ;;;;:::::::::.                 
   ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;+++++++++++;;;                        :::::::::::     ,::::::::::::;   ;:::::::::::;                 
   ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;+++++++++++;;;                        :::::::::::    `:::::::::;:::    `:;:::::::::::                
   ';;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;+++++++++++;;'                        :::::::::::    :::::::::::::`     ,:::::::::::::               
   ;;;;;;;;;;                       :::::::::::.                         `:::::::::::   ::;::::::::::,       :::::::::::;:,              
   ,;;;;;;;;;.                      .:::::::::::                         ::::::::::::  ::::::::::::;;         :;:::::::::::.             
    ;;;;;;;;;'                       :::::::::::`                       `:::::::::::: ,:::::::::::::           :::::::::::::             
    ;;;;;;;;;;`                      ::::::::::::                       :::::::::::::`:::::::::::::            .:::::::::::::            
    :;;;;;;;;;;                      .::::::::::::                     ,:::::::::::::;::::::::::::.             ::;:::::::::::           
     ;;;;;;;;;;;                     ,++++++++++':,                   .:::::::::::::':::::::::::;:               ;:::::::::;:;,          
     ';;;;;;;;;;:                   `;'+++++++++:::,                 ,:::::::::::::'';::;:::::::;                 :::::::::::::`         
      ;;;;;;;;;;;;                 `;;;++++++++;:::::               ::::::::::::::;'':::::::::::                  `:::::::::::::         
      :;;;;;;;;;;;'`              ,;';;'+++++++::::::::           ,:::::::::::::::'''::::::::::`                   ,::::::::::::;        
       ';;;;;;;;;;;;;           .';;;;;;'++++':::::::::::,`   `,::::::::::::;''''''''''''';:::,````           ``````:;::::::::::::::::.  
        ;;;;;;;;;;;;;;';.` `.:';;;;;;;;;;++++'::::::::::::::::::::::::::::::;''''''''''''';:::::::::.         ,:::::::::::::::::::::::.  
        .;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;+++:::::::::::::::::::::::::::::::;''''''''''''';:::::::::.         ,::::::;::::::::::::::::.  
         ,;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;+::::::::::::::::::::::::::::::::;''''''''''''';:::::::::.         ,:::::::::::::::::::::::.  
          :;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; ::::::::::::::::::::::::::::; ::;''''''''''''';:::::::::.         ,:::::::::::::::::::::::.  
           .;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;   :::::::::::::::::::::::::::  ::;''''''''''''';:::::::::.         ,:::::::::::::::::::::::.  
             ';;;;;;;;;;;;;;;;;;;;;;;;;;,     .::::::::::::::::::::::::   ::;''''''''''''';:::::::::.         ,:::::::::::::::::::::::.  
              ,;;;;;;;;;;;;;;;;;;;;;;;'         :::::::::::::::::::::,    ::;''''''''''''';:::::::::.         ,:::::::::::::::::::::::.  
                :;;;;;;;;;;;;;;;;;;;'             ,::::::::::::::::,      ::;''''''''''''';:::::::::.         :;::::::::::::::::::::::.  
                  .;;;;;;;;;;;;;;;:                 `::::::::::::`        ::;';;;;;;;;;;;;;:::::::::.         ,:::::::::::::::::::::::.  
                      ,;;;;;;;;.                          ```                                                                            
                                                                                                                                         
                                                                                                                                         
                                                                                                                                         
                                                                                                                                         
                                                                                                                                         
                                                                                                                                         
                                                                                                                                         
                                                                                                                                         
                                                                                                                                         
                                                                                                                                         
                                                                                                                                         
                                                                                                                                         
                                                                                                                                         
</pre>
]]></content>
        </item>
        
        <item>
            <title>Down a rabbit hole - Docker</title>
            <link>http://blog.kablamo.org/articles/docker/</link>
            <pubDate>Wed, 13 Nov 2013 00:00:00 +0000</pubDate>
            
            <guid>http://blog.kablamo.org/articles/docker/</guid>
            <description>I have been in a rabbit hole for the last week. I started looking at Docker.
Its a really interesting project that all the hosting providers seem to be moving towards. Its helpful at first to think of Docker as a really fast and small virtual machine. You can put an operating system in a virtual machine, setup all the dependencies and permissions, and then configure and install your app. Its encapsulates your web app and makes it easy to move around.</description>
            <content type="html"><![CDATA[<p>I have been in a rabbit hole for the last week.  I started looking at
<a href="http://www.docker.io/">Docker</a>.</p>
<p>Its a really interesting project that all the hosting providers seem to be
moving towards.  Its helpful at first to think of Docker as a really fast and
small virtual machine.  You can put an operating system in a virtual machine,
setup all the dependencies and permissions, and then configure and install your
app.  Its encapsulates your web app and makes it easy to move around.
Thats what docker does too except a docker container is an operating system
primitive - an <a href="http://linuxcontainers.org/">LXC</a>.  Which means its much faster
and smaller than a virtual machine and that makes it much easier to work with.</p>
<p>Docker also has a builtin version control system.  You can install a base
operating system like Ubuntu in your container and then commit that change.
Then you can install some dependencies and commit that change.  This commit
history also allows you to reuse different commits across different containers.</p>
<p>Docker also has builtin deployment that allows you to push your containers to
public (or private) repositories similar to CPAN or Ruby gems or pypi.</p>
<p>But I said this was a rabbit hole.  Because when I started playing with Docker
I realized its written in Go.  So I started learning <a href="http://golang.org/">Go</a>.
More on that tomorrow.</p>
<pre style="font: 4px/2px monospace; color: #333; background: transparent; border: 0px; border-radius: 0; box-shadow: 0 0 0 0;">





                                                              '''''''''''';
                                                              '''''''''''';
                                                              ''::;;::;;:';
                                                              ''::''::'':';
                                                              ''::''::'':';
                                                              ''::''::'':';
                                                              ''::''::'':';
                                                              ''::''::'':';
                                                              ''::''::'':';
                                                              ''::''::'':';
                                         ''''''''''''''''''''''':::::::::';
                                         ''''''''''''''''''''''''''''''''';                          ''
                                         '':::::::::':::::::::;':::::::::';                         ''''.
                                         '':;';:''::':'::''::';'::''::'':';                         '':'',
                                         '':;';:''::':'::''::';'::''::'':';                        '':::''`
                                         '':;';:''::':'::''::';'::''::'':';                        ''::::''
                                         '':;';:''::':'::''::';'::''::'':';                        ';:::::''
                                         '':;';:''::':'::''::';'::''::'':';                       ,'::::::''.
                                         '':;';:''::':'::''::';'::''::'':';                       ;':::::::''
                                         '':;';:''::':'::''::';'::''::'':';                       '':::::::;'
                                         '':::::::::':::::::::;':::::::::';                       ''::::::::';
                               ''''''''''''''''''''''''''''''''''''''''''''''''''''''             ''::::::::'' `,;'':.
                               '':::::::::':::::::::';::::::::;':::::::::':::::::::''             ;'::::::::'''''''''''':
                               '';:;';:'':':;'::''::';';:''::';'::''::'':':''::'':;''             `'::::::::''';::::::'''',
                               '';:;';:'':':;'::''::';';:''::';'::''::'':':''::'':;''              '':::::::::::::::::::;''
                               '';:;';:'':':;'::''::';';:''::';'::''::'':':''::'':;''              '':::::::::::::::::::;';
                               '';:;';:'':':;'::''::';';:''::';'::''::'':':''::'':;''              .';::::::::::::::::::''
                               '';:;';:'':':;'::''::';';:''::';'::''::'':':''::'':;''               '':::::::::::::::::''
                               '';:;';:'':':;'::''::';';:''::';'::''::'':':''::'':;''               `'':::::::::::::::''.
                               '';:;';:'':':;'::''::';';:''::';'::''::'':':''::'':;''             .'''::::::::::::::'''`
                               '';:;';:'':':;'::;'::';';:''::';'::;'::';:':''::'':;''          .'''''::::::::::::'''''
                      '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''';:::::::''''''''''
                      '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''';:::::::::::''''';.
                      '':::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::''
                      '':::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::''
                      ''::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::''
                      '':::::::::::::::::::::::::::::::'::::::::::::::::::::::::::::::::::::::::::::::::''         ;
               ':     ''::::::::;;::::::::::::::::::::''':::::::::::::::::'':::::::::::::::::::::':::::''         ''
              '''',   ''::::::;'''':::::::::::::::::'''''';:::::::::::::'''''';::::::::::::::::;'''';::''       '''''
            '''''''''''';''''''''''''';::::::::;''''''''''''''::::::;'''''''''''''';::::::::'''''''''''';,,:'''''''''',
        .'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''';
                      '';;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;''
                      ,';;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;''.
                       '';;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;''
                       '';;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;''
                       '';;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;''
                        '';;;;;;;;;;;;;;;;;;;;;;;;`.`;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;'':
                        '';;;;;;;;;;;;;;;;;;;;;;;`''``;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;'''
                        .'';;;;;;;;;;;;;;;;;;;;;;`'''`;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;'''
                         '';;;;;;;;;;;;;;;;;;;;;;`'''`;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;'''
                         .'';;;;;;;;;;;;;;;;;;;;;;```;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;'''
                          '';;;;;;;;;;;;;;;;;''';;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;'''
                           '''''''''''''''''''';;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;'''
                           `''''''''''''';.````;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;'';
                            :';........`````````;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;'''`
                             ;''..........``````;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;'''
                              ;''..............``;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;''':
                               ;''................;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;''''
                                .'':...............;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;''''`
                                  '''...............;;;;;;;;;;;;;;;;;;;;;;;;;;;''''.
                                   :'''..............;;;;;;;;;;;;;;;;;;;;;;;'''''`
                                     ''''.............;;;;;;;;;;;;;;;;;;;''''''
                                       ;'''',...........;;;;;;;;;;;;;'''''''
                                         `'''''';:........;;;;'''''''''':
                                             :''''''''''''''''''''';.
                                                  `,:;;;;;;,.



                          .`
                         ''';                                             ''':
                         ''''                                             ''''
                         ''''                                             ''''
                         ''''                                             ''''
                         ''''                                             ''''
                         ''''                                             ''''
               ;'''''.   ''''         ;'''''.                '''''',      ''''     `':         ,''''''                 :'''
             '''''''''': ''''       '''''''''''           `'''''''''':    ''''    :'''       ,''''''''''            .'''''':
           :'''''''''''''''''     :'''''''''''''         ;''''''''''''    ''''   :''''      ''''''''''''';         '''''''':
          ;''''''''''''''''''    ;'''''''''''''''       ''''''''''''''    ''''  :'''''     ''''''''''''''''       '''''''''
         .'''''      ;'''''''   .'''''      ;'''''     :'''''      :',    '''' :'''''     ''''':      '''''.     ''''''
         '''';         ''''''   '''';         '''',    '''':              '''':'''''     ,''''         .''''    .''''`
        :''''           '''''  :''''           ''''   ;''''               '''''''''      ''''          ;''''    ''''`
        ''''            ;''''  ''''            ;'''   ''''                ''''''''       ''';         ''''''    ''''
        ''''             ''''  ''''             ''';  ''''                '''''''       ''''         ''''';    :'''
        '''.             ''''  '''.             ''''  '''.                ''''''        ''''        '''''.     ''''
        '''              ''''  '''              ''''  '''                 '''''         ''''      `'''''       ''''
        '''.             ''''  '''.             ''''  '''.                '''''.        ''''     ,'''''        ''''
        ''';             ''''  ''';             ''''  ''';                ''''''.       ''''    ;'''''         ''''
        ''''            ,''',  ''''            ,''',  ''''                '''''''.      `''':  ''''''          ''''
        ;''':           ''''   '''':           ''''   :''':               ''''''''`      '''' ''''';           ''''
         ''''`         '''''    ''''.         '''''    ''''.              '''''''''`     ,'''''''',            ''''
         :'''''       '''''     ;'''''       '''''     ;'''''       ;     '''' '''''`     '''''''`    :'       ''''
          ''''''',,;''''''`      ''''''',,:''''''`      ''''''';,;''''    ''''  '''''`     ''''''';;'''''      ''''
           ''''''''''''''.        ''''''''''''''`        '''''''''''''    ''''   '''''      '''''''''''''      ''''
            ;'''''''''''           ;'''''''''''           ''''''''''''    ''''    ''''`      '''''''''''`      ''''
              ;'''''''               ;'''''''               ''''''''`     .''`     '''         ;'''''',        `'':









</pre>
]]></content>
        </item>
        
        <item>
            <title>Down a rabbit hole - Go-lang and its decentralized CPAN</title>
            <link>http://blog.kablamo.org/articles/go/</link>
            <pubDate>Wed, 13 Nov 2013 00:00:00 +0000</pubDate>
            
            <guid>http://blog.kablamo.org/articles/go/</guid>
            <description>I have been in a rabbit hole for the last week. I started by looking at Docker (See my previous post). It turns out Docker is written in Go and so somehow I ended up learning Go. Well &amp;ldquo;learning&amp;rdquo; is an overstatement. I&amp;rsquo;ve read about it for a few days and wrote a tiny bit of code.
But anyway, the coolest thing about Go so far is its decentralized libraries. Centralized collections of libraries have been all the rage the last few years and it seems like all the languages have gotten hip to that &amp;ndash; CPAN, rubygems, pypi, npm, etc.</description>
            <content type="html"><![CDATA[<p>I have been in a rabbit hole for the last week.  I started by looking at Docker
(<a href="http://blog.kablamo.org/2013/11/13/docker/">See my previous post</a>).  It turns
out Docker is written in Go and so somehow I ended up learning
<a href="http://golang.org/">Go</a>.  Well &ldquo;learning&rdquo; is an overstatement.  I&rsquo;ve read
about it for a few days and wrote a tiny bit of code.</p>
<p>But anyway, the coolest thing about Go so far is its decentralized libraries.
<em>Centralized</em> collections of libraries have been all the rage the last few years
and it seems like all the languages have gotten hip to that &ndash; CPAN, rubygems,
pypi, npm, etc.</p>
<p>But one of the biggest problems with publishing Perl modules on CPAN is how
difficult it is to do.  Sure its easy after you figure out the PAUSE website
exists, create a PAUSE account, read all the Dist::Zilla docs and some of the
source code, and write your own personalized plugin.  After that it just takes
one little command.</p>
<h1 id="how-it-works-in-go">How it works in Go</h1>
<p>If you want to use some libraries in your Go code, it looks like this:</p>
<pre><code>import (
    &quot;log&quot; 
    &quot;time&quot;
    &quot;errors&quot;
    &quot;github.com/dotcloud/docker&quot;
    &quot;github.com/fsouza/go-dockerclient&quot;
)
</code></pre>
<p>The first 3 are core libraries distributed as part of Go.  But the last two you
have to download and install yourself.  Doing that is very simple:</p>
<pre><code>export GOROOT=$HOME/go
go get github.com/dotcloud/docker
</code></pre>
<p>This downloads all the dependencies too.  Of course.</p>
<p>The next question you will ask me is how do people learn about new libraries in
a decentralized world?  There are websites like
<a href="http://gowalker.org/">http://gowalker.org/</a> which scrape GitHub&rsquo;s recent updates
page.  They also do this for BitBucket, Google Project Hosting, and a couple
other sites.</p>
<p>This new language has shiny modern features and is very easy to get up and
running.</p>
<pre style="font: 4px/2px monospace; color: #333; background: transparent; border: 0px; border-radius: 0; box-shadow: 0 0 0 0;">
                              ,'#@@@@@@@#+';;;''#@@@@@#,                            
                          ;@@@@#;.                    '@@@;                         
                       ;@@@:                             ,@@@                       
                     #@@.                                   +@@                     
                   @@+                                        +@;   +@@@@@#         
         ,,      +@+                               #@@@@+       @@@@#  @@       
     .@@@@@@@@' @@      .+@@@+.                 :@        @,     @@         @@      
    @@:      .@@;     ++       #+              @            @     #@         @@     
   @@         @;               @            @              @     @@         @     
  ;@         @#    ,:             '        @                @     @' :    #+    
  @         +@     ;               '        ;                  ,     @@@@;    ,@    
  @      '' @     @                 @       #                  @     '@@@@     @    
 :@     @@@@:    :                   .     ,                          @@@@     @    
 ;#     @@@@     @                   @     #  +@@@:             +     ,@@     ,@    
 :@     @@@    : ,@@@@             +     @ #@@@@@:            @      @    @;    
  @     .@@     @@@@@                  @ @@@@@@@            @      :@     @     
  @      @,     . @@@@@@@                  @ @@@@@:@            @       @    @:     
  ;@     @      . @@@@@.@.                 @ @@@@@            #       #' .@'      
   @@   '#       @@@@ ,            :     ; ,@@@@@             :       @@.       
    @@. @.       # @@@@@'            @      ;  #@#             :         @:         
     ,@@@        @  '@#.             +      @                  @         @:         
       .@         :                 '        @                '          :@         
       '#         +                 ;         '              .,           @         
       @:          @               @  @@@@@@,  @            ;,            @         
       @          @             @  @@@@@@@@.  @:        .@              @,        
       @             ;+         #,  #@@@@@@@@'    +@+::+@#                ++        
       @               ;@;,.,'@:    @@@@@@@@@@:                           :@        
       @                          #, ,@@@@@@   @                           @        
      .@                         @              '                          @        
      ;#                                       @                         @        
      ++                        :                ;                         @        
      +'                                         '                         @        
      #:                         @    ;@;@'@     @                         @      
      @,                          :+''   @  .@@@:                          @.       
      @,                                 @   :                             @.       
      @.                            ,    @   .                             @,       
      @,                            ;    @                                 @,       
      @,                            '    @                                 @:       
      #:                            :    @                                 @:       
      #;                             +  @ :  @                             @:       
      ++                              +;   ;.                              @:       
      ;#                                                                   @:       
      ,@                                                                   @:       
       @                                                                   @:       
       @                                                                   @,       
       @                                                                   @,       
       @                                                                 @,       
       @,                                                                  @,       
       +'                                                                  @,       
       :@                                                                  @:       
       .@                                                                  @:       
        @                                                                  @:       
        @                                                                  #;       
        @                                                                  #;       
        @                                                                  +@@,     
      '#@                                                                  '+  ;@.  
   +@.  @                                                                  '#     @ 
 ';     @                                                                  ;@      @
.       @                                                                  :@      #
@       @                                                                  ,@    @ @
+ @  ,@                                                                  .@@    # 
 @    ':@                                                                   +; .+ 
 ,.  @ .@                                                                   @     
   ;   .@                                                                   @       
       ,@                                                                   @       
       :@                                                                   @       
       ;#                                                                   @       
       '#                                                                   @       
       '+                                                                   @       
       +'                                                                   @       
       #;                                                                   @       
       #;                                                                   @       
       @:                                                                   @     
       @:                                                                   @.      
       @,                                                                   @,      
       @,                                                                   @,      
       @,                                                                   @,      
       @,                                                                   @,      
       @.                                                                   @.      
       @.                                                                   @     
       @.                                                                   @       
       @.                                                                   @       
       @,                                                                   @       
       @,                                                                   @       
       @,                                                                  .@       
       @,                                                                  '#       
       @:                                                                  @:       
       @:                                                                  @        
       #;                                                                  @        
       +'                                                                 ,@        
       '+                                                                 #'        
       ,@                                                                 @         
        @                                                                         
        @.                                                               @'         
        ;@                                                               @          
         @                                                              +@          
         '@                                                             @           
          @,                                                           #@           
          .@                                                           @            
           #@                                                         @:            
            @#                                                       @#             
             @+                                                     @@              
              @#                                                  .@@               
               @@@#                                              @   .#             
             ''    #                                            @      @            
            @       @                                          @        '           
           @         @                                       @@+        ;           
          :   .       @+                                  :@@+  +.    @  +          
          @  @      @, #@@;                            ;@@@,     ;    .  @          
          ' @     ':     ,@@@#:                   :+@@@@:         #    @ @          
          @ :    #           ;@@@@@@@#####@@@@@@@@@+.              @   ; .          
           @    @                  ,:;''';;:,                     @  #,           
            ;@##                                                     `             
</pre>
<p>(the golang mascot)</p>
]]></content>
        </item>
        
        <item>
            <title>My contribution to the Linux ate my RAM problem</title>
            <link>http://blog.kablamo.org/articles/linux_ate_my_ram/</link>
            <pubDate>Tue, 12 Nov 2013 00:00:00 +0000</pubDate>
            
            <guid>http://blog.kablamo.org/articles/linux_ate_my_ram/</guid>
            <description>I can never remember how to know how much free memory I have.
The Linux kernel claims most of the operating system&amp;rsquo;s memory. That doesn&amp;rsquo;t mean the operating system is out of memory. It means the kernel has claimed it and is managing it. The problem is that the Linux kernel defines &amp;lsquo;free&amp;rsquo; memory differently than any reasonable user. There are excellent shiny reasons for that, but as a user I don&amp;rsquo;t really care.</description>
            <content type="html"><![CDATA[<p>I can never remember how to know how much free memory I have.</p>
<p>The Linux kernel claims most of the operating system&rsquo;s memory.  That doesn&rsquo;t
mean the operating system is out of memory.  It means the kernel has claimed it
and is managing it.  The problem is that the Linux kernel defines &lsquo;free&rsquo; memory
differently than any reasonable user.  There are excellent shiny reasons for
that, but as a user I don&rsquo;t really care.</p>
<pre><code>~ ⚡ free -m 
            total       used       free     shared    buffers     cached
Mem:          3822       2066       1755          0        147       1125
-/+ buffers/cache:        793       3029
Swap:         3394          0       3394
</code></pre>
<p>Experienced users and sysadmins will know from this means my system currently
has 3822 MB of total memory and 3029 MB of free memory.  Errr.  What?  See
<a href="http://www.linuxatemyram.com">linuxatemyram.com</a> for a more detailed
explanation.</p>
<p>I think the world deserves something easier to deal with.  So I wrote &lsquo;mem&rsquo;.
Use it like this:</p>
<pre><code>~ ⚡ mem
   927 MB used (24%)
  3823 MB total
</code></pre>
<p>Its a bash function.  I put the following in my
<a href="https://github.com/kablamo/dotfiles/blob/master/links/.bash/aliases.sh">.bashrc</a>:</p>
<pre><code>mem() {
    memfree=$( grep '^MemFree:' /proc/meminfo | awk '{ mem=($2)/(1024) ; printf &quot;%0.0f&quot;, mem }' )
    buffers=$( grep '^Buffers:' /proc/meminfo | awk '{ mem=($2)/(1024) ; printf &quot;%0.0f&quot;, mem }' )
    cached=$(  grep '^Cached:'  /proc/meminfo | awk '{ mem=($2)/(1024) ; printf &quot;%0.0f&quot;, mem }' )
    free=$( echo $memfree+$buffers+$cached | bc -l )

    total=$( grep '^MemTotal:' /proc/meminfo | awk '{ mem=($2)/(1024) ; printf &quot;%0.0f&quot;, mem }' )
    used=$( echo $total-$free | bc -l )
    pct=$( echo 100*$used/$total | bc -l )

    printf &quot;%5.f MB used (%.0f%%)\n%5.f MB total\n&quot; $used $pct $total
}
</code></pre>
<p>See also &lsquo;htop&rsquo; (sudo apt-get install htop).</p>
]]></content>
        </item>
        
        <item>
            <title>git-vspark plots your commits vertically with Term::Vspark</title>
            <link>http://blog.kablamo.org/articles/git-vspark/</link>
            <pubDate>Sun, 17 Mar 2013 00:00:00 +0000</pubDate>
            
            <guid>http://blog.kablamo.org/articles/git-vspark/</guid>
            <description>I added a git-vspark script to my App::Git::Spark CPAN module. It does the same thing as git-spark but instead of normal horizontal sparklines, it uses &amp;ldquo;vertical&amp;rdquo; sparklines. Here&amp;rsquo;s what that looks like:
$ git vspark --months 8 batman Commits by batman over the last 8 months total: 233 avg: 29 max: 69 12 ██▋ 18 ████ 69 ███████████████▏ 59 ████████████▉ 16 ███▌ 28 ██████▏ 12 ██▋ 19 ████▎  This effect is achieved using Term::Vspark.</description>
            <content type="html"><![CDATA[<p>I added a <strong>git-vspark</strong> script to my App::Git::Spark CPAN module.  It does the
same thing as <a href="https://github.com/kablamo/git-spark">git-spark</a> but instead of
normal horizontal sparklines, it uses &ldquo;vertical&rdquo; sparklines.  Here&rsquo;s what that
looks like:</p>
<pre><code>$ git vspark --months 8 batman
Commits by batman over the last 8 months
total: 233   avg: 29   max: 69
 12 ██▋
 18 ████
 69 ███████████████▏
 59 ████████████▉
 16 ███▌
 28 ██████▏
 12 ██▋
 19 ████▎
</code></pre>
<p>This effect is achieved using
<a href="https://metacpan.org/module/Term::Vspark">Term::Vspark</a>.  Its companion module
<a href="https://metacpan.org/module/Term::Spark">Term::Spark</a> is a small pure Perl
replacement for Zach Holman&rsquo;s original <a href="https://github.com/holman/spark">spark</a>
implementation and it now powers my git-spark script.</p>
<p>These libraries were fun little projects developed over the past few weeks
mainly by <a href="https://github.com/LuRsT">Gil Gonçalves</a> with a few pull requests
from myself.  Having them available on CPAN means you can easily use sparklines
in your own Perl code.</p>
]]></content>
        </item>
        
        <item>
            <title>Chinese zombie flashcards on GitHub (Catalyst &amp; Perl)</title>
            <link>http://blog.kablamo.org/articles/chinese-flashcards/</link>
            <pubDate>Thu, 28 Feb 2013 00:00:00 +0000</pubDate>
            
            <guid>http://blog.kablamo.org/articles/chinese-flashcards/</guid>
            <description>There seem to be quite a few Perl people learning Chinese so maybe this will be relevant here.
I created IIJO which is a Perl powered website that does 3 sided flashcards (Chinese, English, and Pinyin).
The main advantage IIJO has over Anki and other flashcard sites is that you can pick your flashcards from a dictionary so you don&amp;rsquo;t have to type all that stuff in yourself. It allows you to share word lists with others and the built in dictionary means that you don&amp;rsquo;t need to worry about the accuracy and completeness of other people who share wordlists.</description>
            <content type="html"><![CDATA[<p>There seem to be quite a few Perl people learning Chinese so maybe this will be
relevant here.</p>
<p>I created <a href="http://iijo.org">IIJO</a> which is a Perl powered website that does 3
sided flashcards (Chinese, English, and Pinyin).</p>
<p>The main advantage IIJO has over Anki and other flashcard sites is that you can
pick your flashcards from a dictionary so you don&rsquo;t have to type all that stuff
in yourself.   It allows you to share word lists with others and the built in
dictionary means that you don&rsquo;t need to worry about the accuracy and
completeness of other people who share wordlists.</p>
<p>The site does <a href="http://en.wikipedia.org/wiki/Spaced_repetition">spaced repetition</a>
like Anki.  But it has a different simpler user interface because Anki&rsquo;s 4
buttons after each flashcard <em>stresses me out.</em></p>
<p>If you want, you can just play with the <a href="http://iijo.org/dictionary">Chinese/English dictionary</a>.<br>
The goal here is to be able to look up a word then add it easily to one of your
existing word lists.</p>
<p>If you think there is something missing, check out the project on
<a href="http://github.org/kablamo/iijo.org">GitHub</a> and send me a pull request.  I&rsquo;m
using Perl, Catalyst, and SQLite.</p>
<p>Here are some of the things on my todo list:</p>
<ul>
<li>More analytics/stats/data for measuring progress using D3</li>
<li>Speech/pronunciation samples</li>
<li>Export to Anki</li>
<li>Some way to learn phrases instead of just characters</li>
</ul>
<h1 id="vampires-and-zombies">Vampires and zombies</h1>
<p>Btw, here&rsquo;s an interesting thing I learned about the Chinese language: the word
for <code>vampire</code> is the same word thats used for <code>zombie</code>.</p>
<center><p style="margin-bottom: .5em; font-size: 4em; font-weight: bold;">僵尸</p></center>
<p>This is because the Chinese merged the two concepts into a single vampire
zombie monster.  So Chinese zombies are stiff and walk around with their hands
straight out.  But they also bite their victim&rsquo;s necks and suck their blood
passing on the zombie infection.</p>
<p>They are also fast and angry and they often do kung fu.  You can&rsquo;t
kill them of course, however you can put them to sleep if you write a spell on a
yellow piece of paper and put it on their forehead.  But if it falls off, they
wake up and get angry again.  Strangest of all is that they do little
hops like bunnies instead of walking.</p>
<p>I highly recommend Liao Yiwo&rsquo;s book, <a href="http://www.amazon.com/The-Corpse-Walker-Stories-Bottom/dp/0307388379/ref=sr_1_1?ie=UTF8&amp;qid=1362603639&amp;sr=8-1&amp;keywords=corpse+walker"><em>Corpse Walker,</em></a>
which tells the fascinating history and origin of Chinese zombies.  You can read more
about jiangshi on <a href="http://en.wikipedia.org/wiki/Jiangshi">Wikipedia</a>.  And of
course there are YouTube videos:</p>
<iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/56Zvquhww80" frameborder="0" allowfullscreen></iframe>
]]></content>
        </item>
        
        <item>
            <title>Dist::Zilla::PluginBundle::DAGOLDEN is pretty awesome</title>
            <link>http://blog.kablamo.org/articles/how-to-learn-dist-zilla/</link>
            <pubDate>Wed, 20 Feb 2013 00:00:00 +0000</pubDate>
            
            <guid>http://blog.kablamo.org/articles/how-to-learn-dist-zilla/</guid>
            <description>I&amp;rsquo;ve been using Dist::Zilla for a couple years. It&amp;rsquo;s a powerful way to automate CPAN releases.
But learning how to use it was not as easy as I hoped.
I remember when Dist::Zilla first debuted. It was very exciting. But I think I may have drank too much of the cool aid becuase my expectations were very high when I finally sat down to learn it. I expected my experience to be composed entirely of rainbows and puppy dog tails.</description>
            <content type="html"><![CDATA[<p>I&rsquo;ve been using <a href="https://metacpan.org/module/Dist::Zilla">Dist::Zilla</a> for a
couple years.  It&rsquo;s a powerful way to automate CPAN releases.</p>
<p>But learning how to use it was not as easy as I hoped.</p>
<p>I remember when <code>Dist::Zilla</code> first debuted.  It was very exciting.  But I think
I may have drank too much of the cool aid becuase my expectations were very
high when I finally sat down to learn it.  I expected my experience to be
composed entirely of rainbows and puppy dog tails.</p>
<h2 id="writing-your-own-distini-or-pluginbundle-is-hard">Writing your own dist.ini or PluginBundle is hard</h2>
<p>Instead I found that creating a dist.ini or PluginBundle is fairly hard.  There
are a huge number of plugins and it&rsquo;s difficult for a newcomer to know which
are old, which are new, and how they work together.  If you look, for example,
at <code>Dist::Zilla::PluginBundle::DAGOLDEN</code> it uses 23 different plugins and the
<em>synopsis</em> is 132 lines long.</p>
<p>In retrospect, it was not reasonable to expect I could build something
comparable after a few minutes of perusing the docs.  It&rsquo;s more complex than
that.  So if you are looking to quickly add <code>Dist::Zilla</code> to your toolchain, you
need to use a PluginBundle and not write your own.</p>
<h2 id="how-to-quickly-add-distzilla-to-your-toolchain">How to quickly add Dist::Zilla to your toolchain</h2>
<p>One way is to just use <code>Dist::Zilla::PluginBundle::Basic</code>.  But this was not like
the promised land I had been dreaming of.  I wanted more.  So I kept looking.</p>
<p>Happily, there is a PluginBundle which I think works well as a reusable
component suitable for public consumption thats also very configurable.  I
doubt it&rsquo;s well known because the name sounds very personal.  That module is,
of course,
<a href="https://metacpan.org/module/Dist::Zilla::PluginBundle::DAGOLDEN">Dist::Zilla::PluginBundle::DAGOLDEN</a>.</p>
<p>I think the workflow it uses will work for many people.  Even if it
doesn&rsquo;t, reading the code is a great way to learn how to write your own
PluginBundle.  And because it&rsquo;s so comprehensive it&rsquo;s like having a up-to-date
map of the state of the art in <code>Dist::Zilla</code> plugins and how they work
together.</p>
<p>Here&rsquo;s what my dist.ini looks like:</p>
<pre><code>name    = App-Git-Ribbon
author  = Eric Johnson &lt;cpan at iijo dot nospamthanks dot org&gt;
license = Perl_5
copyright_holder = Eric Johnson
main_module = lib/App/Git/Ribbon.pm

[@DAGOLDEN]
no_spellcheck = 1
AutoMetaResources.bugtracker.rt = 0
AutoMetaResources.repository.github = user:kablamo
AutoMetaResources.bugtracker.github = user:kablamo
weaver_config = @FLORA
</code></pre>
]]></content>
        </item>
        
        <item>
            <title>CPAN release of App::Git::Ribbon, App::Git::Spark</title>
            <link>http://blog.kablamo.org/articles/cpan-release-git-ribbon-git-spark/</link>
            <pubDate>Tue, 12 Feb 2013 00:00:00 +0000</pubDate>
            
            <guid>http://blog.kablamo.org/articles/cpan-release-git-ribbon-git-spark/</guid>
            <description>I packaged up these scripts and released them on CPAN to make them a little easier to install and manage.
App::Git::Ribbon on CPAN
on GitHub
previous blog post
App::Git::Spark on CPAN
on GitHub
previous blog post</description>
            <content type="html"><![CDATA[<p>I packaged up these scripts and released them on CPAN to make them a little
easier to install and manage.</p>
<p><strong>App::Git::Ribbon</strong> <br>
on <a href="https://metacpan.org/module/App::Git::Ribbon">CPAN</a><br>
on <a href="https://github.com/kablamo/git-ribbon">GitHub</a><br>
previous <a href="/git-ribbon">blog post</a></p>
<p><strong>App::Git::Spark</strong> <br>
on <a href="https://metacpan.org/module/App::Git::Spark">CPAN</a><br>
on <a href="https://github.com/kablamo/git-spark">GitHub</a><br>
previous <a href="/git-spark-revisited">blog post</a></p>
]]></content>
        </item>
        
        <item>
            <title>git-ribbon</title>
            <link>http://blog.kablamo.org/articles/git-ribbon/</link>
            <pubDate>Sat, 02 Feb 2013 00:00:00 +0000</pubDate>
            
            <guid>http://blog.kablamo.org/articles/git-ribbon/</guid>
            <description>I wrote a little Perl script called git-ribbon to help me review the latest changes in a git repository.
The way I used to review changes was by reading through the git log. I try to do this every morning at work to keep up with whats going on. But I was having a few problems:
 Its hard to know exactly which changes are new. I want to review commits in the order they happened (instead of most recent first).</description>
            <content type="html"><![CDATA[<p>I wrote a little Perl script called
<a href="https://github.com/kablamo/git-ribbon">git-ribbon</a> to help me review the
latest changes in a git repository.</p>
<p>The way I used to review changes was by reading through the <code>git log</code>.  I try
to do this every morning at work to keep up with whats going on.  But I was
having a few problems:</p>
<ol>
<li>Its hard to know exactly which changes are new.</li>
<li>I want to review commits in the order they happened (instead of most recent first).</li>
<li><code>git log</code> diff output can be hard to read and may not have enough context
&ndash; sometimes I want a side by side diff like I get from <code>vimdiff</code> or <code>git difftool</code>.</li>
</ol>
<p>Basically I wanted a quick and easy way to review the latest changes in a way
that feels a little more like an RSS feed.  So I wrote this script.</p>
<h2 id="how-to-use-git-ribbon">How to use git-ribbon</h2>
<p><strong>First</strong> mark your current place in the commit history.  This command will
place a tag named _ribbon at origin/master.  Basically its a bookmark at your
current location.</p>
<pre><code>⚡ git ribbon --save
</code></pre>
<p><strong>Next</strong>, pull the latest changes made by your fellow conspirators from the
remote repository.</p>
<pre><code>⚡ git pull
</code></pre>
<p><strong>Then</strong> use <code>git ribbon</code> to review only the changes that have occurred since _ribbon:</p>
<pre><code>⚡ git ribbon
Eric Johnson 6 weeks ago ecf43db
Css tweaks.
root/html/calculator/realCost.tt

press 's' to skip 

Eric Johnson 4 weeks ago 9595fa0
fix css margin class.
root/css/networth.css
root/css/style.less
root/css/style.less.old
root/html/calculator/realCost.tt
root/html/fi.tt

press 's' to skip 

Eric Johnson 2 weeks ago 5ef0fb2
Added daysPerYear.
lib/Networth/Controller/Calculator.pm
lib/Networth/Out/RealCost.pm
root/html/calculator/realCost.tt

press 's' to skip 
</code></pre>
<p>The script will pause and wait for input when it prints <code>press 's' to skip</code>.
If you type anything other than <code>s</code>, it will show you the side by side diff
using <code>git difftool</code>.</p>
<p><a href="http://farm9.staticflickr.com/8107/8457314152_7f8b3c955c_b.jpg" title="click to view large version"><img src="http://farm9.staticflickr.com/8107/8457314152_7f8b3c955c.jpg" width="500" height="201" alt="vimdiff"></a></p>
<p>After you have reviewed all the changes, be sure to mark your place again so
its ready to go next time you want to do a pull:</p>
<pre><code>git ribbon --save
</code></pre>
<h2 id="bonus-tips">Bonus tips</h2>
<p>In your .gitconfig try this:</p>
<pre><code>[diff]
    tool = vimdiff
</code></pre>
<p>The default colors for vimdiff look like they were created by strange clowns so
try this instead:</p>
<pre><code>⚡ mkdir -p ~/.vim/colors/
⚡ wget https://github.com/kablamo/dotfiles/blob/master/links/.vim/colors/iijo.vim -O ~/.vim/colors/iijo.vim
⚡ echo &quot;colorscheme iijo&quot; &gt;&gt; ~/.vimrc
</code></pre>
<p>Then learn to use vimdiff:</p>
<ul>
<li>To switch windows type <code>ctl-w l</code> and <code>ctl-w h</code>.
For more help type <code>:help window-move-cursor</code>.</li>
<li>To open and close folds type <code>zo</code> and <code>zc</code>.
For more help type <code>:help fold-commands</code>.</li>
<li>To close vimdiff with less typing try <code>ZZ</code>.</li>
</ul>
<h2 id="alternatives-to-vimdiff">Alternatives to vimdiff</h2>
<p>If you don&rsquo;t want to invest the time just yet to learn vim, use an alternative like meld, opendiff,
p4merge, xxdiff, etc.  Side by side diffs are worth it!</p>
<h2 id="see-also">See also</h2>
<p>This script was inspired by a great <a href="http://gitready.com/advanced/2011/10/21/ribbon-and-catchup-reading-new-commits.html">blog
post</a>
on gitready.com which has a number of awesome git tricks for both beginners and
advanced users.</p>
<p>I also ended up writing a <a href="https://github.com/kablamo/vim-ribbon">vim plugin</a>
that is probably better user experience if you very comfortable in vim.</p>
]]></content>
        </item>
        
        <item>
            <title>Whats in your $PERL5LIB?</title>
            <link>http://blog.kablamo.org/articles/whats-in-your-perl5lib/</link>
            <pubDate>Tue, 29 Jan 2013 00:00:00 +0000</pubDate>
            
            <guid>http://blog.kablamo.org/articles/whats-in-your-perl5lib/</guid>
            <description>Ever wonder whats in your $PERL5LIB? Here is one way to find out:
⚡ echo $PERL5LIB .:./lib:/home/eric/perl5/perlbrew/perls/perl-5.16.2/lib/perl5:/home/eri c/perl5/perlbrew/perls/perl-5.16.2/lib/perl5/i686-linux:/home/eric/perl 5/perlbrew/perls/perl-5.16.2/lib/perl5/i686-linux-gnu-thread-multi-64in t:/home/eric/perl5/perlbrew/perls/perl-5.16.2/lib/site_perl:/home/eric/ perl5/perlbrew/perls/perl-5.16.2/lib/5.16.2  My human eyeballs are not equipped to parse that. Unhelpful. So I put this in my .bashrc:
alias perl5lib=&#39;perl -E &amp;quot;say join \&amp;quot;\n\&amp;quot;, split \&amp;quot;:\&amp;quot;, \$ENV{PERL5LIB}&amp;quot;&#39;  Here it is in action:
⚡ perl5lib . ./lib /home/eric/perl5/perlbrew/perls/perl-5.16.2/lib/perl5 /home/eric/perl5/perlbrew/perls/perl-5.16.2/lib/perl5/i686-linux /home/eric/perl5/perlbrew/perls/perl-5.16.2/lib/perl5/i686-linux-gnu-thread-multi-64int /home/eric/perl5/perlbrew/perls/perl-5.16.2/lib/site_perl /home/eric/perl5/perlbrew/perls/perl-5.16.2/lib/5.16.2  Better.</description>
            <content type="html"><![CDATA[<p>Ever wonder whats in your $PERL5LIB?  Here is one way to find out:</p>
<pre><code>⚡ echo $PERL5LIB
.:./lib:/home/eric/perl5/perlbrew/perls/perl-5.16.2/lib/perl5:/home/eri
c/perl5/perlbrew/perls/perl-5.16.2/lib/perl5/i686-linux:/home/eric/perl
5/perlbrew/perls/perl-5.16.2/lib/perl5/i686-linux-gnu-thread-multi-64in
t:/home/eric/perl5/perlbrew/perls/perl-5.16.2/lib/site_perl:/home/eric/
perl5/perlbrew/perls/perl-5.16.2/lib/5.16.2
</code></pre>
<p>My human eyeballs are not equipped to parse that.  Unhelpful.  So I put this in
my .bashrc:</p>
<pre><code>alias perl5lib='perl -E &quot;say join \&quot;\n\&quot;, split \&quot;:\&quot;, \$ENV{PERL5LIB}&quot;'
</code></pre>
<p>Here it is in action:</p>
<pre><code>⚡ perl5lib
.
./lib
/home/eric/perl5/perlbrew/perls/perl-5.16.2/lib/perl5
/home/eric/perl5/perlbrew/perls/perl-5.16.2/lib/perl5/i686-linux
/home/eric/perl5/perlbrew/perls/perl-5.16.2/lib/perl5/i686-linux-gnu-thread-multi-64int
/home/eric/perl5/perlbrew/perls/perl-5.16.2/lib/site_perl
/home/eric/perl5/perlbrew/perls/perl-5.16.2/lib/5.16.2
</code></pre>
<p>Better.</p>
]]></content>
        </item>
        
        <item>
            <title>git-spark revisited</title>
            <link>http://blog.kablamo.org/articles/git-spark-revisited/</link>
            <pubDate>Sun, 27 Jan 2013 00:00:00 +0000</pubDate>
            
            <guid>http://blog.kablamo.org/articles/git-spark-revisited/</guid>
            <description>A few days ago I wrote about my git-spark Perl script. It counts how many commits a user has in a git project and makes a little graph and displays it on the command line.
However I also said it wasn&amp;rsquo;t very useful becuase you can&amp;rsquo;t compare one graph with another because the scale changes when different graphs have different min and max values. For example these two data series produce identical graphs despite have very different data.</description>
            <content type="html"><![CDATA[<p>A <a href="http://blog.kablamo.org/git-spark-plots-your-commit-history/">few days ago</a>
I wrote about my <a href="https://gist.github.com/4598480">git-spark</a> Perl script.  It
counts how many commits a user has in a git project and makes a little graph
and displays it on the command line.</p>
<p>However I also said it wasn&rsquo;t very useful becuase you can&rsquo;t compare one graph
with another because the scale changes when different graphs have different min
and max values.  For example these two data series produce identical graphs
despite have very different data.</p>
<pre><code>⚡ spark 1 2 3 4 5
▁▂▄▆█
⚡ spark 10 20 30 40 50
▁▂▄▆█
</code></pre>
<p>So I put on my thinking cap and came up with the following solution:</p>
<pre><code>⚡ spark 50 1 1 2 3 4 5
█▁▁▁▁▁▁
⚡ spark 50 1 10 20 30 40 50
█▁▂▃▅▆█
</code></pre>
<p>I just need to prepend a max and a min to the data to get consistent scaling
and now I can compare graphs.</p>
<p>For git-spark, I now assume the min is zero and you can pass in the max using
the &ndash;scale option.  (Note that I chopped off the max/min characters from
the spark output as they are distracting.)</p>
<p>I also decided to print out the number of commits which helps with the
scaling issue.  And while I was in there I got it to calculate the total,
average, and maximum number of commits for that duration.</p>
<p>Here is an example.  It doesn&rsquo;t really need the &ndash;scale option because the data
is so close anyway, but it shows how to use it:</p>
<pre><code>⚡ git spark --days 14 --scale 23 Stegosaurus
Commits by Stegosaurus over the last 14 days
total: 95   avg: 7   max: 23
10 15 6 23 5 0 0 1 15 0 17 3 0 0
▄▅▂█▂▁▁▁▅▁▆▁▁▁
⚡ git spark --days 14 --scale 23 Triceratops
Commits by Triceratops over the last 14 days
total: 90   avg: 7   max: 22
1 12 3 11 3 0 0 6 16 3 13 22 0 0
▁▄▁▄▁▁▁▂▅▁▄▇▁▁
</code></pre>
<p>Of course you still need to consider the quality of commits and not just how
many there are.</p>
]]></content>
        </item>
        
        <item>
            <title>git-spark plots your commit history</title>
            <link>http://blog.kablamo.org/articles/git-spark-plots-your-commits/</link>
            <pubDate>Wed, 23 Jan 2013 00:00:00 +0000</pubDate>
            
            <guid>http://blog.kablamo.org/articles/git-spark-plots-your-commits/</guid>
            <description>I recently rediscovered spark, Zach Holman&amp;rsquo;s cool little sparklines graphing tool for the command line. I used a little Perl to mash it up with &amp;lsquo;git log&amp;rsquo; and came up with git-spark which works like this:
⚡ git spark --hours 8 Commits by Godzilla over the last 8 hours ▃▃▁▆▅▁▁▃█ ⚡ git spark -d 14 HulkHogan Commits by HulkHogan over the last 14 days ▇▅▄▁▁▄▅▂█▂▁▁▁▅ ⚡ git spark -w 52 Tarzan Commits by Tarzan over the last 52 weeks ▃▁▂▃▃▃▂▁█▆▁▄▄▃▂▂▁▁▂▃▃▄▃▃▂▃▁▁▁▁▁▂▂▃▆▅▂▁▄▃▂▄▄▄▁▂▁▁▂▂▂▃  And heres the usage/help:</description>
            <content type="html"><![CDATA[<p>I recently rediscovered <a href="https://github.com/holman/spark">spark</a>, Zach Holman&rsquo;s
cool little sparklines graphing tool for the command line.  I used a little
Perl to mash it up with &lsquo;git log&rsquo; and came up with
<a href="https://gist.github.com/4598480">git-spark</a> which works like this:</p>
<pre><code>⚡ git spark --hours 8
Commits by Godzilla over the last 8 hours
▃▃▁▆▅▁▁▃█
⚡ git spark -d 14 HulkHogan
Commits by HulkHogan over the last 14 days
▇▅▄▁▁▄▅▂█▂▁▁▁▅
⚡ git spark -w 52 Tarzan
Commits by Tarzan over the last 52 weeks
▃▁▂▃▃▃▂▁█▆▁▄▄▃▂▂▁▁▂▃▃▄▃▃▂▃▁▁▁▁▁▂▂▃▆▅▂▁▄▃▂▄▄▄▁▂▁▁▂▂▂▃
</code></pre>
<p>And heres the usage/help:</p>
<pre><code>⚡ git spark -h
usage: git spark [-dhmowy] [long options...] [AUTHOR]
        -o --hours      commits from the last x hours
        -d --days       commits from the last x days
        -w --weeks      commits from the last x weeks
        -m --months     commits from the last x months
        -y --years      commits from the last x years
        -h --help       show this message
</code></pre>
<p>It was fun to build, but afterward I realized its totally useless.  Clearly
&lsquo;commits&rsquo; are a problematic metric.  But its much worse than that.  The peaks
on the graph are relative to the lows on the same graph.  So a peak on one
graph has no relation to a peak on another.  That means I can&rsquo;t compare one
sparkline with another.</p>
<p>Back to the drawing board.  I&rsquo;ll have to come up with something else.</p>
<p><strong>UPDATE:</strong> I solved this problem in <a href="http://blog.kablamo.org/git-spark-revisited/">git-spark revisted</a>.</p>
]]></content>
        </item>
        
        <item>
            <title>Use Carp::Always to fix circular dependencies</title>
            <link>http://blog.kablamo.org/articles/how-to-resolve-circular-dependencies/</link>
            <pubDate>Sat, 19 Jan 2013 00:00:00 +0000</pubDate>
            
            <guid>http://blog.kablamo.org/articles/how-to-resolve-circular-dependencies/</guid>
            <description>Circular dependencies happen when your library requires a library which requires your library. Here&amp;rsquo;s an example. Lets say you have 2 packages:
AlienPlanet.pm
package AlienPlanet; use Moose; use Dinosaurs; # &amp;lt;--- Circular dependency sub has_dinosaurs {1} 1;  Dinosaurs.pm
package Dinosaurs; use Moose; use AlienPlanet; # &amp;lt;--- Circular dependency sub has_rabies {1} 1;  If you try to compile this, you get the following warning:
⚡ perl -c lib/AlienPlanet.pm Subroutine has_dinosaurs redefined at lib/AlienPlanet.</description>
            <content type="html"><![CDATA[<p>Circular dependencies happen when your library requires a library which
requires your library.  Here&rsquo;s an example.  Lets say you have 2 packages:</p>
<p><strong>AlienPlanet.pm</strong></p>
<pre><code>package AlienPlanet;
use Moose;
use Dinosaurs;          # &lt;--- Circular dependency
sub has_dinosaurs {1}
1;
</code></pre>
<p><strong>Dinosaurs.pm</strong></p>
<pre><code>package Dinosaurs;
use Moose;
use AlienPlanet;        # &lt;--- Circular dependency
sub has_rabies {1}
1;
</code></pre>
<p>If you try to compile this, you get the following warning:</p>
<pre><code>⚡ perl -c lib/AlienPlanet.pm 
Subroutine has_dinosaurs redefined at lib/AlienPlanet.pm line 5.
lib/AlienPlanet.pm syntax OK
</code></pre>
<p>In this case its obvious where the problem is.</p>
<p>But if the package you included, included 25 other libraries, which included
other libraries, which included your original library &ndash; then its harder to
figure out where the circle is.</p>
<p>Happily I discovered a good solution. First, modify <strong>AlienPlanet.pm</strong> to look
like this:</p>
<pre><code>package AlienPlanet;
sub has_dinosaurs {1}   &lt;-- swap
use Dinosaurs;          &lt;-- swap
1;
</code></pre>
<p>Next, try compiling your code again but this time with
<a href="http://perladvent.org/2011/2011-12-04.html">Carp::Always</a>:</p>
<pre><code>⚡ perl -MCarp::Always -c lib/AlienPlanet.pm                                                                                                            
Subroutine has_dinosaurs redefined at lib/AlienPlanet.pm line 4.
        require AlienPlanet.pm called at lib/Dinosaurs.pm line 4
        Dinosaurs::BEGIN() called at lib/AlienPlanet.pm line 4
        eval {...} called at lib/AlienPlanet.pm line 4
        require Dinosaurs.pm called at lib/AlienPlanet.pm line 5
        AlienPlanet::BEGIN() called at lib/AlienPlanet.pm line 4
        eval {...} called at lib/AlienPlanet.pm line 4
lib/AlienPlanet.pm syntax OK
</code></pre>
<p>Now you&rsquo;ve got a stack trace and its easy to see where your problem is.  All
thats left is figuring out how to solve it. (Fast solution: use
<a href="https://metacpan.org/module/Class::Load">Class::Load</a> in the Dinosaurs
package.)</p>
]]></content>
        </item>
        
        <item>
            <title>But I want to spend down my nest egg to zero</title>
            <link>http://blog.kablamo.org/articles/but-i-want-to-spend-down-my-nest-egg-to-zero/</link>
            <pubDate>Fri, 04 Jan 2013 00:00:00 +0000</pubDate>
            
            <guid>http://blog.kablamo.org/articles/but-i-want-to-spend-down-my-nest-egg-to-zero/</guid>
            <description>photo by woodleywonderworks
 The problem with this is you can&amp;rsquo;t predict when you will die. On average, Americans live until about 80. But thats the average. Half of everyone will live longer than that. What will you do if you live to age 100?
Despite this, lots of retirement calculators and planning manuals tell you to enter in your age of death. But you can&amp;rsquo;t predict this. So don&amp;rsquo;t do your retirement planning like you can.</description>
            <content type="html"><![CDATA[<p><a class="src" href="http://www.flickr.com/photos/wwworks/2607036664/">photo by woodleywonderworks</a></p>
<h1 id="heading"></h1>
<p>The problem with this is you can&rsquo;t predict when you will die.  On average,
Americans live until about 80.  But thats the average.  Half of everyone will
live longer than that.  What will you do if you live to age 100?</p>
<p>Despite this, lots of retirement calculators and planning manuals tell
you to enter in your age of death.  But you can&rsquo;t predict this.  So don&rsquo;t do
your retirement planning like you can.</p>
<p>Instead, build enough of a nest egg that you can live off the return on your
investments without drawing down the principle.  This will sustain you
indefinately.</p>
<p>Another thing to consider: If you retire at 50 and live until 80 you will spend
30 years in retirement.  Thats a long time.  You need to be thinking like a
B-list celebrity.  You made a small pile of money, but your career is over and
no one wants to hire you anymore and you need to find a way to make that money
last another 30 - 50 years which will probably include a big recession or even
a depression or two.  The way to do that is not spend down your principle.</p>
]]></content>
        </item>
        
        <item>
            <title>Withdrawal rates</title>
            <link>http://blog.kablamo.org/articles/withdrawal-rates/</link>
            <pubDate>Thu, 20 Dec 2012 00:00:00 +0000</pubDate>
            
            <guid>http://blog.kablamo.org/articles/withdrawal-rates/</guid>
            <description>Lets say you reach your goal of retirement. You quit your job sit on your sailboat and eat pineapples all day. The wind is in your hair, you are relaxed and carefree, and you have pineapple breath. All because you have a formidable nest egg and can live comfortably off your investment earnings.
But how do you know how much of your nest egg you can withdraw and spend each year?</description>
            <content type="html"><![CDATA[<script type="text/javascript"
  src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML">
</script>
<p>Lets say you reach your goal of retirement.  You quit your job sit on your
sailboat and eat pineapples all day.  The wind is in your hair, you are relaxed
and carefree, and you have pineapple breath.  All because you have a formidable
nest egg and can live comfortably off your investment earnings.</p>
<p>But how do you know how much of your nest egg you can withdraw and spend each
year?</p>
<h2 id="how-to-calculate-your-withdrawal-rate">How to calculate your withdrawal rate</h2>
<p><b>Step 1</b></p>
<p>Calculate how much you spend each year.  This step requires actual
effort so people often don&rsquo;t bother.  But this step is the <em>key</em> to retiring early
and the key to retiring at all.  Happily there are online tools to help you.  I
of course will recommend <a href="http://networthify.com">Networthify</a>.  But
<a href="http://cashbasehq.com">CashBaseHQ</a> and <a href="http://mint.com">Mint</a> are great
as well.</p>
<p><b>Step 2</b></p>
<p>Divide your annual spending by the size of your nest egg.  Thats your
withdrawal rate.</p>
<p>
  \[ 
    \begin{aligned}
      NestEgg \times WithdrawalRate &amp; =  AnnualSpending \\
                     WithdrawalRate &amp; =  \frac{ AnnualSpending }{ NestEgg } \\
    \end{aligned}
  \]
</p>
<h2 id="but">But&hellip;</h2>
<p>But there is a problem.  Your withdrawal rate could change dramatically
each year depending on the size of your nest egg each year.  For example:</p>
<p><b>A happy scenario</b></p>
<p>Your $1 million nest egg earns 10% returns this year.  <br>
Your withdrawal rate could be as high as $100,000.</p>
<p><b>A sad scenario</b></p>
<p>Your $1 million nest egg earns 1% returns this year.  <br>
Your withdrawal rate could be as high as $10,000.</p>
<p>Those are radically different outcomes.  Living off $10,000 for a year will not
get you to the pineapple breath you were hoping for.  Now consider how big a
difference it makes if you have 15 good years when you first retire vs if you
happen to get 15 bad years.  It is massive.</p>
<p>If you are starting your career and trying to plan for retirement, all the
calculators out there ask you to input a withdrawal rate.  <b>What you now know
is that is impossible to know</b>.  It will depend on market conditions,
inflation, and changes to tax law.  And none of those is knowable.</p>
<h2 id="solution">Solution</h2>
<p>If you are already retired this means you need to be flexible when considering
your withdrawal rate.  Each year will be different and you must be especially
careful in your first 10 years of retirement.</p>
<p>But what do you do if you are starting your career and trying to plan your
retirement?  Basically we guess.  But we do an educated guess.</p>
<p>Researchers like Wade Pfau have discovered that a nest egg that uses a constant
withdrawal rate of 4% survives any period of US stock market history &ndash;
including the Great Depression.  This is why all of networthify&rsquo;s calculators
default to a 4% withdrawal rate.</p>
<p>That sounds like good news, but remember that past performance doesn&rsquo;t predict
future performance.  Most worrying Wade Pfau also ran the numbers using
European historical stock market data and found that in some countries there
were periods when a withdrawal rate of 0 would not preserve your nest egg.</p>
<h2 id="more-reading">More reading</h2>
<p>If you want to learn more, here is a fun [introduction to withdrawal rates]
(<a href="http://www.mrmoneymustache.com/2012/05/29/how-much-do-i-need-for-retirement/">http://www.mrmoneymustache.com/2012/05/29/how-much-do-i-need-for-retirement/</a>)
written by Mr Money Mustache.</p>
<p>But the definitive article on withdrawal rates is [this one]
(<a href="http://financialmentor.com/free-articles/retirement-planning/how-much-to-retire/are-safe-withdrawal-rates-really-safe">http://financialmentor.com/free-articles/retirement-planning/how-much-to-retire/are-safe-withdrawal-rates-really-safe</a>)
(its long) at FinancialMentor.com.  It is awesome and fascinating and I highly
recommend it.</p>
]]></content>
        </item>
        
        <item>
            <title>The best personal finance blogs</title>
            <link>http://blog.kablamo.org/articles/the-best-personal-finance-blogs/</link>
            <pubDate>Sat, 24 Nov 2012 00:00:00 +0000</pubDate>
            
            <guid>http://blog.kablamo.org/articles/the-best-personal-finance-blogs/</guid>
            <description>Here is a short list of the very best personal finance blogs on the internet. All of these websites are constructed entirely of Excellence. They are so good I read every post in their archives. Each author has found a way to retire in under 10 years with fairly normal human level salaries and has insightful things to say about getting to financial freedom.
Mr Money Mustache If I was marooned on a deserted island &amp;hellip; with limited bandwidth and could only read one blog, this is the one I would choose.</description>
            <content type="html"><![CDATA[<p>Here is a short list of the very best personal finance blogs on the internet.
All of these websites are constructed entirely of Excellence.  They are so good
I read every post in their archives.  Each author has found a way to retire in
under 10 years with fairly normal human level salaries and has insightful
things to say about getting to financial freedom.</p>
<h1>Mr Money Mustache</h1>
<p>If I was marooned on a deserted island &hellip; with limited bandwidth and could
only read one blog, this is the one I would choose.  I recommend reading this
blog from first post to last.  <a href="http://www.mrmoneymustache.com/">Mr
Money Mustache</a> introduced me to the idea of early retirement.  Before that
I was adrift, completely uninterested and wanted to spend the rest of my life
working.  His persuasive upbeat writing will blow your mind on the subject of
retirement.  And thats pretty hard to do considering how boring the subject is.</p>
<p><strong>Defining post:</strong> <a href="http://www.mrmoneymustache.com/2012/01/13/the-shockingly-simple-math-behind-early-retirement/">The shockingly simple math behind early retirement</a></p>
<h1>Lacking Ambition</h1>
<p>My favorite thing about <a href="http://lackingambition.com/">Lacking
Ambition</a> is the thoughtful exploration of the philosophy of work, money,
and time.  Its also the story of how one guy found financial independence
through real estate and frugality.  I recommend reading it from the beginning.</p>
<p><strong>Defining post:</strong> <a href="http://lackingambition.com/?p=423">A year alone in the desert</a></p>
<h1>Early Retirement Extremist</h1>
<p><a href="http://earlyretirementextreme.com">ERE</a> was the best and most popular
writer in the early retirement community for a long time.  Unfortunately he no
longer blogs but I definately found it worth my time to pore over his old
posts.</p>
<p><strong>Defining post:</strong> <a href="http://earlyretirementextreme.com/how-i-live-on-7000-per-year.html">How I live on 7000 per year</a></p>
<br>
<br>
Any other great blogs that I should know about?
]]></content>
        </item>
        
        <item>
            <title>Devel::Dwarn helps me type less</title>
            <link>http://blog.kablamo.org/articles/data-dumper-concise/</link>
            <pubDate>Wed, 05 Sep 2012 00:00:00 +0000</pubDate>
            
            <guid>http://blog.kablamo.org/articles/data-dumper-concise/</guid>
            <description>2 bajillion times a day I want to print a hashref and see whats inside. But every time I want to do that I have to type:
use Data::Dumper::Concise; print Dumper $hashref;  First of all, thats too much typing. And second of all I keep forgetting to delete my print statements when I check in.
Happily I recently discovered Devel::Dwarn on CPAN. It is (basically) an alias to Data::Dumper::Concise.</description>
            <content type="html"><![CDATA[<p>2 bajillion times a day I want to print a hashref and see whats inside.
But every time I want to do that I have to type:</p>
<pre><code>use Data::Dumper::Concise;
print Dumper $hashref;
</code></pre>
<p>First of all, thats too much typing.  And second of all I keep forgetting to
delete my print statements when I check in.</p>
<p>Happily I recently discovered
<a href="https://metacpan.org/module/Devel::Dwarn">Devel::Dwarn</a> on CPAN.  It is
(basically) an alias to
<a href="https://metacpan.org/module/Data::Dumper::Concise">Data::Dumper::Concise</a>.</p>
<p>The name is shorter which means its slightly less typing so I am already
winning.  But thats not the best part.  Lets see how to use it.</p>
<p>On the command line I do this:</p>
<pre><code>perl -MDevel::Dwarn codeIWantToDebug.pl
</code></pre>
<p>And then in my code I do this:</p>
<pre><code>print ::Dwarn $hashref;
</code></pre>
<p>There are 2 levels of good here:</p>
<ol>
<li>Less typing.</li>
<li>When I run my code without &lsquo;perl -M&rsquo; I get compile time errors in all
the places I forgot to remove <code>print ::Dwarn $hashref</code>.</li>
</ol>
]]></content>
        </item>
        
        <item>
            <title>Slides from my Selenium talk at YAPCEU 2012</title>
            <link>http://blog.kablamo.org/articles/slides-from-my-selenium-talk-at-yapc-eu-2012/</link>
            <pubDate>Sun, 26 Aug 2012 00:00:00 +0000</pubDate>
            
            <guid>http://blog.kablamo.org/articles/slides-from-my-selenium-talk-at-yapc-eu-2012/</guid>
            <description>I gave my first YAPC::EU presentation this year in Frankfurt after doing a trial run at London.pm. I received some good questions and comments and a few new ideas. It was a good experience and I want to do this again.
My talk introduced Selenium and common problems people have when first trying to write Selenium tests in Perl. I also explained how I solved many of those problems by creating Test::WWW::Selenium::More.</description>
            <content type="html"><![CDATA[<p>I gave my first <a href="http://act.yapc.eu/ye2012/schedule?day=2012-08-20">YAPC::EU</a>
presentation this year in Frankfurt after doing a trial run at London.pm.  I
received some good questions and comments and a few new ideas.  It was a good
experience and I want to do this again.</p>
<p>My talk introduced Selenium and common problems people have when first trying
to write Selenium tests in Perl.  I also explained how I solved many of those
problems by creating
<a href="https://metacpan.org/module/Test::WWW::Selenium::More">Test::WWW::Selenium::More</a>.</p>
<p>The slides are available
<a href="http://kablamo.org/selenium-2012-yapceu-slides/">online</a>. Or if you need to
download them for some reason, they are hosted on
<a href="https://github.com/kablamo/selenium-2012-yapceu-slides">github</a>.</p>
]]></content>
        </item>
        
        <item>
            <title>The math behind the calculator</title>
            <link>http://blog.kablamo.org/articles/math-behind-the-calculator/</link>
            <pubDate>Fri, 17 Aug 2012 00:00:00 +0000</pubDate>
            
            <guid>http://blog.kablamo.org/articles/math-behind-the-calculator/</guid>
            <description>Networthify.com calculates how many years you have to retirement. Lots of people have been curious about how it arrives at the magic number. The answer to this question is: Math!
More specifically the equation which drives the calculator is derived from two common formulas used for dealing with compound interest. Many people must have done this before me but I couldn&amp;rsquo;t find an example online and I enjoyed doing the math anyway.</description>
            <content type="html"><![CDATA[<script type="text/javascript"
  src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML">
</script>
<p>Networthify.com calculates how many years you have to retirement. Lots of
people have been curious about how it arrives at the magic number.  The answer
to this question is: <em>Math!</em></p>
<p>More specifically the equation which drives the calculator is derived from
two common formulas used for dealing with compound interest. Many people must
have done this before me but I couldn&rsquo;t find an example online and I enjoyed
doing the math anyway.</p>
<p><img src="/images/math.jpg" alt="math"></p>
<p>Before we start with the math, we have to define retirement or else we can&rsquo;t
calculate how long it takes to get there.  This is a bit of a problem because
people will define it differently.  But I&rsquo;ll just go ahead do it anyway.</p>
<p>First, I have no idea what my expenses after retirement are going to be but I
decided it can&rsquo;t be that different from my current expenses. After all I will
still need to pay for food, housing, and entertainment.</p>
<p>Also, I don&rsquo;t want to ever draw down my retirement nest egg. I want my wealth
to grow, not shrink. I&rsquo;m being overly safe, but I don&rsquo;t want to have some bad
luck or unexpectedly live to 120 years old and have to lower my standard of
living.  I want my standard of living to go up because thats way more fun.</p>
<p>So this is how I defined retirement:</p>
<p>
  \[ 
    \begin{aligned}
      currentExpenses &amp; = annualIncome - annualSavings \\
      futureExpenses  &amp; = withdrawalRate \times futureValue \\
      currentExpenses &amp; = futureExpenses \\
    \end{aligned}
  \]
</p>
<p>where <em>futureValue</em> is my total savings after retirement and <em>withdrawalRate</em>
is slightly less than my average annual return on investment.  What we want to
know is how long will it take to save a pile of money equal in size to
<em>futureValue</em>.</p>
<p>Notice there are 2 basic ways to build a pile of money over time:</p>
<ol>
<li>Earn interest earned on our existing and growing pile of saved up money.</li>
<li>Contribute savings from our annual income.</li>
</ol>
<p>Happily there are formulas for calculating this stuff.  Lets take a look at them.</p>
<div class="mathHeader">The capital accumulation formula</div>
<p>\[ futureValueA = initialValue \times (1 + interestRate)^n \]</p>
<p>Lets say you have an initial pile of money.  And someone is willing to pay you
some interest for it.  This formula calculates how big your pile of money will
be in the future.</p>
<p>More precisely: it calculates how much money you will have in the future given
an initial balance which earns interest each time period for n time periods.
The time period I use is one month.</p>
<div class="mathHeader">The future value of a series formula</div>
<p>\[ futureValueB = payment \times \frac{ (1 + interestRate)^n - 1 }{ interestRate } \]</p>
<p>This formula also calculates how much money you will have in the future. But
this time you start with no money and contribute a payment each time period for
n time periods while earning interest on your growing pile of money.</p>
<p>Again I want to use a time period of one month.  I&rsquo;ll make a small change and
now this formula calculates what happens when you put some of your salary into
your savings account each month:</p>
<p>
  \[ futureValueB = \frac{annualIncome}{12} \times \frac{ (1 + interestRate)^n - 1 }{ interestRate } \]
</p>
<p>But what we really want is a single formula we can solve for n to figure out
how long it will take to reach retirement.  So lets start doing some
substitutions:</p>
<p>
  \[ 
    \begin{aligned}
                   currentExpenses &amp; = annualIncome - annualSavings \\
                   futureExpenses  &amp; = withdrawalRate \times futureValue \\
                   currentExpenses &amp; = futureExpenses \\
                                   \\
                      futureValue &amp; = futureValueA + futureValueB \\
                                   \\
                   currentExpenses &amp; = withdrawalRate \times (futureValueA + futureValueB) \\
      annualIncome - annualSavings &amp; = withdrawalRate \times (futureValueA + futureValueB) \\
    \end{aligned}
  \] 
</p>
<p>Awesome.  So now its a &ldquo;simple&rdquo; matter of solving for n. So after doing substitutions for <em>futureValueA</em> and <em>futureValueB</em>,
doing natural log stuff, <em>handwaving</em>, <em>handwaving</em> &ndash; I arrived at the following:</p>
<p>
  \[
    n = \frac{ln(interestRate \times \frac{\frac{1 - savingsRate}{savingsRate} + withdrawalRate \times initialValue}{withdrawalRate \times initialValue})}{ln(1 + interestRate)}
  \]
</p>
<p>And thats the math behind the calculator.  Here is more reading for the super duper interested:</p>
<ul>
<li><a href="http://betterexplained.com/articles/demystifying-the-natural-logarithm-ln/">http://betterexplained.com/articles/demystifying-the-natural-logarithm-ln/</a></li>
<li><a href="http://www.patrickschneider.com/blog/2008/03/compound-interest-with-an-initial-balance-and-monthly-contributions/">http://www.patrickschneider.com/blog/2008/03/compound-interest-with-an-initial-balance-and-monthly-contributions/</a></li>
<li><a href="http://en.wikipedia.org/wiki/Compound_interest">http://en.wikipedia.org/wiki/Compound_interest</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Spending money shortens your life</title>
            <link>http://blog.kablamo.org/articles/spending-shortens-your-life/</link>
            <pubDate>Tue, 14 Aug 2012 00:00:00 +0000</pubDate>
            
            <guid>http://blog.kablamo.org/articles/spending-shortens-your-life/</guid>
            <description>Photo by Thomas Hawk
 One morning you awake to find the tooth fairy made an accounting error in your favor. She left $15 million under your pillow. Now you have some choices to make. Here is one: Would you continue to wake up each day and go to your current job?
We all have a certain amount of time to live. Every dollar we earn is given in exchange for time spent working.</description>
            <content type="html"><![CDATA[<p><a href="http://www.flickr.com/photos/thomashawk/540936323/">Photo by Thomas Hawk</a></p>
<h1 id="heading"></h1>
<p>One morning you awake to find the tooth fairy made an accounting error in
your favor.  She left $15 million under your pillow.  Now you
have some choices to make.  Here is one: Would you continue to wake
up each day and go to your current job?</p>
<p>We all have a certain amount of time to live.  Every dollar we earn is
given in exchange for time spent working.  So whenever we buy a car
or underwear or peanut butter we are paying in dollars but those dollars
represent time.  In a very real sense, buying stuff shortens your
life.  And btw that means a charitible donation is literally giving
part of your life to another, taxes are the government redistributing
life, national debt shortens the life of people of the future, etc,
etc.</p>
<p>The most common response to this problem is: Find a job you love.  This
is good advice.  The more pleasant your job is, the lower the
opportunity cost.  But think about the tooth fairy test.
There arent very many jobs out there that are going to pass
that test.  And unless you love your job enough that you would do it
even if you were financially independent &ndash; then you are still selling
away large pieces of your life.</p>
<p>There is only one escape: save enough money to live off the returns from
your investments.  Reach this goal and you will never again need to
trade your time for food and housing.</p>
]]></content>
        </item>
        
        <item>
            <title>Test::WWW::Selenium::More</title>
            <link>http://blog.kablamo.org/articles/test-www-selenium-more/</link>
            <pubDate>Thu, 17 May 2012 00:00:00 +0000</pubDate>
            
            <guid>http://blog.kablamo.org/articles/test-www-selenium-more/</guid>
            <description>I recently released Test::WWW::Selenium::More to CPAN. It is a small collection of utilities to help you write Selenium tests. Here are some reasons to use it:
  It has a manual which provides a concise but fairly comprehensive howto guide to Selenium testing in Perl.
  It uses Moose so you can more easily use roles. For example you might want a role for methods that deal with authentication and a role for methods that deal with payments.</description>
            <content type="html"><![CDATA[<p>I recently released
<a href="https://metacpan.org/module/Test::WWW::Selenium::More">Test::WWW::Selenium::More</a>
to CPAN.  It is a small collection of utilities to help you write Selenium
tests.  Here are some reasons to use it:</p>
<ol>
<li>
<p>It has a
<a href="https://metacpan.org/module/Test::WWW::Selenium::More::Manual">manual</a> which
provides a concise but fairly comprehensive howto guide to Selenium testing in
Perl.</p>
</li>
<li>
<p>It uses Moose so you can more easily use roles.  For example you might want
a role for methods that deal with authentication and a role for methods that
deal with payments.</p>
</li>
<li>
<p>Smarter testing with methods like wait_for_jquery() and jquery_click().  You
should never sleep() in your Selenium tests because that leads to slow tests
with random failures which leads to frustration, low morale, hair pulling, and
heavy drinking.</p>
</li>
<li>
<p>Method chaining.  Here is what this looks like:</p>
<pre><code> use Test::Most;
 use Test::WWW::Selenium::More;

 Test::WWW::Selenium::More-&gt;new()

 -&gt;note('Search google')
 -&gt;open_ok(&quot;http://www.google.com&quot;)
 -&gt;title_like(qr/Google Search/)
 -&gt;type_ok('cat pictures')
 -&gt;follow_link_ok('Search')

 -&gt;note('Check the number of results')
 -&gt;is_text_present_ok('2 bajillion results');

 done_testing;
</code></pre>
</li>
</ol>
<p>Bugs or patches?  <a href="https://github.com/kablamo/Test-WWW-Selenium-More">https://github.com/kablamo/Test-WWW-Selenium-More</a></p>
]]></content>
        </item>
        
        <item>
            <title>New on CPAN - MooseX::CachingProxy</title>
            <link>http://blog.kablamo.org/articles/new-on-cpan-moosex-cachingproxy/</link>
            <pubDate>Thu, 10 May 2012 00:00:00 +0000</pubDate>
            
            <guid>http://blog.kablamo.org/articles/new-on-cpan-moosex-cachingproxy/</guid>
            <description>Last week I released MooseX::CachingProxy to CPAN.
Its a small module that intercepts requests from your LWP based application. Those requests are relayed on to the intended server unless they already exist in the cache.
To toggle on and off the caching proxy, MooseX::CachingProxy provides the attribute &amp;lsquo;caching_proxy&amp;rsquo;. Here is a quick demo:
package MyApp; use Moose; use WWW::Mechanize; # or any LWP based library with &#39;MooseX::CachingProxy&#39;; sub url { &#39;http://example.</description>
            <content type="html"><![CDATA[<p>Last week I released <a href="https://metacpan.org/module/MooseX::CachingProxy">MooseX::CachingProxy</a> to CPAN.</p>
<p>Its a small module that intercepts requests from your LWP based application.
Those requests are relayed on to the intended server unless they already exist
in the cache.</p>
<p>To toggle on and off the caching proxy, MooseX::CachingProxy provides the
attribute &lsquo;caching_proxy&rsquo;.  Here is a quick demo:</p>
<pre><code>package MyApp;
use Moose;
use WWW::Mechanize; # or any LWP based library
with 'MooseX::CachingProxy';

sub url { 'http://example.com' } # required by MooseX::CachingProxy

sub download { 
    my $self = shift;
    $self-&gt;start_caching_proxy;
    return WWW::Mechanize-&gt;new()-&gt;get($self-&gt;url . '/foo'); 
}
</code></pre>
<p>Under the covers, its a tiny Plack application that mashes up
<a href="https://metacpan.org/module/Plack::Middleware::Cache">Plack::Middleware::Cache</a> and <a href="https://metacpan.org/module/Plack::App::Proxy">Plack::App::Proxy</a>.</p>
]]></content>
        </item>
        
        <item>
            <title>New on CPAN - Log::JSON</title>
            <link>http://blog.kablamo.org/articles/new-on-cpan-log-json/</link>
            <pubDate>Sun, 29 Apr 2012 00:00:00 +0000</pubDate>
            
            <guid>http://blog.kablamo.org/articles/new-on-cpan-log-json/</guid>
            <description>I released Log::JSON v0.001 to CPAN today. Its a very simple JSON logger.
The advantage of a JSON logger is that a human can open a mysterious new log file and quickly decipher the content because each piece of information is labeled. Using JSON also means that parsing the log file and reviving the data structures is trivial.
Here is some example usage for you:
use Log::JSON; my $logger = Log::JSON-&amp;gt;new( file =&amp;gt; &#39;/path/errorlog.</description>
            <content type="html"><![CDATA[<p>I released Log::JSON v0.001 to CPAN today.  Its a very simple JSON logger.</p>
<p>The advantage of a JSON logger is that a human can open a mysterious new log
file and quickly decipher the content because each piece of information is
labeled.  Using JSON also means that parsing the log file and reviving the data
structures is trivial.</p>
<p>Here is some example usage for you:</p>
<pre><code>use Log::JSON;
my $logger = Log::JSON-&gt;new(
    file            =&gt; '/path/errorlog.json', # required
    date            =&gt; 1, # optional
    remove_newlines =&gt; 1, # optional
);
$logger-&gt;log(a =&gt; 1, b =&gt; 2);
# '/path/errorlog.json' now contains:
# {&quot;__date&quot;:&quot;2010-03-28T23:15:52Z&quot;,&quot;a&quot;:1,&quot;b&quot;:1}
</code></pre>
<p>I wish I had written it as a Log::Dispatch plugin, and perhaps I&rsquo;ll get around
to that sometime.</p>
<p>One problem with using JSON is that there is a lot repetition and if your log
file is a bajillion lines long, then that&rsquo;s going to be a big file.  Happily,
file compression solves this problem very well.  And Vim and less handle
compressed files on the fly so viewing the file is not inconvenient.  And now
that I write this, I think some kind of compression feature may be nice for
Log::JSON and pretty great for Log::Dispatch too.</p>
<p>Log::JSON on github: <a href="https://github.com/kablamo/Log-JSON">https://github.com/kablamo/Log-JSON</a></p>
]]></content>
        </item>
        
    </channel>
</rss>
