<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[KABLAMO]]></title>
  <link href="http://blog.kablamo.org/atom.xml" rel="self"/>
  <link href="http://blog.kablamo.org/"/>
  <updated>2014-05-27T22:09:18-05:00</updated>
  <id>http://blog.kablamo.org/</id>
  <author>
    <name><![CDATA[Eric Johnson]]></name>
    <email><![CDATA[kablamo@kablamo.org]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[HTTP::Request::AsCurl]]></title>
    <link href="http://blog.kablamo.org/2014/05/27/http-request-ascurl/"/>
    <updated>2014-05-27T00:00:00-05:00</updated>
    <id>http://blog.kablamo.org/2014/05/27/http-request-ascurl</id>
    <content type="html"><![CDATA[<p>Today, on a whim, I released a module called
<a href="https://metacpan.org/pod/HTTP::Request::AsCurl">HTTP::Request::AsCurl</a> to
CPAN.  It converts an <a href="HTTP::Request">HTTP::Request</a> object to a curl command.</p>

<pre><code>use HTTP::Request::Common;
use HTTP::Request::AsCurl;

my $request = POST('api.earth.defense/weapon1', { 
    target =&gt; 'mothership', 
    when   =&gt; 'now' 
});

say join "\n", $request-&gt;as_curl;
# curl --dump-header - -XPOST "api.earth.defense/weapon1" \
# --data 'target=mothership' \
# --data 'when=now'
</code></pre>

<p>It works by injecting the <code>as_curl()</code> method into the <a href="HTTP::Request">HTTP::Request</a> namespace.
This must be a bad idea and probably not a great bit of code to rely on in a
production environment.  But it is pretty convenient syntax for debugging a
REST API and I couldn&rsquo;t resist.  Thoughts, suggestions, criticism?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reading code - Camel-Snake-Kebab]]></title>
    <link href="http://blog.kablamo.org/2014/05/26/perl-camel-snake-kebab/"/>
    <updated>2014-05-26T00:00:00-05:00</updated>
    <id>http://blog.kablamo.org/2014/05/26/perl-camel-snake-kebab</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/qerub/camel-snake-kebab">Camel-Snake-Kebab</a> is a Clojure
library for word case conversions.  I have wanted to see this on CPAN for a
while so last week I finally ported it to Perl.  I even ported the test suite.
Here is a synopsis of my
<a href="https://metacpan.org/pod/String::CamelSnakeKebab">String::CamelSnakeKebab</a> Perl module:</p>

<pre><code>use String::CamelSnakeKebab qw/:all/;

lower_camel_case('flux-capacitor')
       # Returns 'fluxCapacitor'

upper_camel_case('flux-capacitor')
       # Returns 'FluxCapacitor'

lower_snake_case 'ASnakeSlithersSlyly'    
       # Returns 'a_snake_slithers_slyly'

upper_snake_case('ASnakeSlithersSlyly')
       # Returns 'A_Snake_Slithers_Slyly'

constant_case("I am constant")
    # Returns "I_AM_CONSTANT"

kebab_case('Peppers_Meat_Pineapple')
 # Returns 'peppers-meat-pineapple'

http_header_case("x-ssl-cipher")
       # Returns "X-SSL-Cipher"
</code></pre>

<h1>Clojure</h1>

<p>This was my first contact with Clojure and I found the code I was reading to be
bite sized, concise, elegant code.  It reads a bit like math equations to
me.  Or sort of vaguely BNF-like as you will see.  I suspect I would have had a
hard time choosing a better library as my introduction to the language.</p>

<h1>Functional programming</h1>

<p>Clojure is a functional language &mdash; as contrasted with more common imperative
languages.  I will admit I didn&rsquo;t really know what that means.  But hey I
looked it up so I can now present to you 3 central concepts of functional
programming.  (Btw Perl is usually imperative but it can be written
functionally as well.  Although its a little easier and more natural in
Clojure).</p>

<h2>1. First class and higher order functions</h2>

<p>These are functions which accept other functions as arguments.  So functional
programmers enjoy passing around code refs.  Thats not radical for Perl
developers.  Perl has always had excellent support for that.</p>

<p>This flavor of code is often shorter, more general, and less repetitive.
But its harder to read and requires me to use my brains causes me some
discomfort.</p>

<h3>Example</h3>

<p>The most important function in Camel-Snake-Kebab is <code>convert-case</code>.  It is
called by every case conversion function in the library.  It splits a string
into words, applies a case rule to the first word and then a second possibly
different case rule to the remaining words.  Then all the words are joined back
together using the given separator.  Here it is written in Clojure:</p>

<pre><code>(defn convert-case [first-fn rest-fn sep s]
"Converts the case of a string according to the rule for the first
word, remaining words, and the separator."
(let [[first &amp; rest] (split s word-separator-pattern)]
    (join sep (cons (first-fn first) (map rest-fn rest)))))
</code></pre>

<p>Using this I could implement lower snake case like this:</p>

<pre><code>(defn lower-snake-case [s]
    (convert-case lower-case lower-case "_" s))
</code></pre>

<p>Here is the translation in Perl I came up with:</p>

<pre><code>sub convert_case {
    my ($first_coderef, $rest_coderef, $separator, $string) = @_; 

    my ($first, @rest) = split $WORD_SEPARATOR_PATTERN, $string;

    my @words = $first_coderef-&gt;($first);
    push @words, $rest_coderef-&gt;($_) for @rest;

    return join $separator, @words;
}

sub my_lc { lc $_ }

sub lower_snake_case {
    convert_case( \&amp;my_lc, \&amp;my_lc, "_", shift );
}
</code></pre>

<p>The cool thing about this is the different case methods (lower_camel_case,
kebab_case, etc) are not actually implemented this way.  They are dynamically
created when the module loads using a set of conversion rules that looks like
this:</p>

<pre><code>our %CONVERSION_RULES = (
    'lower_camel_case' =&gt; [ \&amp;lc,               \&amp;ucfirst,          ""  ],
    'upper_camel_case' =&gt; [ \&amp;ucfirst,          \&amp;ucfirst,          ""  ],
    'lower_snake_case' =&gt; [ \&amp;lc,               \&amp;lc,               "_" ],
    'upper_snake_case' =&gt; [ \&amp;ucfirst,          \&amp;ucfirst,          "_" ],
    'constant_case'    =&gt; [ \&amp;uc,               \&amp;uc,               "_" ],
    'kebab_case'       =&gt; [ \&amp;lc,               \&amp;lc,               "-" ],
    'http_header_case' =&gt; [ \&amp;http_header_caps, \&amp;http_header_caps, "-" ],
);
</code></pre>

<h2>2. Purely functional functions</h2>

<p>These are functions with no state and no side effects.  In functional
programming I can&rsquo;t do assignments because that alters state (and that is a
side effect).  Which sounds rediculous.  How can I program without doing
assignments?  I&rsquo;m not sure, but the advantage of no side effects is
performance.  I can run functions in parallel without affecting each other.
Also the function&rsquo;s output will depend entirely on the input which makes purely
functional functions great for <a href="https://metacpan.org/pod/Memoize">memoization</a>.</p>

<h3>Example</h3>

<p>This concept was also evident in the code I ported.  Functions did not modify
state.  There were very few if any assignments.  And the output of functions
depended entirely on the input.</p>

<p>I did try memoizing String::CamelSnakeKebab but it did not make it faster.  I&rsquo;m
not sure why.  Perhaps case conversion is just not computationally intensive
enough to make a difference?  So unfortunately I have no example for you.  Any
help in the comments would be awesome.</p>

<h2>3. No <code>for</code> loops</h2>

<p><code>for</code> loops require state and assignments.  To implement loops in functional
programming I&rsquo;m supposed to use recursion.  I didn&rsquo;t see any examples of this
in this library and my brain is grateful to the author for sparing me the
exertion.</p>

<h1>The End</h1>

<p>Thats the end of my story today.  If you are interested, compare the
<a href="https://github.com/kablamo/perl-string-camelsnakekebab/blob/master/lib/String/CamelSnakeKebab.pm">Perl source code</a>
with the
<a href="https://github.com/qerub/camel-snake-kebab/blob/stable/src/camel_snake_kebab.clj">Clojure source code</a>.
Each version is about 70 lines of code.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Test::Pretty - because TAP is unnattractive]]></title>
    <link href="http://blog.kablamo.org/2014/05/08/test-pretty/"/>
    <updated>2014-05-08T00:00:00-05:00</updated>
    <id>http://blog.kablamo.org/2014/05/08/test-pretty</id>
    <content type="html"><![CDATA[<p><a href="https://metacpan.org/pod/Test::Pretty">Test::Pretty</a> makes my tests look like this:</p>

<p><img src="http://blog.kablamo.org/images/for-posts/2014-05-08-test-pretty.png" width="500"></p>

<p>This is especially nice when I have subtests.</p>

<p><img src="http://blog.kablamo.org/images/for-posts/2014-05-08-test-pretty-subtest2.png" width="200">
<img src="http://blog.kablamo.org/images/for-posts/2014-05-08-test-pretty-subtest.png" width="200"></p>

<h1>How it works</h1>

<p>I can enable Test::Pretty like this</p>

<pre><code>prove -MTest::Pretty -vlr t
</code></pre>

<p>But typing extra characters is not fun.  Happily
<a href="http://tokuhirom.github.io/">@tokuhirom</a> also created a prove
<a href="https://metacpan.org/pod/App::Prove::Plugin::retty">plugin</a> (which is included
with the Test::Pretty module) which allows me to do this:</p>

<pre><code>prove -Pretty -vlr t
</code></pre>

<p>Shorter but still too much typing so I created a <code>~/.proverc</code> file which contains
the following lines:</p>

<pre><code>--lib
--verbose
--comments
--recurse
-Pretty
</code></pre>

<p>Now I can get pretty verbose recursive (etc) tests and I only need to type this</p>

<pre><code>prove t
</code></pre>

<p>You can view my <code>~/.proverc</code> and more goodies in my <a href="https://github.com/kablamo/dotfiles">dotfiles repo</a>).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why reading code is good for me]]></title>
    <link href="http://blog.kablamo.org/2014/04/23/reading-code/"/>
    <updated>2014-04-23T00:00:00-05:00</updated>
    <id>http://blog.kablamo.org/2014/04/23/reading-code</id>
    <content type="html"><![CDATA[<ul>
<li><strong>So I can start kicking butt faster</strong> &ndash; When I start a new job or a new
contract. Or when I hack on a new feature.  Or every day of my life as a
programmer that involves legacy code.  Yeah pretty much all the time.</li>
<li><strong>So I can learn new tricks</strong> &ndash; Healthy languages evolve.  Idioms and slang
are tools for more efficiently expressing ideas.  I want to be on top of
that.  Also its best way to peak inside the mind of a talented developer and
steal and copy their skills.</li>
<li><strong>So I can work better with others</strong> &ndash; I understand their idioms because I have
seen them before.  And I can probably articulate why their idioms are awesome
or feeble.</li>
</ul>


<p>I must remember that attitude matters.  If I think of reading code as a painful
chore it will be.  But if I look for opportunity I find it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[An experiment - Write code every day]]></title>
    <link href="http://blog.kablamo.org/2014/04/20/write-code-every-day/"/>
    <updated>2014-04-20T00:00:00-05:00</updated>
    <id>http://blog.kablamo.org/2014/04/20/write-code-every-day</id>
    <content type="html"><![CDATA[<p>If you missed John Resig&rsquo;s recent post about <a href="http://ejohn.org/blog/write-code-every-day/">writing code everyday</a> I highly recommend it.</p>

<p>He is a busy guy with a full time job (at Khan Academy), a few open source side
projects (the author of jQuery), a wife, and a few hobbies.  How to sustainably
get stuff done on his open source side projects without his wife leaving him?
He decided to start writing (non work) code for 30 minutes every day.  This by
itself is not a revolutionary idea.  What blew my mind out of my nose and on to
the table are the benefits he encountered:</p>

<ul>
<li><strong>Minimum viable code</strong> &ndash; No time for more than that.</li>
<li><strong>Small but continuous progress</strong> &ndash; No anxiety about not getting stuff done.</li>
<li><strong>Free time on the weekends</strong> &ndash; Instead of working all
weekend to catch up from doing nothing during the week.</li>
<li><strong>Lowered cost of context switching</strong> &ndash; Compared to resuming work on a side project just on the weekends.</li>
<li><strong>Brain solves side project issues in the background</strong></li>
</ul>


<p>Wow, I need to do this too.  So this is
<a href="http://blog.kablamo.org/2014/03/24/experiments/">another</a>
<a href="http://blog.kablamo.org/2014/01/01/no-dessert-forever/">experiment</a> and here
are the rules.</p>

<ol>
<li> I will write code for a minimum of 30 minutes each day.</li>
<li> I must push working code every day.</li>
<li> I will write for a minimum of 10 minutes each day.</li>
<li> I must publish a blog post at least once a week.</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Codecube.io now supports Perl]]></title>
    <link href="http://blog.kablamo.org/2014/04/19/codecube/"/>
    <updated>2014-04-19T00:00:00-05:00</updated>
    <id>http://blog.kablamo.org/2014/04/19/codecube</id>
    <content type="html"><![CDATA[<p><a href="http://codecube.io">Codecube.io</a> is a jsfiddle type service which runs Perl
code (and other languages) and shows the results in your browser.</p>

<p>The website is written in Go and runs your code inside a Docker container.  It
originally had support for C, Go, Python, and Ruby.  I was looking for an
excuse to play with Docker and Go so I submitted a pull request which added
support for Perl.</p>

<p>See also:</p>

<ul>
<li> The original Codecube <a href="http://hmarr.com/2013/oct/16/codecube-runnable-gists/">blog post</a> which is a good introduction to Docker.</li>
<li> The <a href="https://github.com/hmarr/codecube">Codecube github repo</a>.</li>
<li> My previous post on <a href="http://golang.org/">Go</a>.</li>
<li> My previous post on <a href="http://www.docker.io/">Docker</a>.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reading code - Plack::Builder]]></title>
    <link href="http://blog.kablamo.org/2014/04/12/read-plack-4/"/>
    <updated>2014-04-12T00:00:00-05:00</updated>
    <id>http://blog.kablamo.org/2014/04/12/read-plack-4</id>
    <content type="html"><![CDATA[<ul>
<li><a href="http://blog.kablamo.org/2014/04/08/read-plack-1">Part 1 &ndash; An Overview</a></li>
<li><a href="http://blog.kablamo.org/2014/04/09/read-plack-2">Part 2 &ndash; plackup Architecture</a></li>
<li><a href="http://blog.kablamo.org/2014/04/11/read-plack-3">Part 3 &ndash; PSGI Application Architecture</a></li>
<li><a href="http://blog.kablamo.org/2014/04/12/read-plack-4"><strong>Part 4 &ndash; Plack::Builder</strong></a></li>
</ul>


<p>Plack::Builder provides a domain specific language (DSL) for middleware
developers.  It looks like this:</p>

<pre><code>use Plack::Builder;

my $app1 = sub { ... };
my $app2 = sub { ... };

builder {
    enable "Deflater";
    enable "Session", store =&gt; "File";
    enable "Debug", panels =&gt; [ qw(DBITrace Memory Timer) ];

    mount "/narwhale" =&gt; $app1;
    mount "/unicorn"  =&gt; $app2;
};
</code></pre>

<p>How does it work?  With three artful tricks.</p>

<h1>Artful trick #1</h1>

<p>The first artful trick is the <code>builder</code> block.</p>

<pre><code>sub builder(&amp;) {
    my $block = shift;
    ...
}
</code></pre>

<p>The <code>&amp;</code> is a function prototype.  Perl offers some limited compile time checking
for parameters passed to subs.  Here is what <code>perldoc perlsub</code> says about <code>&amp;</code>:</p>

<blockquote><p>An &ldquo;&amp;&rdquo; requires an anonymous subroutine, which, if passed as the first
argument, does not require the &ldquo;sub&rdquo; keyword or a subsequent comma.</p></blockquote>

<p>So if I try to pass <code>builder()</code> a scalar or an array or anything thats not an
anonymous subroutine, I will get a compile time error.  But if I pass it an
anonymous subroutine, the compiler will allow things to continue.</p>

<h1>Artful trick #2</h1>

<p>The next artful trick is that Plack::Builder implements the DSL keywords as
subs and then exports those subs.</p>

<pre><code>package Plack::Builder;
use strict;
use parent qw( Exporter );
our @EXPORT = qw( builder enable enable_if mount );
...
sub enable    {...}
sub enable_if {...}
sub mount     {...}
# etc
</code></pre>

<p>Actually thats 90% of the whole thing isn&rsquo;t it?  Now its starting to look
obvious.  But lets continue.</p>

<h1>Artful trick #3</h1>

<p>There is one more interesting idea here.  Notice that if I use <code>enable</code>,
<code>enable_if</code>, or <code>mount</code> outside of a <code>builder</code> block I will get an
error.  This works because the DSL keywords are subs which run code references.
By default those code references refer to code which croaks an error.  But when
<code>builder</code> runs, those references are temporarily replaced with real working
code.</p>

<p>Here&rsquo;s some simplified code to illustrate how it works.</p>

<pre><code>our $_enable = sub { Carp::croak(...) }; # &lt;&lt; default code reference

sub enable { $_enable-&gt;(@_) }

sub builder(&amp;) {
    my $block = shift;
    ...
    local $_enable = sub {...}; # &lt;&lt; temporarily assign real working code
    ...
    my $app = $block-&gt;();
    ...
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reading code - PSGI Application Architecture]]></title>
    <link href="http://blog.kablamo.org/2014/04/11/read-plack-3/"/>
    <updated>2014-04-11T00:00:00-05:00</updated>
    <id>http://blog.kablamo.org/2014/04/11/read-plack-3</id>
    <content type="html"><![CDATA[<ul>
<li><a href="http://blog.kablamo.org/2014/04/08/read-plack-1">Part 1 &ndash; An Overview</a></li>
<li><a href="http://blog.kablamo.org/2014/04/09/read-plack-2">Part 2 &ndash; plackup Architecture</a></li>
<li><a href="http://blog.kablamo.org/2014/04/11/read-plack-3"><strong>Part 3 &ndash; PSGI Application Architecture</strong></a></li>
<li><a href="http://blog.kablamo.org/2014/04/12/read-plack-4">Part 4 &ndash; Plack::Builder</a></li>
</ul>


<h1>PSGI Applications</h1>

<p>The <a href="https://metacpan.org/pod/distribution/PSGI/PSGI.pod">PSGI spec</a> defines
a PSGI application.</p>

<blockquote><p>A PSGI application is a Perl code reference. It takes exactly one argument,
the environment, and returns an array reference containing exactly three
values.</p></blockquote>

<p>The three values are a status, headers, and a body.  Here is an example:</p>

<pre><code>my $app = sub {
    my $env = shift;
    return [
        '200',
        [ 'Content-Type' =&gt; 'text/plain' ],
        [ "Hello World" ], # or IO::Handle-like object
    ];
};
</code></pre>

<h1>The PSGI environment hash</h1>

<p>The PSGI environment hash is a hashref with many keys.  But mostly it is the
data (headers, body, etc) from an <a href="HTTP::Request">HTTP::Request</a> which has been parsed and put into
a hash for convenient access.</p>

<h1>Middleware</h1>

<p>A middleware component takes a PSGI application and runs it, passing in the
PSGI environment hash.  But before it runs the app, it gets to modify the
environment if it wants to.  And after running the app, it can modify the
response if it wants to.</p>

<h1>Plack::Middleware</h1>

<p>Middleware is a wrapper around a PSGI app.  More than one middleware can be
wrapped around an app, creating a series of layers like an
<a href="http://blogs.perl.org/users/jakob/2012/09/28/middleware-onion.png/500px-MiddlewareOnion.svg.png">onion</a>.
What makes the middleware onion a somewhat unusual construct is the event
driven / callback nature of it.  Lets look at how its implemented.</p>

<p>All middleware inherits from Plack::Middleware which is an itsy bitsy (teeny
weeny) module.  The middleware onion is created with just 2 short subroutines
(notice the <code>call()</code> and <code>prepare_app()</code> subs are written by middleware authors):</p>

<pre><code>sub wrap {
    my($self, $app, @args) = @_;
    if (ref $self) {
        $self-&gt;{app} = $app;
    } else {
        $self = $self-&gt;new({ app =&gt; $app, @args });
    }
    return $self-&gt;to_app;
}

sub to_app {
    my $self = shift;
    $self-&gt;prepare_app;
    return sub { $self-&gt;call(@_) };
}
</code></pre>

<p>How do these subs work together?  The middleware onion is sometimes constructed as follows:</p>

<pre><code>my $app = MyWebApp-&gt;new-&gt;to_app;
$app = Plack::Middleware::A-&gt;wrap($app);
$app = Plack::Middleware::B-&gt;wrap($app);
$app = Plack::Middleware::C-&gt;wrap($app);
</code></pre>

<p>But it might be more clear to write it this way</p>

<pre><code>my $app0 = MyWebApp-&gt;new-&gt;to_app;           # $app0-&gt;($env) runs the web app
$app1 = Plack::Middleware::A-&gt;wrap($app0);  # $app1-&gt;($env) calls P::M::A-&gt;call() which calls $app0-&gt;($env)
$app2 = Plack::Middleware::B-&gt;wrap($app1);  # $app2-&gt;($env) calls P::M::B-&gt;call() which calls $app1-&gt;($env)
$app3 = Plack::Middleware::C-&gt;wrap($app2);  # $app3-&gt;($env) calls P::M::C-&gt;call() which calls $app2-&gt;($env)
                                            # When the server receives a request it calls $app3-&gt;($env)
</code></pre>

<p>So when an event occurs &mdash; for example the PSGI server sees a new request &mdash; it
passes the event to the app.  The app is a chain of callbacks which run each
other.  This is clearly an example of event driven programming.</p>

<h1>Plack::Component and Plack::App</h1>

<p>Plack::Middleware inherits from Plack::Component.  So the most common use of
Plack::Component is in middleware.</p>

<p>Plack::Component can also be used as a tool for creating PSGI applications.  It
has a light dusting of code, but mostly its an interface which is implemented
by modules in the Plack::App namespace.  For example Plack::App::File is a web
app which serves static files from a root directory, and Plack::App::URLMap is
a web app which maps multiple web apps to multiple urls.</p>

<p>But notice that I am not required to use Plack::Component to create a PSGI
application. A PSGI application is just a code reference.  The PSGI spec does
not say that a PSGI application is a reference to code that inherits from
Plack::Component.</p>

<p>The nice thing about using Plack::Component to build my app is that it
provides a common interface for all PSGI apps.  Whenever I see <code>$app</code>, I
can rely on that behavior.  This is clearly important for middleware.  And it
feels good from a design point of view.</p>

<p>But its not required and it adds some complexity.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reading code - plackup Architecture]]></title>
    <link href="http://blog.kablamo.org/2014/04/09/read-plack-2/"/>
    <updated>2014-04-09T00:00:00-05:00</updated>
    <id>http://blog.kablamo.org/2014/04/09/read-plack-2</id>
    <content type="html"><![CDATA[<ul>
<li><a href="http://blog.kablamo.org/2014/04/08/read-plack-1">Part 1 &ndash; An Overview</a></li>
<li><a href="http://blog.kablamo.org/2014/04/09/read-plack-2"><strong>Part 2 &ndash; plackup Architecture</strong></a></li>
<li><a href="http://blog.kablamo.org/2014/04/11/read-plack-3">Part 3 &ndash; PSGI Application Architecture</a></li>
<li><a href="http://blog.kablamo.org/2014/04/12/read-plack-4">Part 4 &ndash; Plack::Builder</a></li>
</ul>


<h1>Plack::Runner and plackup</h1>

<p><code>plackup</code> starts a PSGI server which executes a PSGI application.  However
the script itself is just a very small wrapper around Plack::Runner which does
all the heavy lifting.  Plack::Runner</p>

<ol>
<li> parses the command line options.</li>
<li> instantiates the chosen loader class (which is in the Plack::Loader namespace).</li>
<li> instatiates the chosen server library (which is in the Plack::Handler namespace).</li>
<li> starts the PSGI server and passes it a PSGI application</li>
</ol>


<h1>Plack::Loader</h1>

<p>Loaders are responsible for instantiating and running the PSGI server.  Here are
the more interesting capabilities a <code>$loader</code> object has:</p>

<ul>
<li><code>$loader-&gt;guess()</code> guesses which server library should be loaded by looking at command line opts, $ENV, and %INC.</li>
<li><code>$loader-&gt;load()</code> instantiates the server library and returns the object.</li>
<li><code>$loader-&gt;run()</code> starts the server.</li>
</ul>


<p>The Plack::Loader namespace contains 3 kinds of loaders:</p>

<ul>
<li>Plack::Loader::Delayed &ndash; delays compilation of the web app until the first request occurs</li>
<li>Plack::Loader::Restarter &ndash; reloads the server if any files are changed</li>
<li>Plack::Loader::Shotgun &ndash; foreach request, forks a child which compiles the web app and runs it</li>
</ul>


<p>I can choose which loader I want using <code>plack --loader</code></p>

<h1>Plack::Handler</h1>

<p>The <a href="https://metacpan.org/pod/distribution/PSGI/PSGI.pod">PSGI spec</a>
tells me that PSGI defines the interface between an application and a server.
Because the PSGI spec is (intentionally) very minimal, there is a good deal of
wiggle room to interpret how an application and a server might want to play
together.</p>

<p>A library in the Plack::Handler namespace is the place where the application
meets the server.  This layer contains all the wiggling.</p>

<p>Lets say I wrote a new server called AngryBrontosaurus and I want to be able to
use it with <code>plackup --server AngryBrontosaurus</code>.  I could implement a small
class like this:</p>

<pre><code>package Plack::Handler::AngryBrontosaurus
use strict;
use AngryBrontosaurus;

sub new {
    my $class = shift;
    bless { @_ }, $class;
}

sub run {
    my ($self, $app) = @_; 
    AngryBrontosaurus-&gt;new-&gt;run($app, $self);
}
</code></pre>

<p>Then, to make sure AngryBrontosaurus and Plack::Handler::AngryBrontosaurus
correctly implement the PSGI spec, I should also test my code with
Plack::Test::Suite.</p>

<pre><code>use Test::More;
use Plack::Test::Suite;
Plack::Test::Suite-&gt;run_server_tests('AngryBrontosaurus');
done_testing;
</code></pre>

<p>Notice that while the Plack::Handler namespace contains classes for several
PSGI servers like Plack::Handler::Starman or Plack::Handler::Twiggy, it also
includes some classes like Plack::Handler::Apache2 and Plack::Handler::FCGI.
Clearly Apache2 was not written with PSGI compliance in mind, but there is glue
in the Plack::Handler::Apache2 layer to enable it to speak with PSGI compliant
applications.</p>

<h1>Sequence diagram</h1>

<p>This diagram describes how Plack::Runner, Plack::Handler, and Plack::Loader
interact.</p>

<p><img src="http://blog.kablamo.org/images/for-posts/2014-04-01-plack.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reading code - Plack]]></title>
    <link href="http://blog.kablamo.org/2014/04/08/read-plack-1/"/>
    <updated>2014-04-08T00:00:00-05:00</updated>
    <id>http://blog.kablamo.org/2014/04/08/read-plack-1</id>
    <content type="html"><![CDATA[<p>I write lots of code.  But I want to be better and faster at reading code.
When I had the privilege of working with @ranguard I discovered he is a code
reading <em>cheetah</em> and I always envied that.  So I&rsquo;ve decided to practice
by reading the source code of various CPAN modules.  I&rsquo;m starting with Plack.</p>

<ul>
<li><a href="http://blog.kablamo.org/2014/04/08/read-plack-1"><strong>Part 1 &ndash; An Overview</strong></a></li>
<li><a href="http://blog.kablamo.org/2014/04/09/read-plack-2">Part 2 &ndash; plackup Architecture</a></li>
<li><a href="http://blog.kablamo.org/2014/04/11/read-plack-3">Part 3 &ndash; PSGI Application Architecture</a></li>
<li><a href="http://blog.kablamo.org/2014/04/12/read-plack-4">Part 4 &ndash; Plack::Builder</a></li>
</ul>


<h1>Plack</h1>

<p>Plack describes itself as a set of tools for using
<a href="https://metacpan.org/pod/PSGI">PSGI</a> (the Perl Server Gateway Interface).</p>

<p>The earliest release of Plack on CPAN is version 0.9000 from 2009-10-13.  There
were releases several times a week for the first <strong>two years</strong>.  Impressively, in
2012 releases were still happening roughly once a week.  In 2013 things seem to
have cooled and now releases happen about once a month.</p>

<p>The code itself is written tersely and with attention to detail.  There are
almost no comments.  In fact 43 out of 71 files have fewer than 3 comments.
Of course the code is very well written which makes comments less necessary and
nowadays there is quite a bit of excellent POD as well.</p>

<p>The code also makes heavy use of callbacks (code references).  That is to say
its heavily event driven. Which makes sense given the event driven nature of web
servers.  For me this gave the code a JavaScript flavor.  Take for example
<code>Plack::Util::foreach</code> which works just like
<a href="http://api.jquery.com/jQuery.each/">jQuery.each()</a> by iterating over an array
calling a code reference on each item.</p>

<pre><code>Plack::Util::foreach([1,2,3], sub { print shift }); # prints "123"
</code></pre>

<h2>Background reading</h2>

<p>The most important thing to read is the <a href="https://metacpan.org/pod/distribution/PSGI/PSGI.pod">PSGI spec</a>.
This is the problem Plack was built to solve.  Its clear and well
written but perhaps also a little boring and lacking in context. Still I found
it very helpful to refer back to while reading the code.</p>

<h2>Getting started</h2>

<pre><code>~/code ⚡ git clone git@github.com:plack/Plack.git
~/code ⚡ cd Plack
</code></pre>

<p>The first thing I noticed is a <code>cpanfile</code> containing a list of the project
dependencies.  Because understanding and running the tests is often useful
when reading new code I installed the dependencies using
<a href="https://metacpan.org/pod/Carton">Carton</a> and ran the tests.</p>

<pre><code>~/code/Plack ⚡ carton
~/code/Plack ⚡ prove -rl t
</code></pre>

<h2>Who works on Plack?</h2>

<p>Lets get a feel for who is involved in the project.</p>

<pre><code>~/code/Plack ⚡ git shortlog --summary --numbered | head
  1567  Tatsuhiko Miyagawa
    70  Kazuho Oku
    68  Tokuhiro Matsuno
    20  Daisuke Murase
    20  Jesse Luehrs
    19  yappo
    16  Karen Etheridge
    16  Mark Stosberg
    12  hiratara
    11  Stevan Little
</code></pre>

<h2>How big is it?</h2>

<pre><code>~/code/Plack ⚡ tree lib | tail -1
17 directories, 70 files

~/code/Plack ⚡ cloc . 2&gt;/dev/null | tail -13
-------------------------------------------------------------------------------
Language                     files          blank        comment           code
-------------------------------------------------------------------------------
Perl                            82           2889           3341           5309
Bourne Shell                     8             55            138            251
YAML                             1              0              0             19
HTML                             3              2              0             14
Python                           1              2              1              6
Javascript                       1              0              0              1
CSS                              1              0              0              1
-------------------------------------------------------------------------------
SUM:                            97           2948           3480           5601
-------------------------------------------------------------------------------
</code></pre>

<h2>What is the lib directory structure like?</h2>

<p>Unfortunately with 71 files in the lib directory its hard to grok whats
happening in a single glance so maybe thats not a great question.  Instead I
found it helpful to group the code by functionality.  I came up
with 3 major categories which look like this:</p>

<ul>
<li><em>Category 1</em> &ndash; Modules for loading and running PSGI servers

<ul>
<li>plackup</li>
<li>Plack::Handler</li>
<li>Plack::Handler::*</li>
<li>Plack::Loader</li>
<li>Plack::Loader::*</li>
<li>Plack::Runner</li>
</ul>
</li>
<li><em>Category 2</em> &ndash; Modules for building PSGI apps

<ul>
<li>Plack::App::*</li>
<li>Plack::Builder</li>
<li>Plack::Component</li>
<li>Plack::Middleware</li>
<li>Plack::Middleware::*</li>
</ul>
</li>
<li><em>Category 3</em> &ndash; Modules for testing

<ul>
<li>Plack::Test</li>
<li>Plack::Test::*</li>
<li>Plack::<a href="HTTP::Message::PSGI">HTTP::Message::PSGI</a></li>
<li>Plack::LWPish</li>
</ul>
</li>
</ul>


<p>However I also got crazy and went ahead and listed <em>everything</em> in the lib
directory along with a brief description.  I guess it might be handy for
reference purposes.  The numbers (1), (2), (3) below correspond to the three
categories I listed above.</p>

<pre><code>~/code/Plack ⚡ tree lib
lib
├── HTTP
│   ├── Message
│   │   └── PSGI.pm               # (3) Converts an HTTP::Request to a PSGI env hash
│   └── Server                    
│       └── PSGI.pm               # (1) Reference PSGI web server; no deps; not usually for prod
├── Plack                         
│   ├── App                       # (2) These libs inherit from Plack::Component; they are PSGI web apps
│   │   ├── Cascade.pm               # Foreach request, tries a number of PSGI apps until one is successful
│   │   ├── CGIBin.pm                # Creates many PSGI apps for a directory with many CGI scripts (uses WrapCGI.pm)
│   │   ├── Directory.pm             # Serves a directory of files
│   │   ├── File.pm                  # Serves a file
│   │   ├── PSGIBin.pm               # Create PSGI apps from a directory of .psgi files
│   │   ├── URLMap.pm                # Maps a url to a PSGI app
│   │   └── WrapCGI.pm               # Creates a single PSGI app from a single CGI script
│   ├── Builder.pm                # (2) A DSL for building Plack Middleware
│   ├── Component.pm              # (2) A (optional) tool for building PSGI web apps
│   ├── Handler
│   │   ├── Apache1.pm
│   │   ├── Apache2
│   │   │   └── Registry.pm
│   │   ├── Apache2.pm
│   │   ├── CGI.pm
│   │   ├── FCGI.pm
│   │   ├── HTTP
│   │   │   └── Server
│   │   │       └── PSGI.pm                 # A Plack::Handler for HTTP::Server::PSGI
│   │   └── Standalone.pm            # Alias for Plack::Handler::HTTP::Server::PSGI
│   ├── Handler.pm                # (1) Instantiate and run PSGI compatible servers
│   ├── HTTPParser
│   │   └── PP.pm                    # Parse HTTP headers with XS
│   ├── HTTPParser.pm             # (1) Parse HTTP headers; used by HTTP::Server::PSGI
│   ├── Loader
│   │   ├── Delayed.pm               # Delay compilation of the PSGI app until the first request
│   │   ├── Restarter.pm             # Restart the server when a watched file changes
│   │   └── Shotgun.pm               # Recompile the PSGI app for every request
│   ├── Loader.pm                 # (1) Load PSGI compatible web servers
│   ├── LWPish.pm                 # (3) Light version of LWP for testing
│   ├── Middleware                
│   │   ├── AccessLog
│   │   │   └── Timed.pm                # Write access logs but can handle a fake File::IO body
│   │   ├── AccessLog.pm             # Write access logs
│   │   ├── Auth
│   │   │   └── Basic.pm                # Basic authentication
│   │   ├── BufferedStreaming.pm     # Enable streaming for servers that don't
│   │   ├── Chunked.pm               # Implements part of HTTP/1.1 - chunked HTTP transfer encoding
│   │   ├── ConditionalGET.pm        # Implements part of HTTP/1.1 - Conditional GET
│   │   ├── Conditional.pm           # Runs the specified middleware if a specified condition is met
│   │   ├── ContentLength.pm         # Adds a Content-Length header if possible
│   │   ├── ContentMD5.pm            # Sets the Content-MD5 header when the body is an arrayref
│   │   ├── ErrorDocument.pm         # Show different error documents for different HTTP errors
│   │   ├── Head.pm                  # Delete any response body from HEAD requests
│   │   ├── HTTPExceptions.pm        # Redirect to an error page when HTTP::Exceptions are caught
│   │   ├── IIS6ScriptNameFix.pm     # Fix for IIS
│   │   ├── IIS7KeepAliveFix.pm      # Fix for IIS
│   │   ├── JSONP.pm                 # Change JSON responses to JSONP if a callback param is specified
│   │   ├── LighttpdScriptNameFix.pm # Fix for Lighttpd
│   │   ├── Lint.pm                  # Checks input/output for compliance w/PSGI spec
│   │   ├── Log4perl.pm              # Log with Log::Log4Perl
│   │   ├── LogDispatch.pm           # Log with Log::Dispatch
│   │   ├── NullLogger.pm            # Don't log anything
│   │   ├── RearrangeHeaders.pm      # Fix for very old MSIE and broken HTTP proxy servers
│   │   ├── Recursive.pm             # Allows the app to forward the request to a different (url) path
│   │   ├── Refresh.pm               # Similar to Plack::Loader::Restarter but less effective
│   │   ├── Runtime.pm               # Sets the 'X-Runtime' HTTP response header = app's response time
│   │   ├── SimpleContentFilter.pm   # Filter response content
│   │   ├── SimpleLogger.pm          # Logs messages
│   │   ├── StackTrace.pm            # Displays a stacktrace when a PSGI app dies
│   │   ├── Static.pm                # Serve static files
│   │   ├── XFramework.pm            # Adds an X-Framework HTTP response header
│   │   └── XSendfile.pm             # Adds an X-Sendfile HTTP response header
│   ├── Middleware.pm             # (2) Wraps PSGI apps; can modify incoming requests / outgoing responses
│   ├── MIME.pm                   # A list of MIME types (mostly)
│   ├── Request
│   │   └── Upload.pm                # A subclass of Plack::Request for file uploads
│   ├── Request.pm                # (2) Low level request obj for middleware and web apps
│   ├── Response.pm               # (2) Low level response obj for middleware and web apps
│   ├── Runner.pm                 # (1) The guts of plackup -- uses Plack::Loader and Plack::Handler
│   ├── TempBuffer.pm             # For backward compat. Saves data in memory or to a file if its big;
│   ├── Test
│   │   ├── MockHTTP.pm              # Test a PSGI app without using a server (faster)
│   │   ├── Server.pm                # Test a PSGI app using a very small server (fast)
│   │   └── Suite.pm                 # Ensure the web server complies with the PSGI spec
│   ├── Test.pm                   # (3) A factory for generating test objects
│   ├── Util
│   │   └── Accessor.pm              # Light version of Class::Accessor for backward compat
│   └── Util.pm                   # Misc but important utilities used throughout the code base
└── Plack.pm                   # No code here -- just pod and a version number
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Look around assertions in Perl regular expressions]]></title>
    <link href="http://blog.kablamo.org/2014/03/31/regex/"/>
    <updated>2014-03-31T00:00:00-05:00</updated>
    <id>http://blog.kablamo.org/2014/03/31/regex</id>
    <content type="html"><![CDATA[<p>When Perl&rsquo;s regex engine evaluates a string, it moves from left to right, one
letter at a time checking the match at each position.  That position is called
the <em>current match position</em>.</p>

<p>Look around assertions allow you to match a specific pattern before or after
the current match position without moving the match position.</p>

<h1>Look ahead assertions</h1>

<p>Look ahead assertions match the text after the current match position
(without moving the match position).  They look like <code>(?=pattern)</code>.</p>

<pre><code>my $job = "space cowboy";
$job =~ /space (?=cow)/;    # matches
$job =~ /space (?=cow)cow/; # also matches
</code></pre>

<h1>Look behind assertions</h1>

<p>Look behind assertions match the text before the current match position
(without moving the match position).  They look like <code>(?&lt;=pattern)</code>.</p>

<pre><code>my $job = "space cowboy";
$job =~ /(?&lt;=space) cowboy/;      # matches
$job =~ /space(?&lt;=space) cowboy/; # also matches
</code></pre>

<h1>Positive and negative look ahead assertions</h1>

<p><em>Positive</em> look ahead assertions are look ahead assertions which match when their
subpattern matches. They look like <code>(?=pattern)</code>.</p>

<pre><code> my $job = "space cowboy";
 $job =~ /space (?=cowboy)/;   # matches
</code></pre>

<p><em>Negative</em> look ahead assertions are look ahead assertions which match when their
subpattern fails. They look like <code>(?!pattern)</code>.</p>

<pre><code> my $job = "space cowboy";
 $job =~ /space (?!mooseboy)/;   # matches
</code></pre>

<h1>Positive and negative look behind assertions</h1>

<p>Positive look behind assertions are look behind assertions which match when their
subpattern matches. They look like <code>(?&lt;=pattern)</code>.</p>

<pre><code> my $job = "space cowboy";
 $job =~ /(?&lt;=space) cowboy/;   # matches
</code></pre>

<p>Negative look behind assertions are look behind assertions which match when
their subpattern fails. They look like <code>(?&lt;!pattern)</code>.</p>

<pre><code> my $job = "space cowboy";
 $job =~ /(?&lt;!earth) cowboy/;   # matches
</code></pre>

<p>For more details see <code>perldoc perlre</code>.  I also recommend the DuckDuckGo
<a href="https://duckduckgo.com/?q=regex+cheat+sheet">regex cheat sheet</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim cheat sheet]]></title>
    <link href="http://blog.kablamo.org/2014/03/28/ddg-vim/"/>
    <updated>2014-03-28T00:00:00-05:00</updated>
    <id>http://blog.kablamo.org/2014/03/28/ddg-vim</id>
    <content type="html"><![CDATA[<p>I created a Vim cheat sheet instant answer for DuckDuckDuckGo.  If you search
for <a href="https://duckduckgo.com/?q=vim+cheat+sheet">vim cheat sheet</a> or
<a href="https://duckduckgo.com/?q=vim+help">vim help</a> you will get a result like this:</p>

<p><img src="http://blog.kablamo.org/images/for-posts/2014-03-28-ddg-vim.png" width="700" height="424"></p>

<p>The data is from rtorruellas&rsquo;s excellent <a href="http://rtorruellas.com/vim-cheat-sheet/">vim cheat sheet</a>
(also available on <a href="https://github.com/rtorr/vim-cheat-sheet">github</a>) which has a responsive
mobile friendly layout and is also available in Japanese.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[An experiment - Living with less than 200 things]]></title>
    <link href="http://blog.kablamo.org/2014/03/24/experiments/"/>
    <updated>2014-03-24T00:00:00-05:00</updated>
    <id>http://blog.kablamo.org/2014/03/24/experiments</id>
    <content type="html"><![CDATA[<ul>
<li><strong>Stuff is expensive to buy.</strong>  Especially when I end up only using things
once or twice like books, dvds, dress shoes, and ties.</li>
<li><strong>Stuff is expensive to store.</strong>  One time I had to rent a storage locker
because I couldn&rsquo;t take my things when I moved to China.  Some people get
big houses with walk in closets and a three car garage.</li>
<li><strong>Stuff is expensive to maintain.</strong>  Broken stuff needs to be fixed.  Owning
a house means I need to fix the roof. Owning a car means I need to change
the tires.</li>
<li><strong>Stuff is time consuming to maintain.</strong>  I have to dust my stuff.
A bigger house means more sweeping.
A bigger yard means more mowing. Owning a car means cleaning it and
changing the oil and scraping ice off the windows.<br/>
I need to go to the store to find replacement parts,
batteries, light bulbs, cleaning supplies, and duct tape.</li>
<li><strong>Stuff is stressful to own.</strong>  I might
lose it or dent it or scratch it or drop it or step on it.  Or it might
catch on fire.  Or someone might steal it.  Sometimes I get so stressed I buy
insurance for my stuff.</li>
<li><strong>Stuff reduces my freedom.</strong>  Its hard to move to new place because I have
to carry all my stuff with me.</li>
</ul>


<p>Therefore I have decided to live with less stuff.  So I hereby declare war on
my stuff.  And also on my things.  Here is my 4 point plan to free myself from
the tedious tyranny of too many things:</p>

<ul>
<li><strong>Point 1:</strong> Keep a comprehensive inventory of all my stuff.</li>
<li><strong>Point 2:</strong> Ruthlessly reduce the number of things in my inventory to less than 200.</li>
<li><strong>Point 3:</strong> No new stuff unless I throw out some old stuff first.</li>
<li><strong>Point 4:</strong> Have a beer.</li>
</ul>


<p>If I were hard core I would throw out everything I didn&rsquo;t use in the last 6
months.  Maybe I&rsquo;ll be hard core at some point in the future.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction to online credit card processing - part 3]]></title>
    <link href="http://blog.kablamo.org/2014/03/22/cc-processors/"/>
    <updated>2014-03-22T00:00:00-05:00</updated>
    <id>http://blog.kablamo.org/2014/03/22/cc-processors</id>
    <content type="html"><![CDATA[<p>I am learning about online credit card processing.
<a href="http://blog.kablamo.org/2014/03/18/cc-processors/">Part 1</a> introduced a number of basic definitions.
<a href="http://blog.kablamo.org/2014/03/21/cc-processors/">Part 2</a> discussed the difference between traditional gateways and the newer full stack gateways.</p>

<p>In Part 3, I am exploring some of the new &ldquo;full stack&rdquo; gateways which are a bit
more developer friendly and listing some key facts about each one.  All of
these provide a merchant account, gateway, payment processor etc and handle all
that complexity for you.</p>

<ul>
<li><a href="https://www.braintreepayments.com/">Braintree</a>

<ul>
<li>Tools for recurring billing</li>
<li>Tools to build a marketplace</li>
<li>Free for the first $50,000 in transactions</li>
<li>2.9% + $0.30 per transaction</li>
<li>$15 fee for each chargeback</li>
<li>Client side encryption of cc numbers with Braintree.js</li>
</ul>
</li>
<li><a href="https://stripe.com/">Stripe</a>

<ul>
<li>Tools for recurring billing</li>
<li>2.9% + $0.30 per transaction</li>
<li>$15 fee for each chargeback</li>
<li>Client side encryption of cc numbers with Stripe.js</li>
</ul>
</li>
<li><a href="https://www.balancedpayments.com/">Balanced</a>

<ul>
<li>Tools for recurring billing</li>
<li>Tools to build a marketplace</li>
<li>2.9% + $0.30 per transaction for credit/debit, volume discounts</li>
<li>Payouts to the business are $.25 each</li>
<li>No fees for chargebacks?</li>
<li>Client side encryption of cc numbers with Balanced.js</li>
</ul>
</li>
<li><a href="https://www.wepay.com/">WePay</a>

<ul>
<li>Tools for recurring billing</li>
<li>Tools to build a marketplace</li>
<li>2.9% + $0.30 per transaction for credit/debit, volume discounts</li>
<li>No client side encryption of cc numbers?</li>
</ul>
</li>
<li><a href="https://www.dwolla.com">Dwolla</a>

<ul>
<li>Tools for recurring billing</li>
<li>Tools to build a marketplace</li>
<li>Transactions under $10 are free, everything else is $0.25 per transaction</li>
<li>Does not accept credit or debit cards only ACH (so no gateway/merchant account are required)</li>
<li>Requires customers to create a Dwolla account</li>
<li>No client side encryption of cc numbers?</li>
</ul>
</li>
<li><a href="https://payments.amazon.com/home">Amazon FPS Payments</a>

<ul>
<li>Tools for recurring billing</li>
<li>Tools to build a marketplace</li>
<li>2.9% + $0.30 per transaction for credit/debit, volume discounts</li>
<li>2.9% + $0.30 per transaction, volume discounts</li>
<li>Can keep the customer on your site and customize the form for free</li>
<li>To contest a chargeback costs $10.</li>
<li>Merchants are not liable for chargebacks for physical goods (not services)</li>
<li>No client side encryption of cc numbers?</li>
</ul>
</li>
<li><a href="https://www.paypal.com/">Paypal</a>

<ul>
<li>Turn your computer into a credit card terminal</li>
<li>Swipe cards with a device that plugs into your phone or iPad.</li>
<li>2.9% + $0.30 per transaction, volume discounts</li>
<li>No monthly fee to send a customer to the Paypal site for payment</li>
<li>$30 monthly fee if you want to keep the customer on your site or customize the
form</li>
<li>No client side encryption of cc numbers?</li>
</ul>
</li>
<li><a href="http://square.com">Square</a> is in a similar space and positions themselves as being very simple.

<ul>
<li>Swipe cards with a device that plugs into your phone or iPad.</li>
<li>No developer api &mdash; you must use their web marketplace to sell online</li>
<li>2.75% per transaction</li>
</ul>
</li>
</ul>


<p>Please let me know if I&rsquo;ve made any errors and I will correct them.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction to online credit card processing - part 2]]></title>
    <link href="http://blog.kablamo.org/2014/03/21/cc-processors/"/>
    <updated>2014-03-21T00:00:00-05:00</updated>
    <id>http://blog.kablamo.org/2014/03/21/cc-processors</id>
    <content type="html"><![CDATA[<p>I am learning about online credit card processing.
<a href="http://blog.kablamo.org/2014/03/18/cc-processors/">Part 1</a> introduced a number of basic definitions.</p>

<p>The number of online payments is going to grow.  Only <a href="http://www.huffingtonpost.com/2012/06/07/credit-card-payments-growth_n_1575417.html">6% of credit card transactions are currently done online</a>.
With so much at stake, there are hundreds of payment gateways who provide a
variety of services. But I have chosen to divide them into two categories.</p>

<p>First there are <em>traditional gateways</em> who charge a monthly fee (in addition to
a variety of other fees) and often you need to obtain a merchant account on
your own which also has various fees associated with it.</p>

<p>The second category contains newer <em>full stack gateways</em> who are more user
friendly and provide a merchant account and a much simpler fee structure which
is generally a percentage charge on a per transaction basis with no monthly
fees.</p>

<p>These &ldquo;full stack&rdquo; gateways are convenient and easy but they can cost more.
They generally charge 2.9% + $0.30 per transaction.  Compare that to a
more traditional gateway such as <a href="http://www.authorize.net/">Authorize.net</a> who
charges $20 per month and $0.10 per transaction.  However you also have to
factor in the cost of a merchant account.  And both the gateway and merchant&rsquo;s
bank often charge a variety of fees which makes it difficult to assess the true
cost.</p>

<p>If you are doing a large number of transactions, saving small amounts of money
is going to make a big difference.  If you are not then it may be cheaper to
use a full stack processor and save yourself the dev work and accounting
effort.</p>

<p>One interesting company I would like to note is
<a href="https://spreedly.com">Spreedly</a>.  Spreedly provides an api layer on top many
other payment gateways so you can swap out gateways whenever you feel like it.
Their service works with a large number of payment gateways &mdash; currently 60
gateways in 73 countries.  They also give you the ability to deposit funds in
different merchant accounts based on location or other business logic.  They do
have a monthly fee structure and clearly you would only choose this solution if
you are processing a large number of transactions.</p>

<h1>Additional reading and resources</h1>

<ul>
<li><a href="http://www.nerdwallet.com/blog/credit-card-data/credit-card-transaction-volume-statistics/">Credit card and debit card transaction volume statistics</a></li>
<li><a href="http://blog.zactownsend.com/credit-card-processing-as-a-commodity-business">Credit card processing as a commodity business</a> by Zac Townsend</li>
<li><a href="http://gatewayindex.spreedly.com/">Compare gateways</a></li>
<li><a href="http://www.cardpaymentoptions.com/credit-card-processors">Credit card processor reviews</a></li>
<li><a href="http://www.jeffmould.com/2014/02/16/comparing-stripe-vs-braintree-vs-balanced-vs-dwolla/">Stripe vs Braintree vs Balanced vs Dwolla</a></li>
</ul>


<p>Also I found this series of videos was an excellent introduction to
understanding payments at a lower level.  Be aware this is probably more than
most web developers need/want to know.</p>

<ol>
<li> <a href="http://www.youtube.com/watch?v=fkUFizLjQo0">Names and nomenclature</a></li>
<li> <a href="http://www.youtube.com/watch?v=WvSEDRkyg0Q">Mechanics of an electronic payment</a></li>
<li> <a href="http://www.youtube.com/watch?v=tq316S9vW0s">Understanding interchange, Opening Visa &amp; Mastercards&#8217; kimono</a></li>
<li> <a href="http://www.youtube.com/watch?v=Ru4Dy-5IJEQ">Multicurrency in electronic payments</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What does 'use strict' do?]]></title>
    <link href="http://blog.kablamo.org/2014/03/19/use-strict/"/>
    <updated>2014-03-19T00:00:00-05:00</updated>
    <id>http://blog.kablamo.org/2014/03/19/use-strict</id>
    <content type="html"><![CDATA[<p>I always <code>use strict</code> in all my code.  But what does that actually mean?</p>

<h1>Enables strict refs</h1>

<p>Strict refs generates runtime errors when you use symbolic references.</p>

<pre><code>use strict 'refs';
$ref = "yarrr matey";
print $$ref;        # runtime error but without strict refs this is ok
</code></pre>

<h1>Enables strict vars</h1>

<p>Strict vars generates a compile time error if you access a variable that was
not declared or is not fully qualified.</p>

<pre><code>use strict 'vars';
$X::foo = 1;         # ok because its fully qualified
my $foo = 10;        # ok because my() was used.
$baz = 9;            # compile time error because $baz not declared before
</code></pre>

<h1>Enables strict subs</h1>

<p>Strict subs generates a compile time error if you use a bareword identifier
that&rsquo;s not a subroutine.</p>

<pre><code>no strict 'subs';
my $a = boop;
print $a; 
sub boop { return "dinosaurs smell good" }
</code></pre>

<p>The above prints &ldquo;boop&rdquo; instead of &ldquo;dinosaurs smell good&rdquo;.</p>

<pre><code>use strict 'subs';
my $b = splarf;      # &lt;--- compile time error here
sub splarf { return "dinosaurs smell good" }
</code></pre>

<p>The above generates a compile time error on line 2.</p>

<pre><code>use strict 'subs';
my $b = splarf(); 
sub splarf { return "dinosaurs smell good" }
</code></pre>

<p>The above prints &ldquo;dinosaurs smell good&rdquo; which is probably the desired output.</p>

<p>Sources:</p>

<ul>
<li><a href="https://metacpan.org/pod/strict">https://metacpan.org/pod/strict</a></li>
<li><a href="http://www.perl.com/pub/2001/01/begperl6.html#use">http://www.perl.com/pub/2001/01/begperl6.html#use</a> strict</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction to online credit card processing - part 1]]></title>
    <link href="http://blog.kablamo.org/2014/03/18/cc-processors/"/>
    <updated>2014-03-18T00:00:00-05:00</updated>
    <id>http://blog.kablamo.org/2014/03/18/cc-processors</id>
    <content type="html"><![CDATA[<p>I want to understand credit card processing.  So I will probably write a few
articles about it.  This article has some fundamental definitions.</p>

<h2>acquiring bank</h2>

<p>An <a href="https://en.wikipedia.org/wiki/Acquiring_bank">acquiring bank</a> is a bank
which processes card payments on behalf of a merchant.  The term &lsquo;acquirer&rsquo;
indicates the bank accepts (or acquires) credit card payments from card
issuing banks within a credit card association.  Acquirers take all the risk
and bear the burdern of most of the regulation.  Examples of acquirers are
Bank of America, FirstData, and Chase.</p>

<h2>credit card association</h2>

<p>Examples of credit card associations include Visa, MasterCard, Discover,
American Express, etc.</p>

<h2>issuing bank</h2>

<p>An <a href="https://en.wikipedia.org/wiki/Issuing_bank">issuing bank</a> is a bank which
provides credit cards to consumers.  The term &lsquo;issue&rsquo; indicates the bank issues
payments to the acquiring bank on behalf of the consumer.  The top issuers in
the US are American Express and Chase.</p>

<h2>payment processor</h2>

<p>A <a href="http://storecoach.com/blog/whats-difference-between-payment-processor-gateway/">payment processor</a>
is a company which peforms the actual funds transfer.  Its the technical
underpinning of a transaction.  Processors do authorization, funds transfer,
statements, calculate the interchange fee, and handle dispute management.
Processors take no risk on a transaction.  Examples of companies who are
processors are FirstData, Chase, and RBS WorldPay.</p>

<h2>gateway</h2>

<p>A <a href="https://en.wikipedia.org/wiki/Payment_gateway">payment gateway</a> is a service
which ties all the various groups together and provides a nice simple interface for
the merchant to build a shopping cart or marketplace without needing to
understand all the gory details.  The gateway authorizes credit card payments
by facillitating the transfer of information between a merchant&rsquo;s bank (the
acquiring bank) and a customer&rsquo;s bank (the issuing bank).</p>

<h2>merchant account</h2>

<p>A <a href="https://en.wikipedia.org/wiki/Merchant_account">merchant account</a> is a type
of bank account provided by an acquiring bank which allows merchants to accept
payments via credit card.</p>

<h2>interchange fee</h2>

<p>The <a href="https://en.wikipedia.org/wiki/Interchange_fee">interchange fee</a> is
the fee paid to the issuing bank by the acquiring bank.  The amount varies by
card type, card brand, transaction amount, and other factors and is set by the
card associations like Visa, Mastercard, or Discover.</p>

<h2>discount rate</h2>

<p>The <a href="http://merchantwarehouse.com/understanding-merchant-account-discount-rates">discount rate</a>
is made up of several different fees which are charged to the merchant.  This
usually includes the interchange fee.  The discount rate is a fixed
percentage-based fee charged for each transaction.  A portion of the fee is
passed to the acquiring bank who likely passes a portion to the issuing bank
who in turn passes a portion to the credit card association.</p>

<p>Rates are influenced by many things including the level of risk. Brick and
mortar stores where a card is physically present are considered the lowest
risk.  There are three categories of transaction types based on risk and each
have a different discount rate: qualified, mid-qualified and non-qualified.
Internet transactions are non-qualified which is the most expensive category.</p>

<h2>basis point</h2>

<p>1 <a href="https://en.wikipedia.org/wiki/Merchant_account#Terms_to_know">basis point</a>
is 1%.  A term sometimes used when discussing the discount rate.</p>

<h2>Average Ticket Size (AVT)</h2>

<p>The might make more sense to outsiders if they had called it Average
Transaction Size.  Its the total monthly sales amount divided by the total
number of transactions for that month.  Merchant account rates and fees are
often based on a merchant&rsquo;s monthly AVT.</p>

<h2>PCI DSS</h2>

<p>PCI stands for Payment Card Industry.  DSS stands for Data Security Standard.
It is a set of security standards for organizations who handle cardholder
information.  It is defined by the PCI Security Standards Council (PCI SSC)
which was formed in 2006 by the major card associations.  Note that there is a
difference between being compliant being validated as compliant.  Validation is
done annually by a Qualified Security Accessor (QSA) who creates a Report on
Compliance (ROC) for organizations handle lots of transactions or a
Self-Assessment Questionaire (SAQ) for companies handling less transactions.</p>

<h1>See also</h1>

<p><a href="http://merchantwarehouse.com/glossary">http://merchantwarehouse.com/glossary</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[my vs our vs local]]></title>
    <link href="http://blog.kablamo.org/2014/03/17/our-my-local/"/>
    <updated>2014-03-17T00:00:00-05:00</updated>
    <id>http://blog.kablamo.org/2014/03/17/our-my-local</id>
    <content type="html"><![CDATA[<h1>The short version for the impatient</h1>

<ul>
<li> <code>my()</code> creates a local variable</li>
<li> <code>our()</code> creates a package variable</li>
<li> <code>local()</code> temporarily changes the local value of a global variable</li>
<li> The above is mostly true.</li>
</ul>


<h1>The long version for the irrepressibly quixotic</h1>

<h2>my()</h2>

<p><code>my</code> declares the listed variable to be local to the enclosing block, file,
or <code>eval</code>.  That is to say its <em>scope</em> is local.  This kind of variable is
known as a <em>lexical variable</em>.  Note that lexical variables are hidden from
subroutines which are called from within the enclosing block.  This is known as
<em>lexical scoping</em>.</p>

<h2>our()</h2>

<p><code>our</code> creates an alias to a <em>package variable</em>.  The alias is local to the
enclosing block, file, or <code>eval</code>.  That is to say the alias is lexically scoped
just like any lexical variable.  However a package variable belongs to a
package.  It can be accessed from anywhere if you use its fully qualified name.
Here are two examples of fully qualified package variables:</p>

<pre><code>$main::a
%MyPackage::boop
</code></pre>

<p>Note that package variables are also global variables.</p>

<h2>local()</h2>

<p><code>local</code> gives temporary values to global variables.  It does not create a local
variable.  It is most commonly used when you want to locally modify a global
variable such as one of the punctuation variables.  For example:</p>

<pre><code>{ 
    local $| = 1; # enable autoflush for STDOUT
    say "hi mom";
}
</code></pre>

<p><code>local</code> modifies the listed variable to be local to the enclosing block,
file, or <code>eval</code> &mdash; AND to any subroutine called from within that block.  This
is known as <em>dynamic scoping</em>.</p>

<h1>Sources</h1>

<p>For a more complete understanding I recommend <code>perldoc perlfunc</code> and especially
<code>perldoc perlsub</code>.  Also the following links may be helpful:</p>

<ul>
<li><a href="https://metacpan.org/pod/perlfunc">https://metacpan.org/pod/perlfunc</a></li>
<li><a href="https://metacpan.org/pod/perlsub">https://metacpan.org/pod/perlsub</a></li>
<li><a href="http://perlmaven.com/package-variables-and-lexical-variables-in-perl">http://perlmaven.com/package-variables-and-lexical-variables-in-perl</a></li>
<li><a href="http://www.perlmonks.org/?node_id=95813">http://www.perlmonks.org/?node_id=95813</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why you should disagree in an interview]]></title>
    <link href="http://blog.kablamo.org/2014/03/16/disagree-interview/"/>
    <updated>2014-03-16T00:00:00-05:00</updated>
    <id>http://blog.kablamo.org/2014/03/16/disagree-interview</id>
    <content type="html"><![CDATA[<p>Today I&rsquo;m writing about something I noticed while doing interviews recently.</p>

<p>If I disagree with a decision a company made, I need to jump into that with
both feet.  There is sometimes an instinct to say &ldquo;I suppose I can live with
that&rdquo; or &ldquo;I don&rsquo;t know enough about why this choice was made to complain about
it&rdquo;.  But the goal is not to complain or to highlight their ignorance or to
have an argument.</p>

<p>Disagreeing starts a discussion.  This creates an opportunity to do 2 things.</p>

<p>First, it allows me to show case what I know.  The fact I have an opinion shows
I have worked on this problem before and over the course of the discussion I
will be able to demonstrate I understand the pros and cons of the different
options and have expertise there.</p>

<p>Second, I will come to understand why the company got into the position they
are in.  Usually there is a good reason.  If it was made through ignorance I
will find out if are they open to fixing the problem &mdash; subject to priorities
of course.  I may also learn if they are interested in my opinion or are
looking for a soldier who follows orders.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Questions I ask in interviews]]></title>
    <link href="http://blog.kablamo.org/2014/03/14/interview-questions/"/>
    <updated>2014-03-14T00:00:00-05:00</updated>
    <id>http://blog.kablamo.org/2014/03/14/interview-questions</id>
    <content type="html"><![CDATA[<p>I recently relocated from London to the Chicago area so I have been doing
interviews.  When I interview a potential client or employer I carry this list of
questions with me.  Most of the questions I have taken from other sources
online.  I have listed them in roughly the order I ask them.</p>

<h1>Understanding the job</h1>

<ul>
<li>What will I be doing every day (precisely)?</li>
<li>Why are you hiring? New product? Scaling? Someone quit?</li>
<li>Who will I report to?</li>
<li>Who will I be working with?  How big are the teams?</li>
<li>What are my boss&#8217; goals for the next 6 months/year?</li>
<li>What is the key metric for the company? For my group? For my boss?</li>
</ul>


<h1>Understanding the culture</h1>

<ul>
<li>How do you build software?  Where do requirements and features come from?
Is it a very formal process or is there no process?</li>
<li>What problems does the group have that need to be solved?</li>
<li>Is there a mandate to fix legacy code and problems that exist?</li>
<li>What do you wish you had known before starting work here?</li>
<li>Whats the worst part of this job and whats the coolest thing you have built here, personally?</li>
</ul>


<h1>Tools and best practices</h1>

<ul>
<li>What tools are being used?

<ul>
<li>bug tracking</li>
<li>version control</li>
<li>which version of Perl</li>
<li>what operating system</li>
<li>why were those choices made</li>
</ul>
</li>
<li>Is there a mandate to use the latest stuff from CPAN?</li>
<li>Are there tests?</li>
<li>Are there automated tests?</li>
<li>What is deployment like?</li>
<li>Is Moose used? OO?</li>
</ul>


<h1>Miscellaneous</h1>

<ul>
<li>Is there any allowance for remote work?</li>
<li>Are there core business hours?</li>
<li>Will I be oncall?</li>
</ul>

]]></content>
  </entry>
  
</feed>
