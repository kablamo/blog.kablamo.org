<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[KABLAMO]]></title>
  <link href="http://blog.kablamo.org/atom.xml" rel="self"/>
  <link href="http://blog.kablamo.org/"/>
  <updated>2014-03-25T22:41:57-04:00</updated>
  <id>http://blog.kablamo.org/</id>
  <author>
    <name><![CDATA[Eric Johnson]]></name>
    <email><![CDATA[kablamo@kablamo.org]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[An experiment - living with less than 200 things]]></title>
    <link href="http://blog.kablamo.org/2014/03/24/experiments/"/>
    <updated>2014-03-24T00:00:00-04:00</updated>
    <id>http://blog.kablamo.org/2014/03/24/experiments</id>
    <content type="html"><![CDATA[<ul>
<li><strong>Stuff is expensive to buy.</strong>  Especially when I end up only using things
once or twice like books, dvds, dress shoes, and ties.</li>
<li><strong>Stuff is expensive to store.</strong>  One time I had to rent a storage locker
because I couldn&rsquo;t take my things when I moved to China.  Some people get
big houses with walk in closets and a three car garage.</li>
<li><strong>Stuff is expensive to maintain.</strong>  Broken stuff needs to be fixed.  Owning
a house means I need to fix the roof. Owning a car means I need to change
the tires.</li>
<li><strong>Stuff is time consuming to maintain.</strong>  I have to dust my stuff.
A bigger house means more sweeping.
A bigger yard means more mowing. Owning a car means cleaning it and
changing the oil and scraping ice off the windows.<br/>
I need to go to the store to find replacement parts,
batteries, light bulbs, cleaning supplies, and duct tape.</li>
<li><strong>Stuff is stressful to own.</strong>  I might
lose it or dent it or scratch it or drop it or step on it.  Or it might
catch on fire.  Or someone might steal it.  Sometimes I get so stressed I buy
insurance for my stuff.</li>
<li><strong>Stuff reduces my freedom.</strong>  Its hard to move to new place because I have
to carry all my stuff with me.</li>
</ul>


<p>Therefore I have decided to live with less stuff.  So I hereby declare war on
my stuff.  And also on my things.  Here is my 4 point plan to free myself from
the tedious tyranny of too many things:</p>

<ul>
<li><strong>Point 1:</strong> Keep a comprehensive inventory of all my stuff.</li>
<li><strong>Point 2:</strong> Ruthlessly reduce the number of things in my inventory to less than 200.</li>
<li><strong>Point 3:</strong> No new stuff unless I throw out some old stuff first.</li>
<li><strong>Point 4:</strong> Have a beer.</li>
</ul>


<p>If I were hard core I would throw out everything I didn&rsquo;t use in the last 6
months.  Maybe I&rsquo;ll be hard core at some point in the future.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction to online credit card processing - part 3]]></title>
    <link href="http://blog.kablamo.org/2014/03/22/cc-processors/"/>
    <updated>2014-03-22T00:00:00-04:00</updated>
    <id>http://blog.kablamo.org/2014/03/22/cc-processors</id>
    <content type="html"><![CDATA[<p>I am learning about online credit card processing.
<a href="http://blog.kablamo.org/2014/03/18/cc-processors/">Part 1</a> introduced a number of basic definitions.
<a href="http://blog.kablamo.org/2014/03/21/cc-processors/">Part 2</a> discussed the difference between traditional gateways and the newer full stack gateways.</p>

<p>In Part 3, I am exploring some of the new &ldquo;full stack&rdquo; gateways which are a bit
more developer friendly and listing some key facts about each one.  All of
these provide a merchant account, gateway, payment processor etc and handle all
that complexity for you.</p>

<ul>
<li><a href="https://www.braintreepayments.com/">Braintree</a>

<ul>
<li>Tools for recurring billing</li>
<li>Tools to build a marketplace</li>
<li>Free for the first $50,000 in transactions</li>
<li>2.9% + $0.30 per transaction</li>
<li>$15 fee for each chargeback</li>
<li>Client side encryption of cc numbers with Braintree.js</li>
</ul>
</li>
<li><a href="https://stripe.com/">Stripe</a>

<ul>
<li>Tools for recurring billing</li>
<li>2.9% + $0.30 per transaction</li>
<li>$15 fee for each chargeback</li>
<li>Client side encryption of cc numbers with Stripe.js</li>
</ul>
</li>
<li><a href="https://www.balancedpayments.com/">Balanced</a>

<ul>
<li>Tools for recurring billing</li>
<li>Tools to build a marketplace</li>
<li>2.9% + $0.30 per transaction for credit/debit, volume discounts</li>
<li>Payouts to the business are $.25 each</li>
<li>No fees for chargebacks?</li>
<li>Client side encryption of cc numbers with Balanced.js</li>
</ul>
</li>
<li><a href="https://www.wepay.com/">WePay</a>

<ul>
<li>Tools for recurring billing</li>
<li>Tools to build a marketplace</li>
<li>2.9% + $0.30 per transaction for credit/debit, volume discounts</li>
<li>No client side encryption of cc numbers?</li>
</ul>
</li>
<li><a href="https://www.dwolla.com">Dwolla</a>

<ul>
<li>Tools for recurring billing</li>
<li>Tools to build a marketplace</li>
<li>Transactions under $10 are free, everything else is $0.25 per transaction</li>
<li>Does not accept credit or debit cards only ACH (so no gateway/merchant account are required)</li>
<li>Requires customers to create a Dwolla account</li>
<li>No client side encryption of cc numbers?</li>
</ul>
</li>
<li><a href="https://payments.amazon.com/home">Amazon FPS Payments</a>

<ul>
<li>Tools for recurring billing</li>
<li>Tools to build a marketplace</li>
<li>2.9% + $0.30 per transaction for credit/debit, volume discounts</li>
<li>2.9% + $0.30 per transaction, volume discounts</li>
<li>Can keep the customer on your site and customize the form for free</li>
<li>To contest a chargeback costs $10.</li>
<li>Merchants are not liable for chargebacks for physical goods (not services)</li>
<li>No client side encryption of cc numbers?</li>
</ul>
</li>
<li><a href="https://www.paypal.com/">Paypal</a>

<ul>
<li>Turn your computer into a credit card terminal</li>
<li>Swipe cards with a device that plugs into your phone or iPad.</li>
<li>2.9% + $0.30 per transaction, volume discounts</li>
<li>No monthly fee to send a customer to the Paypal site for payment</li>
<li>$30 monthly fee if you want to keep the customer on your site or customize the
form</li>
<li>No client side encryption of cc numbers?</li>
</ul>
</li>
<li><a href="http://square.com">Square</a> is in a similar space and positions themselves as being very simple.

<ul>
<li>Swipe cards with a device that plugs into your phone or iPad.</li>
<li>No developer api &mdash; you must use their web marketplace to sell online</li>
<li>2.75% per transaction</li>
</ul>
</li>
</ul>


<p>Please let me know if I&rsquo;ve made any errors and I will correct them.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction to online credit card processing - part 2]]></title>
    <link href="http://blog.kablamo.org/2014/03/21/cc-processors/"/>
    <updated>2014-03-21T00:00:00-04:00</updated>
    <id>http://blog.kablamo.org/2014/03/21/cc-processors</id>
    <content type="html"><![CDATA[<p>I am learning about online credit card processing.
<a href="http://blog.kablamo.org/2014/03/18/cc-processors/">Part 1</a> introduced a number of basic definitions.</p>

<p>The number of online payments is going to grow.  Only <a href="http://www.huffingtonpost.com/2012/06/07/credit-card-payments-growth_n_1575417.html">6% of credit card transactions are currently done online</a>.
With so much at stake, there are hundreds of payment gateways who provide a
variety of services. But I have chosen to divide them into two categories.</p>

<p>First there are <em>traditional gateways</em> who charge a monthly fee (in addition to
a variety of other fees) and often you need to obtain a merchant account on
your own which also has various fees associated with it.</p>

<p>The second category contains newer <em>full stack gateways</em> who are more user
friendly and provide a merchant account and a much simpler fee structure which
is generally a percentage charge on a per transaction basis with no monthly
fees.</p>

<p>These &ldquo;full stack&rdquo; gateways are convenient and easy but they can cost more.
They generally charge 2.9% + $0.30 per transaction.  Compare that to a
more traditional gateway such as <a href="http://www.authorize.net/">Authorize.net</a> who
charges $20 per month and $0.10 per transaction.  However you also have to
factor in the cost of a merchant account.  And both the gateway and merchant&rsquo;s
bank often charge a variety of fees which makes it difficult to assess the true
cost.</p>

<p>If you are doing a large number of transactions, saving small amounts of money
is going to make a big difference.  If you are not then it may be cheaper to
use a full stack processor and save yourself the dev work and accounting
effort.</p>

<p>One interesting company I would like to note is
<a href="https://spreedly.com">Spreedly</a>.  Spreedly provides an api layer on top many
other payment gateways so you can swap out gateways whenever you feel like it.
Their service works with a large number of payment gateways &mdash; currently 60
gateways in 73 countries.  They also give you the ability to deposit funds in
different merchant accounts based on location or other business logic.  They do
have a monthly fee structure and clearly you would only choose this solution if
you are processing a large number of transactions.</p>

<h1>Additional reading and resources</h1>

<ul>
<li><a href="http://www.nerdwallet.com/blog/credit-card-data/credit-card-transaction-volume-statistics/">Credit card and debit card transaction volume statistics</a></li>
<li><a href="http://blog.zactownsend.com/credit-card-processing-as-a-commodity-business">Credit card processing as a commodity business</a> by Zac Townsend</li>
<li><a href="http://gatewayindex.spreedly.com/">Compare gateways</a></li>
<li><a href="http://www.cardpaymentoptions.com/credit-card-processors">Credit card processor reviews</a></li>
<li><a href="http://www.jeffmould.com/2014/02/16/comparing-stripe-vs-braintree-vs-balanced-vs-dwolla/">Stripe vs Braintree vs Balanced vs Dwolla</a></li>
</ul>


<p>Also I found this series of videos was an excellent introduction to
understanding payments at a lower level.  Be aware this is probably more than
most web developers need/want to know.</p>

<ol>
<li> <a href="http://www.youtube.com/watch?v=fkUFizLjQo0">Names and nomenclature</a></li>
<li> <a href="http://www.youtube.com/watch?v=WvSEDRkyg0Q">Mechanics of an electronic payment</a></li>
<li> <a href="http://www.youtube.com/watch?v=tq316S9vW0s">Understanding interchange, Opening Visa &amp; Mastercards&#8217; kimono</a></li>
<li> <a href="http://www.youtube.com/watch?v=Ru4Dy-5IJEQ">Multicurrency in electronic payments</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What does 'use strict' do?]]></title>
    <link href="http://blog.kablamo.org/2014/03/19/use-strict/"/>
    <updated>2014-03-19T00:00:00-04:00</updated>
    <id>http://blog.kablamo.org/2014/03/19/use-strict</id>
    <content type="html"><![CDATA[<p>I always <code>use strict</code> in all my code.  But what does that actually mean?</p>

<h1>Enables strict refs</h1>

<p>Strict refs generates runtime errors when you use symbolic references.</p>

<pre><code>use strict 'refs';
$ref = "yarrr matey";
print $$ref;        # runtime error but without strict refs this is ok
</code></pre>

<h1>Enables strict vars</h1>

<p>Strict vars generates a compile time error if you access a variable that was
not declared or is not fully qualified.</p>

<pre><code>use strict 'vars';
$X::foo = 1;         # ok because its fully qualified
my $foo = 10;        # ok because my() was used.
$baz = 9;            # compile time error because $baz not declared before
</code></pre>

<h1>Enables strict subs</h1>

<p>Strict subs generates a compile time error if you use a bareword identifier
that&rsquo;s not a subroutine.</p>

<pre><code>no strict 'subs';
my $a = boop;
print $a; 
sub boop { return "dinosaurs smell good" }
</code></pre>

<p>The above prints &ldquo;boop&rdquo; instead of &ldquo;dinosaurs smell good&rdquo;.</p>

<pre><code>use strict 'subs';
my $b = splarf;      # &lt;--- compile time error here
sub splarf { return "dinosaurs smell good" }
</code></pre>

<p>The above generates a compile time error on line 2.</p>

<pre><code>use strict 'subs';
my $b = splarf(); 
sub splarf { return "dinosaurs smell good" }
</code></pre>

<p>The above prints &ldquo;dinosaurs smell good&rdquo; which is probably the desired output.</p>

<p>Sources:</p>

<ul>
<li><a href="https://metacpan.org/pod/strict">https://metacpan.org/pod/strict</a></li>
<li><a href="http://www.perl.com/pub/2001/01/begperl6.html#use">http://www.perl.com/pub/2001/01/begperl6.html#use</a> strict</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction to online credit card processing - part 1]]></title>
    <link href="http://blog.kablamo.org/2014/03/18/cc-processors/"/>
    <updated>2014-03-18T00:00:00-04:00</updated>
    <id>http://blog.kablamo.org/2014/03/18/cc-processors</id>
    <content type="html"><![CDATA[<p>I want to understand credit card processing.  So I will probably write a few
articles about it.  This article has some fundamental definitions.</p>

<h2>acquiring bank</h2>

<p>An <a href="https://en.wikipedia.org/wiki/Acquiring_bank">acquiring bank</a> is a bank
which processes card payments on behalf of a merchant.  The term &lsquo;acquirer&rsquo;
indicates the bank accepts (or acquires) credit card payments from card
issuing banks within a credit card association.  Acquirers take all the risk
and bear the burdern of most of the regulation.  Examples of acquirers are
Bank of America, FirstData, and Chase.</p>

<h2>credit card association</h2>

<p>Examples of credit card associations include Visa, MasterCard, Discover,
American Express, etc.</p>

<h2>issuing bank</h2>

<p>An <a href="https://en.wikipedia.org/wiki/Issuing_bank">issuing bank</a> is a bank which
provides credit cards to consumers.  The term &lsquo;issue&rsquo; indicates the bank issues
payments to the acquiring bank on behalf of the consumer.  The top issuers in
the US are American Express and Chase.</p>

<h2>payment processor</h2>

<p>A <a href="http://storecoach.com/blog/whats-difference-between-payment-processor-gateway/">payment processor</a>
is a company which peforms the actual funds transfer.  Its the technical
underpinning of a transaction.  Processors do authorization, funds transfer,
statements, calculate the interchange fee, and handle dispute management.
Processors take no risk on a transaction.  Examples of companies who are
processors are FirstData, Chase, and RBS WorldPay.</p>

<h2>gateway</h2>

<p>A <a href="https://en.wikipedia.org/wiki/Payment_gateway">payment gateway</a> is a service
which ties all the various groups together and provides a nice simple interface for
the merchant to build a shopping cart or marketplace without needing to
understand all the gory details.  The gateway authorizes credit card payments
by facillitating the transfer of information between a merchant&rsquo;s bank (the
acquiring bank) and a customer&rsquo;s bank (the issuing bank).</p>

<h2>merchant account</h2>

<p>A <a href="https://en.wikipedia.org/wiki/Merchant_account">merchant account</a> is a type
of bank account provided by an acquiring bank which allows merchants to accept
payments via credit card.</p>

<h2>interchange fee</h2>

<p>The <a href="https://en.wikipedia.org/wiki/Interchange_fee">interchange fee</a> is
the fee paid to the issuing bank by the acquiring bank.  The amount varies by
card type, card brand, transaction amount, and other factors and is set by the
card associations like Visa, Mastercard, or Discover.</p>

<h2>discount rate</h2>

<p>The <a href="http://merchantwarehouse.com/understanding-merchant-account-discount-rates">discount rate</a>
is made up of several different fees which are charged to the merchant.  This
usually includes the interchange fee.  The discount rate is a fixed
percentage-based fee charged for each transaction.  A portion of the fee is
passed to the acquiring bank who likely passes a portion to the issuing bank
who in turn passes a portion to the credit card association.</p>

<p>Rates are influenced by many things including the level of risk. Brick and
mortar stores where a card is physically present are considered the lowest
risk.  There are three categories of transaction types based on risk and each
have a different discount rate: qualified, mid-qualified and non-qualified.
Internet transactions are non-qualified which is the most expensive category.</p>

<h2>basis point</h2>

<p>1 <a href="https://en.wikipedia.org/wiki/Merchant_account#Terms_to_know">basis point</a>
is 1%.  A term sometimes used when discussing the discount rate.</p>

<h2>Average Ticket Size (AVT)</h2>

<p>The might make more sense to outsiders if they had called it Average
Transaction Size.  Its the total monthly sales amount divided by the total
number of transactions for that month.  Merchant account rates and fees are
often based on a merchant&rsquo;s monthly AVT.</p>

<h2>PCI DSS</h2>

<p>PCI stands for Payment Card Industry.  DSS stands for Data Security Standard.
It is a set of security standards for organizations who handle cardholder
information.  It is defined by the PCI Security Standards Council (PCI SSC)
which was formed in 2006 by the major card associations.  Note that there is a
difference between being compliant being validated as compliant.  Validation is
done annually by a Qualified Security Accessor (QSA) who creates a Report on
Compliance (ROC) for organizations handle lots of transactions or a
Self-Assessment Questionaire (SAQ) for companies handling less transactions.</p>

<h1>See also</h1>

<p><a href="http://merchantwarehouse.com/glossary">http://merchantwarehouse.com/glossary</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[my vs our vs local]]></title>
    <link href="http://blog.kablamo.org/2014/03/17/our-my-local/"/>
    <updated>2014-03-17T00:00:00-04:00</updated>
    <id>http://blog.kablamo.org/2014/03/17/our-my-local</id>
    <content type="html"><![CDATA[<h1>The short version for the impatient</h1>

<ul>
<li> <code>my()</code> creates a local variable</li>
<li> <code>our()</code> creates a package variable</li>
<li> <code>local()</code> temporarily changes the local value of a global variable</li>
<li> The above is mostly true.</li>
</ul>


<h1>The long version for the irrepressibly quixotic</h1>

<h2>my()</h2>

<p><code>my</code> declares the listed variable to be local to the enclosing block, file,
or <code>eval</code>.  That is to say its <em>scope</em> is local.  This kind of variable is
known as a <em>lexical variable</em>.  Note that lexical variables are hidden from
subroutines which are called from within the enclosing block.  This is known as
<em>lexical scoping</em>.</p>

<h2>our()</h2>

<p><code>our</code> creates an alias to a <em>package variable</em>.  The alias is local to the
enclosing block, file, or <code>eval</code>.  That is to say the alias is lexically scoped
just like any lexical variable.  However a package variable belongs to a
package.  It can be accessed from anywhere if you use its fully qualified name.
Here are two examples of fully qualified package variables:</p>

<pre><code>$main::a
%MyPackage::boop
</code></pre>

<p>Note that package variables are also global variables.</p>

<h2>local()</h2>

<p><code>local</code> gives temporary values to global variables.  It does not create a local
variable.  It is most commonly used when you want to locally modify a global
variable such as one of the punctuation variables.  For example:</p>

<pre><code>{ 
    local $| = 1; # enable autoflush for STDOUT
    say "hi mom";
}
</code></pre>

<p><code>local</code> modifies the listed variable to be local to the enclosing block,
file, or <code>eval</code> &mdash; AND to any subroutine called from within that block.  This
is known as <em>dynamic scoping</em>.</p>

<h1>Sources</h1>

<p>For a more complete understanding I recommend <code>perldoc perlfunc</code> and especially
<code>perldoc perlsub</code>.  Also the following links may be helpful:</p>

<ul>
<li><a href="https://metacpan.org/pod/perlfunc">https://metacpan.org/pod/perlfunc</a></li>
<li><a href="https://metacpan.org/pod/perlsub">https://metacpan.org/pod/perlsub</a></li>
<li><a href="http://perlmaven.com/package-variables-and-lexical-variables-in-perl">http://perlmaven.com/package-variables-and-lexical-variables-in-perl</a></li>
<li><a href="http://www.perlmonks.org/?node_id=95813">http://www.perlmonks.org/?node_id=95813</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why you should disagree in an interview]]></title>
    <link href="http://blog.kablamo.org/2014/03/16/disagree-interview/"/>
    <updated>2014-03-16T00:00:00-04:00</updated>
    <id>http://blog.kablamo.org/2014/03/16/disagree-interview</id>
    <content type="html"><![CDATA[<p>Today I&rsquo;m writing about something I noticed while doing interviews recently.</p>

<p>If I disagree with a decision a company made, I need to jump into that with
both feet.  There is sometimes an instinct to say &ldquo;I suppose I can live with
that&rdquo; or &ldquo;I don&rsquo;t know enough about why this choice was made to complain about
it&rdquo;.  But the goal is not to complain or to highlight their ignorance or to
have an argument.</p>

<p>Disagreeing starts a discussion.  This creates an opportunity to do 2 things.</p>

<p>First, it allows me to show case what I know.  The fact I have an opinion shows
I have worked on this problem before and over the course of the discussion I
will be able to demonstrate I understand the pros and cons of the different
options and have expertise there.</p>

<p>Second, I will come to understand why the company got into the position they
are in.  Usually there is a good reason.  If it was made through ignorance I
will find out if are they open to fixing the problem &mdash; subject to priorities
of course.  I may also learn if they are interested in my opinion or are
looking for a soldier who follows orders.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Questions I ask in interviews]]></title>
    <link href="http://blog.kablamo.org/2014/03/14/interview-questions/"/>
    <updated>2014-03-14T00:00:00-04:00</updated>
    <id>http://blog.kablamo.org/2014/03/14/interview-questions</id>
    <content type="html"><![CDATA[<p>I recently relocated from London to the Chicago area so I have been doing
interviews.  When I interview a potential client or employer I carry this list of
questions with me.  Most of the questions I have taken from other sources
online.  I have listed them in roughly the order I ask them.</p>

<h1>Understanding the job</h1>

<ul>
<li>What will I be doing every day (precisely)?</li>
<li>Why are you hiring? New product? Scaling? Someone quit?</li>
<li>Who will I report to?</li>
<li>Who will I be working with?  How big are the teams?</li>
<li>What are my boss&#8217; goals for the next 6 months/year?</li>
<li>What is the key metric for the company? For my group? For my boss?</li>
</ul>


<h1>Understanding the culture</h1>

<ul>
<li>How do you build software?  Where do requirements and features come from?
Is it a very formal process or is there no process?</li>
<li>What problems does the group have that need to be solved?</li>
<li>Is there a mandate to fix legacy code and problems that exist?</li>
<li>What do you wish you had known before starting work here?</li>
<li>Whats the worst part of this job and whats the coolest thing you have built here, personally?</li>
</ul>


<h1>Tools and best practices</h1>

<ul>
<li>What tools are being used?

<ul>
<li>bug tracking</li>
<li>version control</li>
<li>which version of Perl</li>
<li>what operating system</li>
<li>why were those choices made</li>
</ul>
</li>
<li>Is there a mandate to use the latest stuff from CPAN?</li>
<li>Are there tests?</li>
<li>Are there automated tests?</li>
<li>What is deployment like?</li>
<li>Is Moose used? OO?</li>
</ul>


<h1>Miscellaneous</h1>

<ul>
<li>Is there any allowance for remote work?</li>
<li>Are there core business hours?</li>
<li>Will I be oncall?</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to build a Duck Duck Go instant answer]]></title>
    <link href="http://blog.kablamo.org/2014/02/28/duckduckgo/"/>
    <updated>2014-02-28T00:00:00-05:00</updated>
    <id>http://blog.kablamo.org/2014/02/28/duckduckgo</id>
    <content type="html"><![CDATA[<p>Instant answers are those little boxes at the top of the DuckDuckGo search
results page.  I made one for discovering international calling codes &mdash; or
dialing codes if you prefer.</p>

<p><img src="http://blog.kablamo.org/images/for-posts/2014-02-28-singapore.png" width="700" height="424">
<img src="http://blog.kablamo.org/images/for-posts/2014-02-28-down-under.png" width="700" height="424"></p>

<p>If you want to hack on DuckDuckGo and add your own instant answer its pretty
simple to <a href="http://duckduckhack.com">get started</a>.  You can use Vagrant and
VirtualBox to get a complete working dev environment.  But if you are already
running Ubuntu or OSX the following recipe is easier:</p>

<pre><code>curl http://duckpan.org/install.pl | perl 
cpanm App::DuckPAN
duckpan installdeps # installs dependencies from DuckPAN (not CPAN) to locallib
</code></pre>

<p>Next fork the repository you want to hack on.  To choose the correct repository
think about what kind of data source you are using to generate your instant answer.</p>

<ul>
<li> Fork the <a href="https://github.com/duckduckgo/zeroclickinfo-spice">spice repo</a>
 if you have a real time data source like a JSON web API.</li>
<li> Fork the <a href="https://github.com/duckduckgo/zeroclickinfo-goodie">goodie repo</a>
 if you generate your instant answer with code and need no network access.</li>
<li> Fork the <a href="https://github.com/duckduckgo/zeroclickinfo-fathead">fathead repo</a>
 if your data source can be placed in a key/value store.</li>
<li> Fork the <a href="https://github.com/duckduckgo/zeroclickinfo-fathead">longtail repo</a>
 if your data source requires a full text search.</li>
</ul>


<p>Now you can start hacking.  I&rsquo;ll show you how the capitalization instant answer
from the goodie repo works.  Below is the code.  I added comments to explain
things a bit.</p>

<pre><code>package DDG::Goodie::Capitalize;
use DDG::Goodie;

# If a DuckDuckGo search query contains any of these words at the start or
# end of the query, the 'remainder' handler below will run.
triggers startend =&gt; 'capitalize', 'uppercase', 'upper case';

# This block of code is pretty much meta data describing this instant
# answer.  Mostly it is used by https://duckduckgo.com/goodies.
zci answer_type =&gt; "capitalize";
primary_example_queries 'capitalize this';
secondary_example_queries 'uppercase that';
description 'capitalize a string';
name 'Capitalize';
code_url 'https://github.com/duckduckgo/zeroclickinfo-goodies/blob/master/lib/DDG/Goodie/Capitalize.pm';
category 'conversions';
topics 'programming';
attribution twitter =&gt; 'crazedpsyc',
            cpan    =&gt; 'CRZEDPSYC' ;

# This is is where the magic happens.  $_ contains the query minus the
# trigger word.  The return value from this sub shows up on the DuckDuckGo
# search results page as an instant answer.
handle remainder =&gt; sub { uc ($_) };
</code></pre>

<p>To test your new instant answer you can launch a little web server with the following command:</p>

<pre><code>duckpan server
</code></pre>

<p>Then open your favorite web browser and surf to
<a href="http://0:5000/?q=capitalize+aliens+smell+better+than+dinosaurs">http://0:5000/?q=capitalize+aliens+smell+better+than+dinosaurs</a> and you should
see something like this:</p>

<p><img src="http://blog.kablamo.org/images/for-posts/2014-02-28-capitalize.png" width="700" height="424"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[I made a Readline cheat sheet]]></title>
    <link href="http://blog.kablamo.org/2014/01/01/readline-cheat-sheet/"/>
    <updated>2014-01-01T00:00:00-05:00</updated>
    <id>http://blog.kablamo.org/2014/01/01/readline-cheat-sheet</id>
    <content type="html"><![CDATA[<p>Recently Ovid pointed out <a href="http://blogs.perl.org/users/ovid/2014/01/ditching-a-language.html">large projects are much more likely to fail</a>.
I have a few large goals I&rsquo;d like to accomplish.  For example I want to improve
my front end design skills.  Rather than trying to tackle this problem all
at once, I made up a small project for myself.</p>

<p>I created a <a href="http://readline.kablamo.org/emacs.html">Readline cheat sheet</a> and
I was able to complete this project in about a day.  Here are some
of the things I learned:</p>

<ul>
<li><p><strong>Bootstrap</strong> &ndash; I always worry libraries and frameworks like
<a href="http://getbootstrap.com">Bootstrap</a> are overkill and bloat since I only need
a tiny portion of their features.  But its undeniable that I was able to quickly
build a responsive mobile friendly website without needing to worry about the
technical details.</p></li>
<li><p><strong>Readline commands</strong> &ndash; If I had to pick one keyboad shortcut to recommend it
would be <code>Ctrl-r</code> which allows you to search backwards through your
history.  I also like the incremental undo command: <code>Ctrl-_</code>.</p></li>
<li><p><strong>Text::Xslate</strong> &ndash; People keep mentioning
<a href="https://metacpan.org/pod/Text::Xslate">Text::Xslate</a> so I wanted to give it a try.
The docs say its full featured and very fast.  I liked that HTML metacharacters
are escaped by default to avoid cross site scripting attacks.  Also it supports
Template Toolkit syntax.  I didn&rsquo;t find any new killer features, but it was a
pleasure to work with.</p></li>
<li><p><strong>Some new <a href="http://helabs.com.br/blog/2014/01/21/prevent-common-problems-when-writing-css-from-scratch/">CSS tricks</a></strong> &ndash;
The best trick I learned is how to keep my footer at the bottom of the page
even when it has only a few lines of content.</p></li>
</ul>


<p>I was able to practice design, layout, color, and font selection.  And who
knows &mdash; perhaps this project will also drive a tiny bit of traffic to my
github profile and increase my
<a href="http://www.codusoperandi.com/posts/increasing-your-luck-surface-area">luck surface area</a>.</p>

<p>The momentum feels good.  I need to remember to keep my projects small more often.</p>

<p><img src="http://blog.kablamo.org/images/for-posts/2014-02-02.png" width="700" height="424"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[An experiment - No dessert forever]]></title>
    <link href="http://blog.kablamo.org/2014/01/01/no-dessert-forever/"/>
    <updated>2014-01-01T00:00:00-05:00</updated>
    <id>http://blog.kablamo.org/2014/01/01/no-dessert-forever</id>
    <content type="html"><![CDATA[<p>For years I have been hearing people say sugar is the new bad thing.  So I
finally got around to reading up on this claim.  Here is what I learned.</p>

<h1>Nutrition</h1>

<p>Food is composed of <strong>carbohydrates, fats, proteins, water, vitamins,</strong> and
<strong>minerals</strong>.  Of course, I sometimes swallow stuff that is not on that list
but the list is comprehensive in the sense that it covers everything my body
needs.  Notice that sugar is not in the list.  My body breaks down carbs and
fats into glucose (sugar) which can be used by my body as energy.</p>

<p>This means sugar has <em>zero</em> nutritional value.  There is no reason to ever
eat any.  Humans do not require sugar.</p>

<p>I have always been smug about the fact that I don&rsquo;t throw away my money on a
caffeine addiction.  But suddenly I realize I have been foolishly spending my
money on sugar.</p>

<h1>No dessert forever</h1>

<p>As part of my long term plan to someday somehow acquire a svelte physique, I
hereby <strong>reject and repudiate</strong> the harmful cultural ritual known as dessert.
The rules are:</p>

<ul>
<li>No dessert forever.  No ice cream, no cake, no pie.</li>
<li>No candy forever.  No free candy or chocolate from the nice people at the office.</li>
<li>No fruit juice forever.</li>
<li>Exceptions

<ul>
<li>85%+ dark chocolate</li>
<li>Honey</li>
<li>Fruit</li>
<li>Small quantities of desserts that I have never had before.</li>
</ul>
</li>
</ul>


<p>Sources:</p>

<ul>
<li><a href="http://en.wikipedia.org/wiki/Food_energy">Wikipedia: Food energy</a></li>
<li><a href="http://www.ncbi.nlm.nih.gov/pmc/articles/PMC2235907/">Evidence for sugar addiction</a></li>
<li><a href="http://www.health.harvard.edu/newsletters/Harvard_Heart_Letter/2011/September/abundance-of-fructose-not-good-for-the-liver-heart">Abundance of fructose not good for the liver, heart</a></li>
<li><a href="http://nickwinter.net/experiments">Nick Winter</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Salt and pepper - How to encrypt database passwords]]></title>
    <link href="http://blog.kablamo.org/2013/12/18/authen-passphrase/"/>
    <updated>2013-12-18T00:00:00-05:00</updated>
    <id>http://blog.kablamo.org/2013/12/18/authen-passphrase</id>
    <content type="html"><![CDATA[<p>To explain how salt and pepper work in encryption, I will walk through a few
scenarios.</p>

<h1>No salt</h1>

<p><strong>Summary for the impatient:</strong>  <em>Using no salt means an attacker doesn&rsquo;t need
to generate a rainbow table because they can reuse an existing one.</em></p>

<p>If an attacker obtains my database of encrypted passwords it will be very time
consuming to brute force them.  However there exist pre-computed tables of
encrypted values of thousands of commonly used passwords.  These tables are called
rainbow tables.  It is computationally inexpensive to match the encrypted
values in a rainbow table with the encrypted values in my database.</p>

<h1>One salt</h1>

<p><strong>Summary for the impatient:</strong>  <em>Using the same salt for all your passwords
means an attacker must generate 1 rainbow table.</em></p>

<p>Salt is data used as an additional input to the algorthim that encrypts a
password.  If I use a salt when I encrypt a password the resulting output will
be different from someone who did not use the same salt.  That means my
attacker cannot reuse an existing rainbow table.  They must generate a new one
using the same salt I used.</p>

<p>Note that salt is usually stored as plain text in the database with the
encrypted passwords.  So the attacker usually has access to the salt.  Even so,
I have successfully made the attack more expensive.</p>

<h1>A random salt per password</h1>

<p><strong>Summary for the impatient:</strong>  <em>Using a random salt for each password means an
attacker must generate 1 rainbow table per password.</em></p>

<p>Instead of using a single salt for the entire database I can use a different
(random) salt for each user&rsquo;s password.  This means the attacker must generate
a set of rainbow tables for each password which is even more expensive.</p>

<p>Note that I also need to store the salt for each password I have generated.
This is a pain to do manually.  Happily some clever person came up with RFC
2307 which suggests a much simpler solution.</p>

<p>Instead of storing the just the encrypted password in the password column, store
a string which concatenates the salt and the encrypted password.  This may not
sound easier.  It implies the need to parse and concatenate strings.  However
this is handled for me by the encryption libraries so its 100% pain free.  Lets
see an example.</p>

<p>To encrypt the plaintext string &lsquo;pie&rsquo; use the following Perl code</p>

<pre><code>my $blowfish = Authen::Passphrase::BlowfishCrypt-&gt;new(
   passphrase  =&gt; 'pie',
   salt_random =&gt; 1,
   cost        =&gt; 16,
);

say $blowfish-&gt;as_rfc2307; 
# the output will look like this:
# {CRYPT}$2a$14$sS80d1JlF3oR6Q4UHT.9w.DIXnV0/dLQMoVBsOp2gMRT65bWvP0P2
</code></pre>

<p>That crazy <em>{CRYPT}$2a$blarblar</em> mumbo jumbo is what we will save to the db in the password
column.  However if I know what to look for, I can see the mumbo jumbo is actually
several things smushed together:</p>

<pre><code>{CRYPT} $ 2a $ 16 $ sS80d1JlF3oR6Q4UHT.9w.DIXnV0/dLQMoVBsOp2gMRT65bWvP0P2
</code></pre>

<ul>
<li><strong>{CRYPT}</strong> &ndash; This is the scheme identifier.  It indicates which scheme is being used
so I know how to parse the rest of the string.</li>
<li><strong>$</strong> &ndash; These are field separators</li>
<li><strong>2a</strong> &ndash; A version number for this scheme</li>
<li><strong>16</strong> &ndash; The cost</li>
<li>Then there is the <strong>salt</strong> (22 base 64 digits &mdash; plain text)</li>
<li>Followed by the <strong>encrypted password</strong> (31 base 64 digits)</li>
</ul>


<p>To check if a user has submitted a valid <code>$password</code>  use the following code</p>

<pre><code>my $secret   = ''{CRYPT}$2a$16$sS80d1JlF3oR6Q4UHT.9w.DIXnV0/dLQMoVBsOp2gMRT65bWvP0P2';
my $blowfish = Authen::Passphrase-&gt;from_rfc2307($secret);

if ($blowfish-&gt;match($password)) {
    say "You may enter";
}
else {
    say "You did not say the magic word";
}
</code></pre>

<p>Of course we want to build this into our ORM so the Authen::Passphrase objects
are inflated and deflated for us.  Here is what that looks like in a DBIx
Result class:</p>

<pre><code>__PACKAGE__-&gt;load_components(qw/FilterColumn/);
__PACKAGE__-&gt;filter_column( password =&gt; {
    filter_to_storage   =&gt; sub { $_[1]-&gt;as_rfc2307() },                      # deflate
    filter_from_storage =&gt; sub { Authen::Passphrase-&gt;from_rfc2307($_[1]) },  # inflate
});
</code></pre>

<p>But I only showed you that so you would understand what
DBIx::Class::InflateColumn::Authen::Passphrase does under the covers.  I use
that because it makes my code simpler:</p>

<pre><code>__PACKAGE__-&gt;load_components(qw/InflateColumn::Authen::Passphrase/);
__PACKAGE__-&gt;add_columns(
    ...,
    password =&gt; {
        data_type          =&gt; 'text',
        inflate_passphrase =&gt; 'rfc2307',
    },
    ...,
);
</code></pre>

<p>This is how I encrypt passwords on <a href="https://networthify.com">networthify.com</a>
and <a href="http://iijo.org">iijo.org</a>.</p>

<h1>Adding pepper</h1>

<p><strong>Summary for the impatient:</strong>  <em>Using pepper means an attacker must generate
many rainbow tables per password. But few people use pepper and its
controversial.</em></p>

<p>Pepper is the same as salt except that I don&rsquo;t save the value anywhere.  Lets
say I choose an 8 bit value for my pepper.  That means there are 256
possible values.  If I don&rsquo;t save that value anywhere then when a user logs
in I will need to try up to 256 values to see if the user has the right
password.  However it means my attacker will need to generate up to 256
rainbow tables for each password.</p>

<p>One big problem is that trying 256 possible values is going to take me about 4
minutes on average hardware.</p>

<p>Even if I ignore that issue, this option is controversial and my understanding
is that few people do it.  It is generally accepted that messing about with
salt and pepper should be left to the professionals who are writing the
encryption libraries.  Pepper is not supported by Authen::Passphrase.</p>

<h1>Caveats</h1>

<p>Salting is done to make rainbow tables inneffective.  For various reasons
crackers rarely use rainbow tables anymore.  Instead they use sophisticated
brute force algorithms which combine dictionary attacks with databases of known
or commonly used passwords.  These kinds of brute force attacks can often crack
battery-horse-staple <a href="http://xkcd.com/936/">XKCD</a> style passwords even if they
are very long.  Password are not secure unless they are very long <em>and</em>
very random.</p>

<p>And there is more bad news.  While salting makes it harder to crack all the
passwords in the database, cracking a single targeted password is often not
computationally hard.  A single completely random 8 character password can be
cracked with brute force in 10 days.</p>

<p>The only way to protect your users is to require very long and very random
passwords.  Make sure your website requires a minimum password length of 8
characters or more.</p>

<h4>Sources</h4>

<ul>
<li><a href="http://www.wired.co.uk/news/archive/2013-05/28/password-cracking/viewall">Anatomy of a hack: even your &lsquo;complicated&rsquo; password is easy to crack</a> (Wired magazine)</li>
<li><a href="https://metacpan.org/pod/Authen::Passphrase">Authen::Passphrase</a></li>
<li><a href="https://metacpan.org/pod/Authen::Passphrase::BlowfishCrypt">Authen::Passphrase::BlowfishCrypt</a></li>
<li><a href="https://metacpan.org/pod/DBIx::Class::InflateColumn::Authen::Passphrase">DBIx::Class::InflateColumn::Authen::Passphrase</a></li>
<li><a href="http://blog.afoolishmanifesto.com/archives/1910">frew</a></li>
<li><a href="http://crypto.stackexchange.com/questions/1776/can-you-help-me-understand-what-a-cryptographic-salt-is">crypto.stackexchange.com</a></li>
<li><a href="http://security.stackexchange.com/questions/3272/password-hashing-add-salt-pepper-or-is-salt-enough">security.stackexchange.com</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ray Dalio's "Principles"]]></title>
    <link href="http://blog.kablamo.org/2013/12/15/dalios-principles/"/>
    <updated>2013-12-15T00:00:00-05:00</updated>
    <id>http://blog.kablamo.org/2013/12/15/dalios-principles</id>
    <content type="html"><![CDATA[<p>I have been reading Ray Dalio&rsquo;s <em>Principles</em>.  Ray Dalio is the CEO of
Bridgewater which is a big famous successful hedge fund he started in the 70&rsquo;s.
<em>Principles</em>, is a 123 page philosophical text he published in 2011 about how
to live your life and how to manage people and organizations.  Its extremely
good.  I&rsquo;m not done yet but I have a feeling it is something I&rsquo;m going to be
rereading many times over the next few years.  You can download it from the
<a href="http://www.bwater.com/Uploads/FileManager/Principles/Bridgewater-Associates-Ray-Dalio-Principles.pdf">Bridewater website</a>.</p>

<p>Here is a sample:</p>

<blockquote><p>Most people react to pain badly. They have “fight or flight” reactions to it:
they either strike out at whatever brought them the pain or they try to run
away from it. As a result, they don’t learn to find ways around their barriers,
so they encounter them over and over again and make little or no progress
toward what they want&hellip;</p>

<p>Believe it or not, you are lucky to feel the pain if you approach it correctly,
because it will signal that you need to find solutions and to progress. Since
the only way you are going to find solutions to painful problems is by thinking
deeply about them &ndash; i.e., reflecting &ndash; if you can develop a knee-jerk reaction
to pain that is to reflect rather than to fight or flee, it will lead to your
rapid learning/evolving.</p></blockquote>

<p>And from that he derives this equation:</p>

<blockquote><p>Pain + Reflection = Progress</p></blockquote>

<p>So I&rsquo;ve been trying to do this.  Whenever I experience conflict, stress, anger,
or pain, I will try to make that into an opportunity to evolve and to become
stronger.</p>

<p>Quite a lot of <em>Principles</em> feels like common sense.  But at the same time I
can see that some of that common sense stuff is stuff I haven&rsquo;t been doing or
have been doing half way or just have not thought through as much as Dalio has.
I think that having this set of considered formalized principles to refer
to will help me to get what I want from life.</p>

<p>By the way, I discovered <em>Principles</em> via
<a href="http://sebastianmarshall.com/">Sebastian Marshall</a>.  Sebastion is an American
who has been living and working in Japan for about 10 years.  His writing is
always interesting and is a great source of new ideas for me.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to find and restore deleted files with git]]></title>
    <link href="http://blog.kablamo.org/2013/12/08/git-restore/"/>
    <updated>2013-12-08T00:00:00-05:00</updated>
    <id>http://blog.kablamo.org/2013/12/08/git-restore</id>
    <content type="html"><![CDATA[<p>Don&rsquo;t be afraid to delete files from your git repository.  You can get restore
them.  You can even search for a string in a deleted file.  Here is how to find
a deleted file and its commit:</p>

<pre><code>git log --diff-filter=D --summary                  # all deleted files ever
git log --diff-filter=D --summary .                # all deleted files in cwd 
git log --diff-filter=D --author=Batman --summary  # all files deleted by Batman
</code></pre>

<p>How to restore a deleted file:</p>

<pre><code>git checkout &lt;commit&gt;~1 &lt;filename&gt;
</code></pre>

<p>To make this process a little easier next time I need to do it, I created a git
alias for finding deleted files by adding this to my .gitconfig file:</p>

<pre><code>[aliases]
deleted = log --diff-filter=D --summary
</code></pre>

<p>Now I can find and restore files like this:</p>

<pre><code>git deleted                         # find a deleted file and its commit
git checkout &lt;commit&gt;~1 &lt;filename&gt;  # restore the deleted file
</code></pre>

<h2>How to search the contents of deleted files</h2>

<p>But lets say I don&rsquo;t remember the filename of that file I deleted in a fit of
cleanup passion.  I do remember the name of one of the functions in it though.
Here is how to deal with that.  Search the contents of all files that have ever
existed in git for a string:</p>

<pre><code>git log --summary -S&lt;string&gt; [&lt;path/to/file&gt;] [--since=2009.1.1] [--until=2010.1.1]
</code></pre>

<p>Another way to do this:</p>

<pre><code>git rev-list --all | xargs git grep 'string'
</code></pre>

<p>Git is all knowing and all seeing and all powerful.  Hail git, powerful arcane
lord of source control.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tmux reloaded]]></title>
    <link href="http://blog.kablamo.org/2013/11/27/tmux-reloaded/"/>
    <updated>2013-11-27T00:00:00-05:00</updated>
    <id>http://blog.kablamo.org/2013/11/27/tmux-reloaded</id>
    <content type="html"><![CDATA[<p>To reload your tmux configuration without restarting the server, add this to
your <code>~/.tmux.conf</code> file:</p>

<pre><code># reload the config file without restarting the tmux server
bind R source-file ~/.tmux.conf \; display-message "Config reloaded"
</code></pre>

<p>Notice thats a capital <code>R</code> not a lowercase <code>r</code>.  I keep forgetting that.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Configure tmux to give you status updates about anything]]></title>
    <link href="http://blog.kablamo.org/2013/11/26/tmux-status-updates/"/>
    <updated>2013-11-26T00:00:00-05:00</updated>
    <id>http://blog.kablamo.org/2013/11/26/tmux-status-updates</id>
    <content type="html"><![CDATA[<p>I use and love OSX growl and Ubuntu notify style desktop notifications.  They
are gorgeous.  But they are also distracting and after a few vibrant and
whimsical but fleeting seconds they are gone forever and you have no way to get
them back.</p>

<p>A more useful (and less glorious) way to receive notifications is in your
<a href="http://tmux.sourceforge.net/">tmux</a> status bar.  tmux is the brilliant
successor to the venerable screen which hasn&rsquo;t been actively developed for
quite a while.</p>

<p>Here is how I configure notifications in my .tmux.conf file:</p>

<pre><code>set -g status-interval 15    
set -g status-right !exec my_shell_script
</code></pre>

<p>This tells tmux to run <code>my_shell_script</code> every 15 seconds.  It displays the
first line of output from the shell script.  Now I can get unobtrusive status
updates which don&rsquo;t go away. And if I ate a good breakfast, feel rested, and
have the wind at my back I can write some code to log my notifications to a
file so that I don&rsquo;t miss any.</p>

<p>Here are some ideas that might be useful which I might someday do maybe perhaps
possibly:</p>

<ul>
<li>Status updates when someone says your name on irc</li>
<li>Status updates when jenkins tests fail</li>
<li>Status updates when people push code live</li>
<li>Status updates when people merge branches</li>
</ul>


<p>Any other ideas?</p>

<p>Also don&rsquo;t miss the tmux <a href="https://github.com/Lokaltog/powerline">powerline</a>
status bar.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Anyenv + Plenv + Carton]]></title>
    <link href="http://blog.kablamo.org/2013/11/25/plenv/"/>
    <updated>2013-11-25T00:00:00-05:00</updated>
    <id>http://blog.kablamo.org/2013/11/25/plenv</id>
    <content type="html"><![CDATA[<p>Recently I started breaking out of my Perl-only isolation bubble and dabbling
with other languages. I was surprised how easy and comfortable other languages
are. I think its because these days good ideas spread from one language to the
next incredibly fast. Even in a new language when I reach for a tool I can
usually find some Perl technology analogue.</p>

<p>For example, I&rsquo;ve been a perlbrew person for a long time and it has served me
well.  Ruby has its own version of perlbrew called rbenv which is pretty great.
But actually it seems every language has a clone of rbenv.</p>

<ul>
<li>Python has pyenv.</li>
<li>PHP has phpenv.</li>
<li>Node has ndenv.</li>
<li>Java has jenv.</li>
<li>Perl has plenv.</li>
</ul>


<p>So I thought, what the heck &mdash; lets try that out.  The nice thing
is all the envs have pretty much the same command line options and the same
approach to managing dependencies.  I thought it might be calming and soothing
for my brain to have one way of doing things.</p>

<p>I found <a href="https://github.com/riywo/anyenv">Anyenv</a> just a second ago as I was
writing this.  It claims it will manage all my envs. Looks like brilliant
stuff. Fortune favors the bold. (I eat danger for breakfast.)  I&rsquo;ll try it.</p>

<pre><code>git clone https://github.com/riywo/anyenv ~/.anyenv
echo 'export PATH="$HOME/.anyenv/bin:$PATH"' &gt;&gt; ~/.my_profile
echo 'eval "$(anyenv init -)"'               &gt;&gt; ~/.my_profile
exec bash -l
anyenv install rbenv    # ruby
anyenv install plenv    # perl
anyenv install pyenv    # python
anyenv install phpenv   # php
anyenv install ndenv    # nodejs
anyenv install denv     # dunno
anyenv install jenv     # java
exec bash -l            # &lt;-- useful trick btw
anyenv versions
</code></pre>

<p>Ok now I have all the envs.  But I want to actually do some work with plenv.
Lets see if I can do that.</p>

<pre><code>plenv install --list  # list all the potential perl versions you can use
plenv install 5.19.6  # install perl v5.19.6
plenv rehash          # reload the shell environment with the new perl
plenv global 5.19.6   # use v5.19.6 everywhere by default
plenv local  5.19.6   # use v5.19.6 in this directory for this project
plenv install-cpanm   # install cpanm for this version of perl
plenv rehash          #
plenv which cpanm     # see where cpanm is installed. should be ~/.anyenv
</code></pre>

<p>Now I will install the dependencies for my project.  I will manage them with
<a href="https://metacpan.org/pod/Carton">Carton</a>.</p>

<pre><code>cpanm Carton          # install carton for this version of perl
plenv list-modules
</code></pre>

<p>At this point I need to create a <code>cpanfile</code>.  There are all kinds of cool
things you can do in this file, but with your permision I will begin with baby
steps.  Here is mine cpanfile for now:</p>

<pre><code>requires "Catalyst";
requires "Plack";
requires "DBD::SQLite";
</code></pre>

<p>And then I run carton to install these modules locally into local/lib/perl5.</p>

<pre><code>carton               # install all the dependencies from the cpanfile
ls local/lib/perl5/  # see all the new modules installed here
plenv list-modules   # see mountains of installed stuff
cd /tmp
plenv list-modules   # see nothing installed except Carton
</code></pre>

<p>Notice that a carton.snapshot file was created.  If I look inside, I can see a
list of all my project dependencies, and all their dependencies, etc all the
way down to the first turtle &mdash; AND there are version numbers for everything.</p>

<pre><code># carton snapshot format: version 1.0
DISTRIBUTIONS
Apache-LogFormat-Compiler-0.13
  pathname: K/KA/KAZEBURO/Apache-LogFormat-Compiler-0.13.tar.gz
    provides:
      Apache::LogFormat::Compiler 0.13
    requirements:
      CPAN::Meta 0
      CPAN::Meta::Prereqs 0
      Module::Build 0.38
...blah biddee blah etc...
</code></pre>

<p>I can add <code>cpanfile</code> and <code>cpanfile.snapshot</code> to my git repo.  Now when I deploy
or share the code, the user at the destination can run Carton and they will end
up with the exact dependencies with the exact same version numbers I had. This
way I can be sure my code will run as successfully for them as it did for me.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Monit - How to know when your web site is down]]></title>
    <link href="http://blog.kablamo.org/2013/11/24/monit/"/>
    <updated>2013-11-24T00:00:00-05:00</updated>
    <id>http://blog.kablamo.org/2013/11/24/monit</id>
    <content type="html"><![CDATA[<p>If your website goes down, you want to find out fast.  There are a few ways to
accomplish this, but I&rsquo;m using <a href="http://mmonit.com/monit">monit</a>.  Monit is a
mature unix monitoring daemon and it gives me the ability not only get alerts
but to restart services that go down.</p>

<p>Monit has lotsa power and options and you can read about all of them on
the man page.  Or if you don&rsquo;t want to mess around with that you can pay them
for a <a href="https://mmonit.com/screenshots/">pretty web admin interface</a> and some
phone/tablet apps for a one time fee of € 65.  Another simpler and I think less
powerful option is <a href="http://monitis.com/?affiliate=1303230640">monitor.us</a>.</p>

<p>I don&rsquo;t want to pay.  So I installed monit like this:</p>

<pre><code>apt-get install monit
</code></pre>

<p>The configuration file for monit lives at <code>/etc/monit/monitrc</code>.  You probably
don&rsquo;t need to bother with that.  When monit runs, it looks in
<code>/etc/monit/conf.d</code> and executes any scripts it finds in there.  Like many
people I&rsquo;m running nginx in front of my Starman web apps.  So I want monitor
both of those processes.</p>

<p>Here is how to do that.  Created a script named <code>/etc/monit/confd/nginx</code>:</p>

<pre><code>check process nginx with pidfile /var/run/nginx.pid

    start program = "/etc/init.d/nginx start"
    stop  program = "/etc/init.d/nginx stop"

    alert kablamo@example.com with mail-format {
           from: monit@example.com
        subject: monit alert: $SERVICE $EVENT $DATE
        message: $DESCRIPTION
    }

    if failed port 80 protocol HTTP
        request /
        with timeout 7 seconds
        then restart
</code></pre>

<p>Then create a second script named <code>/etc/monit/conf.d/mywebapp</code>.  Its very
similar.  This assumes you are running your web app as the user <code>web</code> on
localhost port 22222.</p>

<pre><code>check process mywebapp with pidfile /var/run/mywebapp.pid

    start program = "/etc/init.d/mywebapp start" as uid web and gid web
    stop  program = "/etc/init.d/mywebapp stop"  as uid web and gid web

    alert kablamo@example.com with mail-format {
           from: monit@example.com
        subject: monit alert: $SERVICE $EVENT $DATE
        message: $DESCRIPTION
    }

    if failed port 22222 protocol HTTP
        request /
        with timeout 7 seconds
        then restart
</code></pre>

<p>With these scripts, anytime your processes disappear or stop working you will
get email and monit will try to restart them.</p>

<p>But I&rsquo;m paranoid.  So I created a third monit script to do an end to end test in case
something ever gets misconfigured somewhere. <code>/etc/monit/conf.d/end2end</code>:</p>

<pre><code>check host networthify.com with address 71.19.156.131

    alert kablamo@example.com with mail-format {
           from: monit@monit@example.com
        subject: monit alert: $SERVICE $EVENT $DATE
        message: $DESCRIPTION
    }

    if failed port 80 protocol HTTP
        request /
        with timeout 9 seconds
        then alert
</code></pre>

<p>Suggestions for improvment?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Devops with Rex]]></title>
    <link href="http://blog.kablamo.org/2013/11/22/rex/"/>
    <updated>2013-11-22T00:00:00-05:00</updated>
    <id>http://blog.kablamo.org/2013/11/22/rex</id>
    <content type="html"><![CDATA[<p>I have recently been playing with <a href="http://www.rexify.org/">Rex</a> and wanted to
write down some of my initial thoughts.</p>

<p>Rex is a devops tool that helps you manage your servers.  Its similar to
Puppet Lab&rsquo;s <a href="http://puppetlabs.com/mcollective">mcollective</a> tool or
<a href="http://www.ansibleworks.com/docs/">ansible</a>.  You can easily run commands on
your entire fleet of boxen or just on certain subgroups.  And you can run
them in parallel which saves you giant baskets of time.</p>

<p>The big advantage for People Who Prefer Perl (PWPP) is that Rex is written and
configured with Perl. So for the most part you don&rsquo;t need to spend a lot of time
learning yet another DSL.</p>

<p>Another happy positive is that you don&rsquo;t need to install any software on your
servers. Installation is simple:</p>

<pre><code>$ apt-get install libssh2-1-dev
$ cpanm Rex
</code></pre>

<p>Configuration is also simple &mdash; at least if you know Perl.  The
Rex configuration file is named &lsquo;Rexfile&rsquo; and its syntax is Perl with some
extra Rexy sugar methods thrown in. And I feel the sugar and general API for
Rex is fairly well done.  Here is an example Rexfile:</p>

<pre><code># Configure the default user and your ssh keys.  The default user can be
# overridden on the command line with the -u option.
user "joe";
private_key "/home/joe/.ssh/id_rsa";
public_key "/home/joe/.ssh/id_rsa.pub";
key_auth;

# Cofigure server groups
group prod =&gt; "webserver", "mailserver", "dbserver";
group dev  =&gt; "pancake[1-3]", "narwhale[1-3]", "honeybadger[1-3]";

# Run commands in parallel on up to 100 servers at one time.  This can be
# overridden on the command line with the -t option.
parallelism 100;

# Create tasks.  This task runs against all servers by default.  This can
# be overridden on the command line with the -G or -H options.
task 'uptime', group =&gt; 'all', sub {
    my $output = run "uptime";
    say $output;
};
</code></pre>

<p>You can see that Perl&rsquo;s &lsquo;say&rsquo; command is available by default.  &lsquo;run&rsquo; is a Rex
sugar method which accepts a shell command and returns the output &mdash; similar
to Capture::Tiny.</p>

<p>Here is a command line example which runs the &lsquo;uptime&rsquo; task as the &lsquo;root&rsquo; user
on each server in the &lsquo;dev&rsquo; group:</p>

<pre><code>$ rex -G dev -u root uptime
    pancake1:  16:42:05 up 221 days,  9:49,  1 user,  load average: 0.00, 0.00, 0.00
   narwhale2:  16:42:05 up 8 days,  3:28,  4 users,  load average: 0.00, 0.00, 0.00
   narwhale3:  16:42:05 up 17 days,  3:57,  2 users,  load average: 0.01, 0.01, 0.00
honeybadger1:  16:42:05 up 80 days,  3:29,  1 user,  load average: 0.09, 0.06, 0.01
    pancake3:  16:42:05 up 137 days,  7:49,  1 user,  load average: 0.00, 0.00, 0.00
   narwhale1:  16:42:05 up 65 days,  5:30,  2 users,  load average: 0.46, 0.41, 0.37
honeybadger3:  16:42:04 up 15 days,  4:49,  1 user,  load average: 2.00, 2.00, 2.00
    pancake2:  16:42:04 up 1 day,  2:23,  3 users,  load average: 1.38, 1.35, 1.30
honeybadger2:  16:42:05 up 39 days,  1:24,  1 user,  load average: 0.08, 0.06, 0.01
</code></pre>

<p>Rex is fantastic for ad-hoc commands.  But it also has a great set of libraries
for doing much more like installing debian packages, user management,
virtualization, and managing EC2 boxes.  I have to say I&rsquo;m deeply attracted to
its simplicity &mdash; especially after dealing with Puppet&rsquo;s complicated and weird
DSL.</p>

<p>If anyone uses Rex to manage more than 50 servers, I would love to get in touch
with you and ask a few questions.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning Ruby with online university classes]]></title>
    <link href="http://blog.kablamo.org/2013/11/19/learning-ruby/"/>
    <updated>2013-11-19T00:00:00-05:00</updated>
    <id>http://blog.kablamo.org/2013/11/19/learning-ruby</id>
    <content type="html"><![CDATA[<p>I just completed UC Berkeley&rsquo;s Software as a Service class (via
<a href="http://edx.com">edX.com</a>).  I had a great experience and highly recommend
it.</p>

<p>The class is a tour of all the tools Ruby developers use to create and
deploy websites.  It assumes you already know how to program at a fairly high
level but not necessarily in Ruby.  I have no plans to stop writing Perl code
(which I love).  I just wanted to broaden my horizons, have some fun, and
increase my <a href="http://www.codusoperandi.com/posts/increasing-your-luck-surface-area">luck surface area</a>.</p>

<p>Hands up, who uses what they learned from university classes in their current
job?  No one right?  While online education is clearly the future I was
initially sceptical that a traditional, old school (hah) institution like
Berkeley was innovative enough to do a good job.</p>

<p>I underestimated them.  This class was refreshingly current and practical.  I
got an introduction to a tsunami of tools. I learned to use Ruby, Rails, Rake,
Heroku, ActiveRecord, HAML, SASS, RSpec, Cucumber, and Capybara.  They also
explained REST, DRY, agile iterative development processes, and other stuff I
can&rsquo;t remember right now.</p>

<p>Another thing they got right is we were able to submit our homework over and
over again until we got all the answers.  And the ability to play
lectures at double speed is every bit as brilliant as I imagined it would be.
I wish I had this super power on YouTube.  I was also happy to see the course
supplied students with an Ubuntu powered virtual machine preconfigured with all
the necessary software.</p>

<p>I only had a few minor complaints.  My biggest is that the course didn&rsquo;t spend
any time on sysadmin topics like rbenv and bundler.  I purposely avoided using
the virtual machine so that I would learn that stuff.  Knowing how to use your
tools and configure your environment is a crucial part of being a good
programmer.  This can perhaps be forgiven though since it was only a 5 week
class and we raced through every topic like our pants were on fire.</p>

<p>Altogether it was a fun experience at a great price (free) and I recommend it.
My next class is Chinese History.</p>

<pre style="font: 4px/2px monospace; color: #333; background: transparent; border: 0px; border-radius: 0; box-shadow: 0 0 0 0;">
                                                                                                                                         
                                                                                                                                         
                                                                                                                                         
                                                                                                                                         
                                                                                                                                         
                                                                                                                                         
                                                                                                                                         
                                                                                                                                         
                                                                                                                                         
                                                                                                                                         
                                                                                                                                         
                                                                                                                                         
                                                                                                                                         
                                                                                                                                         
                                                                    ::::::::;;;;;;;;;::::::::::::::::        `::::::::::::::::::::::::   
                                                                    ::::::::;''''''''::::::::::::::::        `:::::::::::::::::::::::;   
                                                                    ::::::::;''''''''::::::::::::::::        `:::::::::::::::::::::::;   
                                                                    ::::::::;''''''''::::::::::::::::        `:::::::::::::::::::::::;   
                                                                    ::::::::;''''''''::::::::::::::;:        `:::::::::::::::::::::::;   
                                                                    ::::::::;''''''''::::::::::::::;:        `:::::::::::::::::::::::;   
                                                                    ::::::::;''''''''::::::::::::::;:        `:::::::::::::::::::::::;   
                                                                    ::::::::;''''''''::::::::::::::::        `:::::::::::::::::::::::;   
                                                                    ::::::::;''''''''::::::::::::::::        `:::::::::::::::::::::::;   
                                                                    ::::::::;'''''''':::::::::::`````         `````:::::::::::;:::::::   
                                                                          ::::::::;'':::::::::::.                 ,:::::::::::::.        
                                                                          :::::::::;'::::::::::::                `:::;::::::::;:         
                                                                          ::::::::::':::::::::::::               ;::::::::::::;          
                                                                          ::::::::::,::::::::::::::             :::::::::::;::           
                       `,,::,.                                            :::::::::::`:;::::::::;:;.           ,:;:::::::::::`           
                   ,;;;;;;;;;;;;':                    .::::::::.          ::::::::::: ,:::::::::::::          `:::::::::::::.            
                 ;;;;;;;;;;;;;;;;;;;`             `:::::::::::::::.       :::::::::::  :::::::::::::;         :;:::::::::::,             
               ';;;;;;;;;;;;;;;;;;;;;;`         `:::::::::::::::::::.     :::::::::::   :;::::::::::::       :::::::::::::;              
             :;;;;;;;;;;;;;;;;;;;;;;;;;;       :::::::::::::::::::::::    :::::::::::    :::::::::::::.     ::::::::::::::               
            ';;;;;;;;;;;;;;;;;;;;;;;;;;;;`   `:::::::::::::::::::::::::`  :::::::::::    `::::::::::::;    `:::::::::::::                
           ';;;;;;;;;;;;;;;;;;;;;;;;;;;;;;, ::::::::::::::::::::::::::::. :::::::::::     ,;;::::::::::;   ;:;:::::::::;.                
          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;':::::::::::::::::::::::::::::`:::::::::::      ;;;::::::::::: ::::::::::::::                 
         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;++'::::::::::::::::::::::::::::::::::::::::       ;:::::::::;;:;:;:;:::::::::                  
        ';;;;;;;;;;;;;;;';'';;;;;;;;;;;;;'+++;:::::::::::::::::::::::::::::::::::::::        ::::::::::::::::::::::::;                   
       ;;;;;;;;;;;;;;;`       `;;;;;;;;;'+++++:::::::::::::::::::::::::::::::::::::::        .:::::::::::::::::::::::                    
      `;;;;;;;;;;;;;             :;;;;;;+++++++:::::::::.       `::::::::::::::::::::         :::::::::::::::::::;::`                    
      ;;;;;;;;;;;;.                ;;;;++++++++;::::::             ,:::::::::::::::::          ::::::::::::::::::::,                     
     ,;;;;;;;;;;;                   ;''+++++++++::::.                ::::::::::::::::           :::::::::::::::::::                      
     ;;;;;;;;;;;                     ;++++++++++:::`                  :::::::::::::::           `:::::::::::::::::                       
    `;;;;;;;;;;                       +++++++++++:`                    ::::::::::::::            .;::::::::::::::                        
    ;;;;;;;;;;:                      ::++++++++++.                      :::::::::::::             ;:::::::::::::`                        
    ;;;;;;;;;;                       ::'+++++++++`                      ,::::::::::::            `;:::::::::::::;                        
   `;;;;;;;;;,                      `:::++++++++;:                       ::::::::::::            :;:::::::::::::::                       
   :;;;;;;;;;                       ,:::++++++++;'                       ,:::::::::::           :::::::::::::::::::                      
   ';;;;;;;;;```````````````````````;;:;;++++++';;                        :::::::::::          ::::::::::::::::::::.                     
   ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;+++++++++++;;;                        :::::::::::         ,::::::::::::::::::;::                     
   ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;+++++++++++;;;                        :::::::::::        `::::::::::::::::::::::;                    
   ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;+++++++++++;;;`                       ,::::::::::        :;;:::::::::::::::::::::;                   
   ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;+++++++++++;;;`                       ,::::::::::       ;::::::::::::::::::::::::;,                  
   ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;+++++++++++;;;`                       ,::::::::::      :::::::::::::: ;;;;:::::::::.                 
   ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;+++++++++++;;;                        :::::::::::     ,::::::::::::;   ;:::::::::::;                 
   ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;+++++++++++;;;                        :::::::::::    `:::::::::;:::    `:;:::::::::::                
   ';;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;+++++++++++;;'                        :::::::::::    :::::::::::::`     ,:::::::::::::               
   ;;;;;;;;;;                       :::::::::::.                         `:::::::::::   ::;::::::::::,       :::::::::::;:,              
   ,;;;;;;;;;.                      .:::::::::::                         ::::::::::::  ::::::::::::;;         :;:::::::::::.             
    ;;;;;;;;;'                       :::::::::::`                       `:::::::::::: ,:::::::::::::           :::::::::::::             
    ;;;;;;;;;;`                      ::::::::::::                       :::::::::::::`:::::::::::::            .:::::::::::::            
    :;;;;;;;;;;                      .::::::::::::                     ,:::::::::::::;::::::::::::.             ::;:::::::::::           
     ;;;;;;;;;;;                     ,++++++++++':,                   .:::::::::::::':::::::::::;:               ;:::::::::;:;,          
     ';;;;;;;;;;:                   `;'+++++++++:::,                 ,:::::::::::::'';::;:::::::;                 :::::::::::::`         
      ;;;;;;;;;;;;                 `;;;++++++++;:::::               ::::::::::::::;'':::::::::::                  `:::::::::::::         
      :;;;;;;;;;;;'`              ,;';;'+++++++::::::::           ,:::::::::::::::'''::::::::::`                   ,::::::::::::;        
       ';;;;;;;;;;;;;           .';;;;;;'++++':::::::::::,`   `,::::::::::::;''''''''''''';:::,````           ``````:;::::::::::::::::.  
        ;;;;;;;;;;;;;;';.` `.:';;;;;;;;;;++++'::::::::::::::::::::::::::::::;''''''''''''';:::::::::.         ,:::::::::::::::::::::::.  
        .;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;+++:::::::::::::::::::::::::::::::;''''''''''''';:::::::::.         ,::::::;::::::::::::::::.  
         ,;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;+::::::::::::::::::::::::::::::::;''''''''''''';:::::::::.         ,:::::::::::::::::::::::.  
          :;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; ::::::::::::::::::::::::::::; ::;''''''''''''';:::::::::.         ,:::::::::::::::::::::::.  
           .;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;   :::::::::::::::::::::::::::  ::;''''''''''''';:::::::::.         ,:::::::::::::::::::::::.  
             ';;;;;;;;;;;;;;;;;;;;;;;;;;,     .::::::::::::::::::::::::   ::;''''''''''''';:::::::::.         ,:::::::::::::::::::::::.  
              ,;;;;;;;;;;;;;;;;;;;;;;;'         :::::::::::::::::::::,    ::;''''''''''''';:::::::::.         ,:::::::::::::::::::::::.  
                :;;;;;;;;;;;;;;;;;;;'             ,::::::::::::::::,      ::;''''''''''''';:::::::::.         :;::::::::::::::::::::::.  
                  .;;;;;;;;;;;;;;;:                 `::::::::::::`        ::;';;;;;;;;;;;;;:::::::::.         ,:::::::::::::::::::::::.  
                      ,;;;;;;;;.                          ```                                                                            
                                                                                                                                         
                                                                                                                                         
                                                                                                                                         
                                                                                                                                         
                                                                                                                                         
                                                                                                                                         
                                                                                                                                         
                                                                                                                                         
                                                                                                                                         
                                                                                                                                         
                                                                                                                                         
                                                                                                                                         
                                                                                                                                         
</pre>



]]></content>
  </entry>
  
</feed>
