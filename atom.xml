<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[KABLAMO]]></title>
  <link href="http://blog.kablamo.org/atom.xml" rel="self"/>
  <link href="http://blog.kablamo.org/"/>
  <updated>2013-11-18T07:22:28+00:00</updated>
  <id>http://blog.kablamo.org/</id>
  <author>
    <name><![CDATA[Eric Johnson]]></name>
    <email><![CDATA[kablamo@kablamo.org]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Learning Ruby with online university classes]]></title>
    <link href="http://blog.kablamo.org/2013/11/19/learning-ruby/"/>
    <updated>2013-11-19T00:00:00+00:00</updated>
    <id>http://blog.kablamo.org/2013/11/19/learning-ruby</id>
    <content type="html"><![CDATA[<p>I just completed UC Berkeley&rsquo;s Software As A Service class (via
<a href="http://edx.com">edX.com</a>) and I had a great experience and highly recommend
it.</p>

<p>The class is a quick tour of all the tools a Rubyist would use to create and
deploy a website.  It assumes you already know how to program at a high level.
As an experienced Perl web developer, it looked like the perfect introductory
class.  I have no plans to stop doing Perl (which I love).  I just wanted to
broaden my horizons, have some fun, and increase my <a href="http://www.codusoperandi.com/posts/increasing-your-luck-surface-area">luck surface
area</a>.</p>

<p>I strongly believe online education is the future, but I was initially
sceptical that a traditional old world university was innovative enough to do a
good job.  Hands up, who uses what they learned from university classes in
their current job?  No one right?</p>

<p>But this class was refreshingly practical.  Instead of teaching algorithms,
theory, and dead languages, I got an introduction to best practices and a
blizzard of tools being used in workplaces today.  I learned to use Ruby,
Rails, Rake, Heroku, ActiveRecord, HAML, SASS, RSpec, Cucumber, and Capybara.
They also explained agile iterative development processes, DRY, REST and a
bajillion other things.</p>

<p>Another thing they got right is we were able to submit our homework over and
over again until we got all the answers right.  And the ability to play
lectures at double speed is such a time saver!  I wish I had this super power
on YouTube.  Also I was happy to see the course supplied students with an
Ubuntu powered VM preconfigured with all the necessary software.</p>

<p>I only had a few minor complaints.  My biggest is that the course didn&rsquo;t spend
any time on sysadmin things like rbenv and bundler.  I purposely avoided using
the VM so that I would learn that stuff.  Learning how to use your tools and
configure your environment is crucial to being a good programmer.  This can
perhaps be forgiven though since it was only a 5 week class and we raced
through every topic.</p>

<p>Altogether it was a fun experience at a great price (free) and I recommend it.
My next class is Chinese History.</p>

<pre style="font: 4px/2px monospace; color: #333; background: transparent; border: 0px; border-radius: 0; box-shadow: 0 0 0 0;">
                                                                                                                                         
                                                                                                                                         
                                                                                                                                         
                                                                                                                                         
                                                                                                                                         
                                                                                                                                         
                                                                                                                                         
                                                                                                                                         
                                                                                                                                         
                                                                                                                                         
                                                                                                                                         
                                                                                                                                         
                                                                                                                                         
                                                                                                                                         
                                                                    ::::::::;;;;;;;;;::::::::::::::::        `::::::::::::::::::::::::   
                                                                    ::::::::;''''''''::::::::::::::::        `:::::::::::::::::::::::;   
                                                                    ::::::::;''''''''::::::::::::::::        `:::::::::::::::::::::::;   
                                                                    ::::::::;''''''''::::::::::::::::        `:::::::::::::::::::::::;   
                                                                    ::::::::;''''''''::::::::::::::;:        `:::::::::::::::::::::::;   
                                                                    ::::::::;''''''''::::::::::::::;:        `:::::::::::::::::::::::;   
                                                                    ::::::::;''''''''::::::::::::::;:        `:::::::::::::::::::::::;   
                                                                    ::::::::;''''''''::::::::::::::::        `:::::::::::::::::::::::;   
                                                                    ::::::::;''''''''::::::::::::::::        `:::::::::::::::::::::::;   
                                                                    ::::::::;'''''''':::::::::::`````         `````:::::::::::;:::::::   
                                                                          ::::::::;'':::::::::::.                 ,:::::::::::::.        
                                                                          :::::::::;'::::::::::::                `:::;::::::::;:         
                                                                          ::::::::::':::::::::::::               ;::::::::::::;          
                                                                          ::::::::::,::::::::::::::             :::::::::::;::           
                       `,,::,.                                            :::::::::::`:;::::::::;:;.           ,:;:::::::::::`           
                   ,;;;;;;;;;;;;':                    .::::::::.          ::::::::::: ,:::::::::::::          `:::::::::::::.            
                 ;;;;;;;;;;;;;;;;;;;`             `:::::::::::::::.       :::::::::::  :::::::::::::;         :;:::::::::::,             
               ';;;;;;;;;;;;;;;;;;;;;;`         `:::::::::::::::::::.     :::::::::::   :;::::::::::::       :::::::::::::;              
             :;;;;;;;;;;;;;;;;;;;;;;;;;;       :::::::::::::::::::::::    :::::::::::    :::::::::::::.     ::::::::::::::               
            ';;;;;;;;;;;;;;;;;;;;;;;;;;;;`   `:::::::::::::::::::::::::`  :::::::::::    `::::::::::::;    `:::::::::::::                
           ';;;;;;;;;;;;;;;;;;;;;;;;;;;;;;, ::::::::::::::::::::::::::::. :::::::::::     ,;;::::::::::;   ;:;:::::::::;.                
          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;':::::::::::::::::::::::::::::`:::::::::::      ;;;::::::::::: ::::::::::::::                 
         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;++'::::::::::::::::::::::::::::::::::::::::       ;:::::::::;;:;:;:;:::::::::                  
        ';;;;;;;;;;;;;;;';'';;;;;;;;;;;;;'+++;:::::::::::::::::::::::::::::::::::::::        ::::::::::::::::::::::::;                   
       ;;;;;;;;;;;;;;;`       `;;;;;;;;;'+++++:::::::::::::::::::::::::::::::::::::::        .:::::::::::::::::::::::                    
      `;;;;;;;;;;;;;             :;;;;;;+++++++:::::::::.       `::::::::::::::::::::         :::::::::::::::::::;::`                    
      ;;;;;;;;;;;;.                ;;;;++++++++;::::::             ,:::::::::::::::::          ::::::::::::::::::::,                     
     ,;;;;;;;;;;;                   ;''+++++++++::::.                ::::::::::::::::           :::::::::::::::::::                      
     ;;;;;;;;;;;                     ;++++++++++:::`                  :::::::::::::::           `:::::::::::::::::                       
    `;;;;;;;;;;                       +++++++++++:`                    ::::::::::::::            .;::::::::::::::                        
    ;;;;;;;;;;:                      ::++++++++++.                      :::::::::::::             ;:::::::::::::`                        
    ;;;;;;;;;;                       ::'+++++++++`                      ,::::::::::::            `;:::::::::::::;                        
   `;;;;;;;;;,                      `:::++++++++;:                       ::::::::::::            :;:::::::::::::::                       
   :;;;;;;;;;                       ,:::++++++++;'                       ,:::::::::::           :::::::::::::::::::                      
   ';;;;;;;;;```````````````````````;;:;;++++++';;                        :::::::::::          ::::::::::::::::::::.                     
   ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;+++++++++++;;;                        :::::::::::         ,::::::::::::::::::;::                     
   ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;+++++++++++;;;                        :::::::::::        `::::::::::::::::::::::;                    
   ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;+++++++++++;;;`                       ,::::::::::        :;;:::::::::::::::::::::;                   
   ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;+++++++++++;;;`                       ,::::::::::       ;::::::::::::::::::::::::;,                  
   ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;+++++++++++;;;`                       ,::::::::::      :::::::::::::: ;;;;:::::::::.                 
   ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;+++++++++++;;;                        :::::::::::     ,::::::::::::;   ;:::::::::::;                 
   ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;+++++++++++;;;                        :::::::::::    `:::::::::;:::    `:;:::::::::::                
   ';;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;+++++++++++;;'                        :::::::::::    :::::::::::::`     ,:::::::::::::               
   ;;;;;;;;;;                       :::::::::::.                         `:::::::::::   ::;::::::::::,       :::::::::::;:,              
   ,;;;;;;;;;.                      .:::::::::::                         ::::::::::::  ::::::::::::;;         :;:::::::::::.             
    ;;;;;;;;;'                       :::::::::::`                       `:::::::::::: ,:::::::::::::           :::::::::::::             
    ;;;;;;;;;;`                      ::::::::::::                       :::::::::::::`:::::::::::::            .:::::::::::::            
    :;;;;;;;;;;                      .::::::::::::                     ,:::::::::::::;::::::::::::.             ::;:::::::::::           
     ;;;;;;;;;;;                     ,++++++++++':,                   .:::::::::::::':::::::::::;:               ;:::::::::;:;,          
     ';;;;;;;;;;:                   `;'+++++++++:::,                 ,:::::::::::::'';::;:::::::;                 :::::::::::::`         
      ;;;;;;;;;;;;                 `;;;++++++++;:::::               ::::::::::::::;'':::::::::::                  `:::::::::::::         
      :;;;;;;;;;;;'`              ,;';;'+++++++::::::::           ,:::::::::::::::'''::::::::::`                   ,::::::::::::;        
       ';;;;;;;;;;;;;           .';;;;;;'++++':::::::::::,`   `,::::::::::::;''''''''''''';:::,````           ``````:;::::::::::::::::.  
        ;;;;;;;;;;;;;;';.` `.:';;;;;;;;;;++++'::::::::::::::::::::::::::::::;''''''''''''';:::::::::.         ,:::::::::::::::::::::::.  
        .;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;+++:::::::::::::::::::::::::::::::;''''''''''''';:::::::::.         ,::::::;::::::::::::::::.  
         ,;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;+::::::::::::::::::::::::::::::::;''''''''''''';:::::::::.         ,:::::::::::::::::::::::.  
          :;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; ::::::::::::::::::::::::::::; ::;''''''''''''';:::::::::.         ,:::::::::::::::::::::::.  
           .;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;   :::::::::::::::::::::::::::  ::;''''''''''''';:::::::::.         ,:::::::::::::::::::::::.  
             ';;;;;;;;;;;;;;;;;;;;;;;;;;,     .::::::::::::::::::::::::   ::;''''''''''''';:::::::::.         ,:::::::::::::::::::::::.  
              ,;;;;;;;;;;;;;;;;;;;;;;;'         :::::::::::::::::::::,    ::;''''''''''''';:::::::::.         ,:::::::::::::::::::::::.  
                :;;;;;;;;;;;;;;;;;;;'             ,::::::::::::::::,      ::;''''''''''''';:::::::::.         :;::::::::::::::::::::::.  
                  .;;;;;;;;;;;;;;;:                 `::::::::::::`        ::;';;;;;;;;;;;;;:::::::::.         ,:::::::::::::::::::::::.  
                      ,;;;;;;;;.                          ```                                                                            
                                                                                                                                         
                                                                                                                                         
                                                                                                                                         
                                                                                                                                         
                                                                                                                                         
                                                                                                                                         
                                                                                                                                         
                                                                                                                                         
                                                                                                                                         
                                                                                                                                         
                                                                                                                                         
                                                                                                                                         
                                                                                                                                         
</pre>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Down a rabbit hole - Go-lang and its decentralized CPAN]]></title>
    <link href="http://blog.kablamo.org/2013/11/13/go/"/>
    <updated>2013-11-13T00:00:00+00:00</updated>
    <id>http://blog.kablamo.org/2013/11/13/go</id>
    <content type="html"><![CDATA[<p>I have been in a rabbit hole for the last week.  I started by looking at Docker
(<a href="http://blog.kablamo.org/2013/11/13/docker/">See my previous post</a>).  It turns
out Docker is written in Go and so somehow I ended up learning
<a href="http://golang.org/">Go</a>.  Well &ldquo;learning&rdquo; is an overstatement.  I&rsquo;ve read
about it for a few days and wrote a tiny bit of code.</p>

<p>But anyway, the coolest thing about Go so far is its decentralized libraries.
<em>Centralized</em> collections of libraries have been all the rage the last few years
and it seems like all the languages have gotten hip to that &mdash; CPAN, rubygems,
pypi, npm, etc.</p>

<p>But one of the biggest problems with publishing Perl modules on CPAN is how
difficult it is to do.  Sure its easy after you figure out the PAUSE website
exists, create a PAUSE account, read all the Dist::Zilla docs and some of the
source code, and write your own personalized plugin.  After that it just takes
one little command.</p>

<h1>How it works in Go</h1>

<p>If you want to use some libraries in your Go code, it looks like this:</p>

<pre><code>import (
    "log" 
    "time"
    "errors"
    "github.com/dotcloud/docker"
    "github.com/fsouza/go-dockerclient"
)
</code></pre>

<p>The first 3 are core libraries distributed as part of Go.  But the last two you
have to download and install yourself.  Doing that is very simple:</p>

<pre><code>export GOROOT=$HOME/go
go get github.com/dotcloud/docker
</code></pre>

<p>This downloads all the dependencies too.  Of course.</p>

<p>The next question you will ask me is how do people learn about new libraries in
a decentralized world?  There are websites like
<a href="http://gowalker.org/">http://gowalker.org/</a> which scrape GitHub&rsquo;s recent updates
page.  They also do this for BitBucket, Google Project Hosting, and a couple
other sites.</p>

<p>This new language has shiny modern features and is very easy to get up and
running.</p>

<pre style="font: 4px/2px monospace; color: #333; background: transparent; border: 0px; border-radius: 0; box-shadow: 0 0 0 0;">
                              ,'#@@@@@@@#+';;;''#@@@@@#,                            
                          ;@@@@#;.                    '@@@;                         
                       ;@@@:                             ,@@@                       
                     #@@.                                   +@@                     
                   @@+                                        +@;   +@@@@@#         
         ,,      +@+                               #@@@@+       @@@@#  @@       
     .@@@@@@@@' @@      .+@@@+.                 :@        @,     @@         @@      
    @@:      .@@;     ++       #+              @            @     #@         @@     
   @@         @;               @            @              @     @@         @     
  ;@         @#    ,:             '        @                @     @' :    #+    
  @         +@     ;               '        ;                  ,     @@@@;    ,@    
  @      '' @     @                 @       #                  @     '@@@@     @    
 :@     @@@@:    :                   .     ,                          @@@@     @    
 ;#     @@@@     @                   @     #  +@@@:             +     ,@@     ,@    
 :@     @@@    : ,@@@@             +     @ #@@@@@:            @      @    @;    
  @     .@@     @@@@@                  @ @@@@@@@            @      :@     @     
  @      @,     . @@@@@@@                  @ @@@@@:@            @       @    @:     
  ;@     @      . @@@@@.@.                 @ @@@@@            #       #' .@'      
   @@   '#       @@@@ ,            :     ; ,@@@@@             :       @@.       
    @@. @.       # @@@@@'            @      ;  #@#             :         @:         
     ,@@@        @  '@#.             +      @                  @         @:         
       .@         :                 '        @                '          :@         
       '#         +                 ;         '              .,           @         
       @:          @               @  @@@@@@,  @            ;,            @         
       @          @             @  @@@@@@@@.  @:        .@              @,        
       @             ;+         #,  #@@@@@@@@'    +@+::+@#                ++        
       @               ;@;,.,'@:    @@@@@@@@@@:                           :@        
       @                          #, ,@@@@@@   @                           @        
      .@                         @              '                          @        
      ;#                                       @                         @        
      ++                        :                ;                         @        
      +'                                         '                         @        
      #:                         @    ;@;@'@     @                         @      
      @,                          :+''   @  .@@@:                          @.       
      @,                                 @   :                             @.       
      @.                            ,    @   .                             @,       
      @,                            ;    @                                 @,       
      @,                            '    @                                 @:       
      #:                            :    @                                 @:       
      #;                             +  @ :  @                             @:       
      ++                              +;   ;.                              @:       
      ;#                                                                   @:       
      ,@                                                                   @:       
       @                                                                   @:       
       @                                                                   @,       
       @                                                                   @,       
       @                                                                 @,       
       @,                                                                  @,       
       +'                                                                  @,       
       :@                                                                  @:       
       .@                                                                  @:       
        @                                                                  @:       
        @                                                                  #;       
        @                                                                  #;       
        @                                                                  +@@,     
      '#@                                                                  '+  ;@.  
   +@.  @                                                                  '#     @ 
 ';     @                                                                  ;@      @
.       @                                                                  :@      #
@       @                                                                  ,@    @ @
+ @  ,@                                                                  .@@    # 
 @    ':@                                                                   +; .+ 
 ,.  @ .@                                                                   @     
   ;   .@                                                                   @       
       ,@                                                                   @       
       :@                                                                   @       
       ;#                                                                   @       
       '#                                                                   @       
       '+                                                                   @       
       +'                                                                   @       
       #;                                                                   @       
       #;                                                                   @       
       @:                                                                   @     
       @:                                                                   @.      
       @,                                                                   @,      
       @,                                                                   @,      
       @,                                                                   @,      
       @,                                                                   @,      
       @.                                                                   @.      
       @.                                                                   @     
       @.                                                                   @       
       @.                                                                   @       
       @,                                                                   @       
       @,                                                                   @       
       @,                                                                  .@       
       @,                                                                  '#       
       @:                                                                  @:       
       @:                                                                  @        
       #;                                                                  @        
       +'                                                                 ,@        
       '+                                                                 #'        
       ,@                                                                 @         
        @                                                                         
        @.                                                               @'         
        ;@                                                               @          
         @                                                              +@          
         '@                                                             @           
          @,                                                           #@           
          .@                                                           @            
           #@                                                         @:            
            @#                                                       @#             
             @+                                                     @@              
              @#                                                  .@@               
               @@@#                                              @   .#             
             ''    #                                            @      @            
            @       @                                          @        '           
           @         @                                       @@+        ;           
          :   .       @+                                  :@@+  +.    @  +          
          @  @      @, #@@;                            ;@@@,     ;    .  @          
          ' @     ':     ,@@@#:                   :+@@@@:         #    @ @          
          @ :    #           ;@@@@@@@#####@@@@@@@@@+.              @   ; .          
           @    @                  ,:;''';;:,                     @  #,           
            ;@##                                                     `             
</pre>


<p>(the golang mascot)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Down a rabbit hole - Docker]]></title>
    <link href="http://blog.kablamo.org/2013/11/13/docker/"/>
    <updated>2013-11-13T00:00:00+00:00</updated>
    <id>http://blog.kablamo.org/2013/11/13/docker</id>
    <content type="html"><![CDATA[<p>I have been in a rabbit hole for the last week.  I started looking at
<a href="http://www.docker.io/">Docker</a>.</p>

<p>Its a really interesting project that all the hosting providers seem to be
moving towards.  Its helpful at first to think of Docker as a really fast and
small virtual machine.  You can put an operating system in a virtual machine,
setup all the dependencies and permissions, and then configure and install your
app.  Its encapsulates your web app and makes it easy to move around.
Thats what docker does too except a docker container is an operating system
primitive &ndash; an <a href="http://linuxcontainers.org/">LXC</a>.  Which means its much faster
and smaller than a virtual machine and that makes it much easier to work with.</p>

<p>Docker also has a builtin version control system.  You can install a base
operating system like Ubuntu in your container and then commit that change.
Then you can install some dependencies and commit that change.  This commit
history also allows you to reuse different commits across different containers.</p>

<p>Docker also has builtin deployment that allows you to push your containers to
public (or private) repositories similar to CPAN or Ruby gems or pypi.</p>

<p>But I said this was a rabbit hole.  Because when I started playing with Docker
I realized its written in Go.  So I started learning <a href="http://golang.org/">Go</a>.
More on that tomorrow.</p>

<pre style="font: 4px/2px monospace; color: #333; background: transparent; border: 0px; border-radius: 0; box-shadow: 0 0 0 0;">





                                                              '''''''''''';
                                                              '''''''''''';
                                                              ''::;;::;;:';
                                                              ''::''::'':';
                                                              ''::''::'':';
                                                              ''::''::'':';
                                                              ''::''::'':';
                                                              ''::''::'':';
                                                              ''::''::'':';
                                                              ''::''::'':';
                                         ''''''''''''''''''''''':::::::::';
                                         ''''''''''''''''''''''''''''''''';                          ''
                                         '':::::::::':::::::::;':::::::::';                         ''''.
                                         '':;';:''::':'::''::';'::''::'':';                         '':'',
                                         '':;';:''::':'::''::';'::''::'':';                        '':::''`
                                         '':;';:''::':'::''::';'::''::'':';                        ''::::''
                                         '':;';:''::':'::''::';'::''::'':';                        ';:::::''
                                         '':;';:''::':'::''::';'::''::'':';                       ,'::::::''.
                                         '':;';:''::':'::''::';'::''::'':';                       ;':::::::''
                                         '':;';:''::':'::''::';'::''::'':';                       '':::::::;'
                                         '':::::::::':::::::::;':::::::::';                       ''::::::::';
                               ''''''''''''''''''''''''''''''''''''''''''''''''''''''             ''::::::::'' `,;'':.
                               '':::::::::':::::::::';::::::::;':::::::::':::::::::''             ;'::::::::'''''''''''':
                               '';:;';:'':':;'::''::';';:''::';'::''::'':':''::'':;''             `'::::::::''';::::::'''',
                               '';:;';:'':':;'::''::';';:''::';'::''::'':':''::'':;''              '':::::::::::::::::::;''
                               '';:;';:'':':;'::''::';';:''::';'::''::'':':''::'':;''              '':::::::::::::::::::;';
                               '';:;';:'':':;'::''::';';:''::';'::''::'':':''::'':;''              .';::::::::::::::::::''
                               '';:;';:'':':;'::''::';';:''::';'::''::'':':''::'':;''               '':::::::::::::::::''
                               '';:;';:'':':;'::''::';';:''::';'::''::'':':''::'':;''               `'':::::::::::::::''.
                               '';:;';:'':':;'::''::';';:''::';'::''::'':':''::'':;''             .'''::::::::::::::'''`
                               '';:;';:'':':;'::;'::';';:''::';'::;'::';:':''::'':;''          .'''''::::::::::::'''''
                      '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''';:::::::''''''''''
                      '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''';:::::::::::''''';.
                      '':::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::''
                      '':::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::''
                      ''::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::''
                      '':::::::::::::::::::::::::::::::'::::::::::::::::::::::::::::::::::::::::::::::::''         ;
               ':     ''::::::::;;::::::::::::::::::::''':::::::::::::::::'':::::::::::::::::::::':::::''         ''
              '''',   ''::::::;'''':::::::::::::::::'''''';:::::::::::::'''''';::::::::::::::::;'''';::''       '''''
            '''''''''''';''''''''''''';::::::::;''''''''''''''::::::;'''''''''''''';::::::::'''''''''''';,,:'''''''''',
        .'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''';
                      '';;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;''
                      ,';;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;''.
                       '';;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;''
                       '';;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;''
                       '';;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;''
                        '';;;;;;;;;;;;;;;;;;;;;;;;`.`;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;'':
                        '';;;;;;;;;;;;;;;;;;;;;;;`''``;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;'''
                        .'';;;;;;;;;;;;;;;;;;;;;;`'''`;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;'''
                         '';;;;;;;;;;;;;;;;;;;;;;`'''`;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;'''
                         .'';;;;;;;;;;;;;;;;;;;;;;```;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;'''
                          '';;;;;;;;;;;;;;;;;''';;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;'''
                           '''''''''''''''''''';;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;'''
                           `''''''''''''';.````;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;'';
                            :';........`````````;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;'''`
                             ;''..........``````;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;'''
                              ;''..............``;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;''':
                               ;''................;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;''''
                                .'':...............;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;''''`
                                  '''...............;;;;;;;;;;;;;;;;;;;;;;;;;;;''''.
                                   :'''..............;;;;;;;;;;;;;;;;;;;;;;;'''''`
                                     ''''.............;;;;;;;;;;;;;;;;;;;''''''
                                       ;'''',...........;;;;;;;;;;;;;'''''''
                                         `'''''';:........;;;;'''''''''':
                                             :''''''''''''''''''''';.
                                                  `,:;;;;;;,.



                          .`
                         ''';                                             ''':
                         ''''                                             ''''
                         ''''                                             ''''
                         ''''                                             ''''
                         ''''                                             ''''
                         ''''                                             ''''
               ;'''''.   ''''         ;'''''.                '''''',      ''''     `':         ,''''''                 :'''
             '''''''''': ''''       '''''''''''           `'''''''''':    ''''    :'''       ,''''''''''            .'''''':
           :'''''''''''''''''     :'''''''''''''         ;''''''''''''    ''''   :''''      ''''''''''''';         '''''''':
          ;''''''''''''''''''    ;'''''''''''''''       ''''''''''''''    ''''  :'''''     ''''''''''''''''       '''''''''
         .'''''      ;'''''''   .'''''      ;'''''     :'''''      :',    '''' :'''''     ''''':      '''''.     ''''''
         '''';         ''''''   '''';         '''',    '''':              '''':'''''     ,''''         .''''    .''''`
        :''''           '''''  :''''           ''''   ;''''               '''''''''      ''''          ;''''    ''''`
        ''''            ;''''  ''''            ;'''   ''''                ''''''''       ''';         ''''''    ''''
        ''''             ''''  ''''             ''';  ''''                '''''''       ''''         ''''';    :'''
        '''.             ''''  '''.             ''''  '''.                ''''''        ''''        '''''.     ''''
        '''              ''''  '''              ''''  '''                 '''''         ''''      `'''''       ''''
        '''.             ''''  '''.             ''''  '''.                '''''.        ''''     ,'''''        ''''
        ''';             ''''  ''';             ''''  ''';                ''''''.       ''''    ;'''''         ''''
        ''''            ,''',  ''''            ,''',  ''''                '''''''.      `''':  ''''''          ''''
        ;''':           ''''   '''':           ''''   :''':               ''''''''`      '''' ''''';           ''''
         ''''`         '''''    ''''.         '''''    ''''.              '''''''''`     ,'''''''',            ''''
         :'''''       '''''     ;'''''       '''''     ;'''''       ;     '''' '''''`     '''''''`    :'       ''''
          ''''''',,;''''''`      ''''''',,:''''''`      ''''''';,;''''    ''''  '''''`     ''''''';;'''''      ''''
           ''''''''''''''.        ''''''''''''''`        '''''''''''''    ''''   '''''      '''''''''''''      ''''
            ;'''''''''''           ;'''''''''''           ''''''''''''    ''''    ''''`      '''''''''''`      ''''
              ;'''''''               ;'''''''               ''''''''`     .''`     '''         ;'''''',        `'':









</pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My contribution to the Linux ate my RAM problem]]></title>
    <link href="http://blog.kablamo.org/2013/11/12/linux_ate_my_ram/"/>
    <updated>2013-11-12T00:00:00+00:00</updated>
    <id>http://blog.kablamo.org/2013/11/12/linux_ate_my_ram</id>
    <content type="html"><![CDATA[<p>I can never remember how to know how much free memory I have.</p>

<p>The Linux kernel claims most of the operating system&rsquo;s memory.  That doesn&rsquo;t
mean the operating system is out of memory.  It means the kernel has claimed it
and is managing it.  The problem is that the Linux kernel defines &lsquo;free&rsquo; memory
differently than any reasonable user.  There are excellent shiny reasons for
that, but as a user I don&rsquo;t really care.</p>

<pre><code>~ ⚡ free -m 
            total       used       free     shared    buffers     cached
Mem:          3822       2066       1755          0        147       1125
-/+ buffers/cache:        793       3029
Swap:         3394          0       3394
</code></pre>

<p>Experienced users and sysadmins will know from this means my system currently
has 3822 MB of total memory and 3029 MB of free memory.  Errr.  What?  See
<a href="http://www.linuxatemyram.com">linuxatemyram.com</a> for a more detailed
explanation.</p>

<p>I think the world deserves something easier to deal with.  So I wrote &lsquo;mem&rsquo;.
Use it like this:</p>

<pre><code>~ ⚡ mem
   927 MB used (24%)
  3823 MB total
</code></pre>

<p>Its a bash function.  I put the following in my
<a href="https://github.com/kablamo/dotfiles/blob/master/links/.bash/aliases.sh">.bashrc</a>:</p>

<pre><code>mem() {
    memfree=$( grep '^MemFree:' /proc/meminfo | awk '{ mem=($2)/(1024) ; printf "%0.0f", mem }' )
    buffers=$( grep '^Buffers:' /proc/meminfo | awk '{ mem=($2)/(1024) ; printf "%0.0f", mem }' )
    cached=$(  grep '^Cached:'  /proc/meminfo | awk '{ mem=($2)/(1024) ; printf "%0.0f", mem }' )
    free=$( echo $memfree+$buffers+$cached | bc -l )

    total=$( grep '^MemTotal:' /proc/meminfo | awk '{ mem=($2)/(1024) ; printf "%0.0f", mem }' )
    used=$( echo $total-$free | bc -l )
    pct=$( echo 100*$used/$total | bc -l )

    printf "%5.f MB used (%.0f%%)\n%5.f MB total\n" $used $pct $total
}
</code></pre>

<p>See also &lsquo;htop&rsquo; (sudo apt-get install htop).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[git-vspark plots your commits vertically with Term::Vspark]]></title>
    <link href="http://blog.kablamo.org/2013/03/17/git-vspark/"/>
    <updated>2013-03-17T00:00:00+00:00</updated>
    <id>http://blog.kablamo.org/2013/03/17/git-vspark</id>
    <content type="html"><![CDATA[<p>I added a <strong>git-vspark</strong> script to my App::Git::Spark CPAN module.  It does the
same thing as <a href="https://github.com/kablamo/git-spark">git-spark</a> but instead of
normal horizontal sparklines, it uses &ldquo;vertical&rdquo; sparklines.  Here&rsquo;s what that
looks like:</p>

<pre><code>$ git vspark --months 8 batman
Commits by batman over the last 8 months
total: 233   avg: 29   max: 69
 12 ██▋
 18 ████
 69 ███████████████▏
 59 ████████████▉
 16 ███▌
 28 ██████▏
 12 ██▋
 19 ████▎
</code></pre>

<p>This effect is achieved using
<a href="https://metacpan.org/module/Term::Vspark">Term::Vspark</a>.  Its companion module
<a href="https://metacpan.org/module/Term::Spark">Term::Spark</a> is a small pure Perl
replacement for Zach Holman&rsquo;s original <a href="https://github.com/holman/spark">spark</a>
implementation and it now powers my git-spark script.</p>

<p>These libraries were fun little projects developed over the past few weeks
mainly by <a href="https://github.com/LuRsT">Gil Gonçalves</a> with a few pull requests
from myself.  Having them available on CPAN means you can easily use sparklines
in your own Perl code.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Chinese zombie flashcards on GitHub (Catalyst & Perl)]]></title>
    <link href="http://blog.kablamo.org/2013/02/28/chinese-flashcards/"/>
    <updated>2013-02-28T00:00:00+00:00</updated>
    <id>http://blog.kablamo.org/2013/02/28/chinese-flashcards</id>
    <content type="html"><![CDATA[<p>There seem to be quite a few Perl people learning Chinese so maybe this will be
relevant here.</p>

<p>I created <a href="http://iijo.org">IIJO</a> which is a Perl powered website that does 3
sided flashcards (Chinese, English, and Pinyin).</p>

<p>The main advantage IIJO has over Anki and other flashcard sites is that you can
pick your flashcards from a dictionary so you don&rsquo;t have to type all that stuff
in yourself.   It allows you to share word lists with others and the built in
dictionary means that you don&rsquo;t need to worry about the accuracy and
completeness of other people who share wordlists.</p>

<p>The site does <a href="http://en.wikipedia.org/wiki/Spaced_repetition">spaced repetition</a>
like Anki.  But it has a different simpler user interface because Anki&rsquo;s 4
buttons after each flashcard <em>stresses me out.</em></p>

<p>If you want, you can just play with the <a href="http://iijo.org/dictionary">Chinese/English dictionary</a>.<br/>
The goal here is to be able to look up a word then add it easily to one of your
existing word lists.</p>

<p>If you think there is something missing, check out the project on
<a href="http://github.org/kablamo/iijo.org">GitHub</a> and send me a pull request.  I&rsquo;m
using Perl, Catalyst, and SQLite.</p>

<p>Here are some of the things on my todo list:</p>

<ul>
<li>More analytics/stats/data for measuring progress using D3</li>
<li>Speech/pronunciation samples</li>
<li>Export to Anki</li>
<li>Some way to learn phrases instead of just characters</li>
</ul>


<h1>Vampires and zombies</h1>

<p>Btw, here&rsquo;s an interesting thing I learned about the Chinese language: the word
for <code>vampire</code> is the same word thats used for <code>zombie</code>.</p>

<center><p style="margin-bottom: .5em; font-size: 4em; font-weight: bold;">僵尸</p></center>


<p>This is because the Chinese merged the two concepts into a single vampire
zombie monster.  So Chinese zombies are stiff and walk around with their hands
straight out.  But they also bite their victim&rsquo;s necks and suck their blood
passing on the zombie infection.</p>

<p>They are also fast and angry and they often do kung fu.  You can&rsquo;t
kill them of course, however you can put them to sleep if you write a spell on a
yellow piece of paper and put it on their forehead.  But if it falls off, they
wake up and get angry again.  Strangest of all is that they do little
hops like bunnies instead of walking.</p>

<p>I highly recommend Liao Yiwo&rsquo;s book, <a href="http://www.amazon.com/The-Corpse-Walker-Stories-Bottom/dp/0307388379/ref=sr_1_1?ie=UTF8&amp;qid=1362603639&amp;sr=8-1&amp;keywords=corpse+walker"><em>Corpse Walker,</em></a>
which tells the fascinating history and origin of Chinese zombies.  You can read more
about jiangshi on <a href="http://en.wikipedia.org/wiki/Jiangshi">Wikipedia</a>.  And of
course there are YouTube videos:</p>

<iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/56Zvquhww80" frameborder="0" allowfullscreen></iframe>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dist::Zilla::PluginBundle::DAGOLDEN is pretty awesome]]></title>
    <link href="http://blog.kablamo.org/2013/02/20/how-to-learn-dist-zilla/"/>
    <updated>2013-02-20T00:00:00+00:00</updated>
    <id>http://blog.kablamo.org/2013/02/20/how-to-learn-dist-zilla</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been using <a href="https://metacpan.org/module/Dist::Zilla">Dist::Zilla</a> for a
couple years.  It&rsquo;s a powerful way to automate CPAN releases.</p>

<p>But learning how to use it was not as easy as I hoped.</p>

<p>I remember when <code>Dist::Zilla</code> first debuted.  It was very exciting.  But I think
I may have drank too much of the cool aid becuase my expectations were very
high when I finally sat down to learn it.  I expected my experience to be
composed entirely of rainbows and puppy dog tails.</p>

<h2>Writing your own dist.ini or PluginBundle is hard</h2>

<p>Instead I found that creating a dist.ini or PluginBundle is fairly hard.  There
are a huge number of plugins and it&rsquo;s difficult for a newcomer to know which
are old, which are new, and how they work together.  If you look, for example,
at <code>Dist::Zilla::PluginBundle::DAGOLDEN</code> it uses 23 different plugins and the
<em>synopsis</em> is 132 lines long.</p>

<p>In retrospect, it was not reasonable to expect I could build something
comparable after a few minutes of perusing the docs.  It&rsquo;s more complex than
that.  So if you are looking to quickly add <code>Dist::Zilla</code> to your toolchain, you
need to use a PluginBundle and not write your own.</p>

<h2>How to quickly add Dist::Zilla to your toolchain</h2>

<p>One way is to just use <code>Dist::Zilla::PluginBundle::Basic</code>.  But this was not like
the promised land I had been dreaming of.  I wanted more.  So I kept looking.</p>

<p>Happily, there is a PluginBundle which I think works well as a reusable
component suitable for public consumption thats also very configurable.  I
doubt it&rsquo;s well known because the name sounds very personal.  That module is,
of course,
<a href="https://metacpan.org/module/Dist::Zilla::PluginBundle::DAGOLDEN">Dist::Zilla::PluginBundle::DAGOLDEN</a>.</p>

<p>I think the workflow it uses will work for many people.  Even if it
doesn&rsquo;t, reading the code is a great way to learn how to write your own
PluginBundle.  And because it&rsquo;s so comprehensive it&rsquo;s like having a up-to-date
map of the state of the art in <code>Dist::Zilla</code> plugins and how they work
together.</p>

<p>Here&rsquo;s what my dist.ini looks like:</p>

<pre><code>name    = App-Git-Ribbon
author  = Eric Johnson &lt;cpan at iijo dot nospamthanks dot org&gt;
license = Perl_5
copyright_holder = Eric Johnson
main_module = lib/App/Git/Ribbon.pm

[@DAGOLDEN]
no_spellcheck = 1
AutoMetaResources.bugtracker.rt = 0
AutoMetaResources.repository.github = user:kablamo
AutoMetaResources.bugtracker.github = user:kablamo
weaver_config = @FLORA
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CPAN release of App::Git::Ribbon, App::Git::Spark]]></title>
    <link href="http://blog.kablamo.org/2013/02/12/cpan-release-git-ribbon-git-spark/"/>
    <updated>2013-02-12T00:00:00+00:00</updated>
    <id>http://blog.kablamo.org/2013/02/12/cpan-release-git-ribbon-git-spark</id>
    <content type="html"><![CDATA[<p>I packaged up these scripts and released them on CPAN to make them a little
easier to install and manage.</p>

<p><strong>App::Git::Ribbon</strong> <br>
on <a href="https://metacpan.org/module/App::Git::Ribbon">CPAN</a><br>
on <a href="https://github.com/kablamo/git-ribbon">GitHub</a><br>
previous <a href="http://blog.kablamo.org/git-ribbon">blog post</a></p>

<p><strong>App::Git::Spark</strong> <br>
on <a href="https://metacpan.org/module/App::Git::Spark">CPAN</a><br>
on <a href="https://github.com/kablamo/git-spark">GitHub</a><br>
previous <a href="http://blog.kablamo.org/git-spark-revisited">blog post</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[git-ribbon]]></title>
    <link href="http://blog.kablamo.org/2013/02/02/git-ribbon/"/>
    <updated>2013-02-02T00:00:00+00:00</updated>
    <id>http://blog.kablamo.org/2013/02/02/git-ribbon</id>
    <content type="html"><![CDATA[<p>I wrote a little Perl script called
<a href="https://github.com/kablamo/git-ribbon">git-ribbon</a> to help me review the
latest changes in a git repository.</p>

<p>The way I used to review changes was by reading through the <code>git log</code>.  I try
to do this every morning at work to keep up with whats going on.  But I was
having a few problems:</p>

<ol>
<li>Its hard to know exactly which changes are new.</li>
<li>I want to review commits in the order they happened (instead of most recent first).</li>
<li><code>git log</code> diff output can be hard to read and may not have enough context
&mdash; sometimes I want a side by side diff like I get from <code>vimdiff</code> or <code>git
difftool</code>.</li>
</ol>


<p>Basically I wanted a quick and easy way to review the latest changes in a way
that feels a little more like an RSS feed.  So I wrote this script.</p>

<h2>How to use git-ribbon</h2>

<p><strong>First</strong> mark your current place in the commit history.  This command will
place a tag named _ribbon at origin/master.  Basically its a bookmark at your
current location.</p>

<pre><code>⚡ git ribbon --save
</code></pre>

<p><strong>Next</strong>, pull the latest changes made by your fellow conspirators from the
remote repository.</p>

<pre><code>⚡ git pull
</code></pre>

<p><strong>Then</strong> use <code>git ribbon</code> to review only the changes that have occurred since _ribbon:</p>

<pre><code>⚡ git ribbon
Eric Johnson 6 weeks ago ecf43db
Css tweaks.
root/html/calculator/realCost.tt

press 's' to skip 

Eric Johnson 4 weeks ago 9595fa0
fix css margin class.
root/css/networth.css
root/css/style.less
root/css/style.less.old
root/html/calculator/realCost.tt
root/html/fi.tt

press 's' to skip 

Eric Johnson 2 weeks ago 5ef0fb2
Added daysPerYear.
lib/Networth/Controller/Calculator.pm
lib/Networth/Out/RealCost.pm
root/html/calculator/realCost.tt

press 's' to skip 
</code></pre>

<p>The script will pause and wait for input when it prints <code>press 's' to skip</code>.
If you type anything other than <code>s</code>, it will show you the side by side diff
using <code>git difftool</code>.</p>

<p><a href="http://farm9.staticflickr.com/8107/8457314152_7f8b3c955c_b.jpg" title="click to view large version"><img src="http://farm9.staticflickr.com/8107/8457314152_7f8b3c955c.jpg" width="500" height="201" alt="vimdiff"></a></p>

<p>After you have reviewed all the changes, be sure to mark your place again so
its ready to go next time you want to do a pull:</p>

<pre><code>git ribbon --save
</code></pre>

<h2>Bonus tips</h2>

<p>In your .gitconfig try this:</p>

<pre><code>[diff]
    tool = vimdiff
</code></pre>

<p>The default colors for vimdiff look like they were created by strange clowns so
try this instead:</p>

<pre><code>⚡ mkdir -p ~/.vim/colors/
⚡ wget https://github.com/kablamo/dotfiles/blob/master/links/.vim/colors/iijo.vim -O ~/.vim/colors/iijo.vim
⚡ echo "colorscheme iijo" &gt;&gt; ~/.vimrc
</code></pre>

<p>Then learn to use vimdiff:</p>

<ul>
<li>To switch windows type <code>ctl-w l</code> and <code>ctl-w h</code>.
For more help type <code>:help window-move-cursor</code>.</li>
<li>To open and close folds type <code>zo</code> and <code>zc</code>.
For more help type <code>:help fold-commands</code>.</li>
<li>To close vimdiff with less typing try <code>ZZ</code>.</li>
</ul>


<h2>Alternatives to vimdiff</h2>

<p>If you don&rsquo;t want to invest the time just yet to learn vim, use an alternative like meld, opendiff,
p4merge, xxdiff, etc.  Side by side diffs are worth it!</p>

<h2>See also</h2>

<p>This script was inspired by a great <a href="http://gitready.com/advanced/2011/10/21/ribbon-and-catchup-reading-new-commits.html">blog
post</a>
on gitready.com which has a number of awesome git tricks for both beginners and
advanced users.</p>

<p>I also ended up writing a <a href="https://github.com/kablamo/vim-ribbon">vim plugin</a>
that is probably better user experience if you very comfortable in vim.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Whats in your $PERL5LIB?]]></title>
    <link href="http://blog.kablamo.org/2013/01/29/whats-in-your-perl5lib/"/>
    <updated>2013-01-29T00:00:00+00:00</updated>
    <id>http://blog.kablamo.org/2013/01/29/whats-in-your-perl5lib</id>
    <content type="html"><![CDATA[<p>Ever wonder whats in your $PERL5LIB?  Here is one way to find out:</p>

<pre><code>⚡ echo $PERL5LIB
.:./lib:/home/eric/perl5/perlbrew/perls/perl-5.16.2/lib/perl5:/home/eri
c/perl5/perlbrew/perls/perl-5.16.2/lib/perl5/i686-linux:/home/eric/perl
5/perlbrew/perls/perl-5.16.2/lib/perl5/i686-linux-gnu-thread-multi-64in
t:/home/eric/perl5/perlbrew/perls/perl-5.16.2/lib/site_perl:/home/eric/
perl5/perlbrew/perls/perl-5.16.2/lib/5.16.2
</code></pre>

<p>My human eyeballs are not equipped to parse that.  Unhelpful.  So I put this in
my .bashrc:</p>

<pre><code>alias perl5lib='perl -E "say join \"\n\", split \":\", \$ENV{PERL5LIB}"'
</code></pre>

<p>Here it is in action:</p>

<pre><code>⚡ perl5lib
.
./lib
/home/eric/perl5/perlbrew/perls/perl-5.16.2/lib/perl5
/home/eric/perl5/perlbrew/perls/perl-5.16.2/lib/perl5/i686-linux
/home/eric/perl5/perlbrew/perls/perl-5.16.2/lib/perl5/i686-linux-gnu-thread-multi-64int
/home/eric/perl5/perlbrew/perls/perl-5.16.2/lib/site_perl
/home/eric/perl5/perlbrew/perls/perl-5.16.2/lib/5.16.2
</code></pre>

<p>Better.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[git-spark revisited]]></title>
    <link href="http://blog.kablamo.org/2013/01/27/git-spark-revisited/"/>
    <updated>2013-01-27T00:00:00+00:00</updated>
    <id>http://blog.kablamo.org/2013/01/27/git-spark-revisited</id>
    <content type="html"><![CDATA[<p>A <a href="http://blog.kablamo.org/git-spark-plots-your-commit-history/">few days ago</a>
I wrote about my <a href="https://gist.github.com/4598480">git-spark</a> Perl script.  It
counts how many commits a user has in a git project and makes a little graph
and displays it on the command line.</p>

<p>However I also said it wasn&rsquo;t very useful becuase you can&rsquo;t compare one graph
with another because the scale changes when different graphs have different min
and max values.  For example these two data series produce identical graphs
despite have very different data.</p>

<pre><code>⚡ spark 1 2 3 4 5
▁▂▄▆█
⚡ spark 10 20 30 40 50
▁▂▄▆█
</code></pre>

<p>So I put on my thinking cap and came up with the following solution:</p>

<pre><code>⚡ spark 50 1 1 2 3 4 5
█▁▁▁▁▁▁
⚡ spark 50 1 10 20 30 40 50
█▁▂▃▅▆█
</code></pre>

<p>I just need to prepend a max and a min to the data to get consistent scaling
and now I can compare graphs.</p>

<p>For git-spark, I now assume the min is zero and you can pass in the max using
the &mdash;scale option.  (Note that I chopped off the max/min characters from
the spark output as they are distracting.)</p>

<p>I also decided to print out the number of commits which helps with the
scaling issue.  And while I was in there I got it to calculate the total,
average, and maximum number of commits for that duration.</p>

<p>Here is an example.  It doesn&rsquo;t really need the &mdash;scale option because the data
is so close anyway, but it shows how to use it:</p>

<pre><code>⚡ git spark --days 14 --scale 23 Stegosaurus
Commits by Stegosaurus over the last 14 days
total: 95   avg: 7   max: 23
10 15 6 23 5 0 0 1 15 0 17 3 0 0
▄▅▂█▂▁▁▁▅▁▆▁▁▁
⚡ git spark --days 14 --scale 23 Triceratops
Commits by Triceratops over the last 14 days
total: 90   avg: 7   max: 22
1 12 3 11 3 0 0 6 16 3 13 22 0 0
▁▄▁▄▁▁▁▂▅▁▄▇▁▁
</code></pre>

<p>Of course you still need to consider the quality of commits and not just how
many there are.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[git-spark plots your commit history]]></title>
    <link href="http://blog.kablamo.org/2013/01/23/git-spark-plots-your-commits/"/>
    <updated>2013-01-23T00:00:00+00:00</updated>
    <id>http://blog.kablamo.org/2013/01/23/git-spark-plots-your-commits</id>
    <content type="html"><![CDATA[<p>I recently rediscovered <a href="https://github.com/holman/spark">spark</a>, Zach Holman&rsquo;s
cool little sparklines graphing tool for the command line.  I used a little
Perl to mash it up with &lsquo;git log&rsquo; and came up with
<a href="https://gist.github.com/4598480">git-spark</a> which works like this:</p>

<pre><code>⚡ git spark --hours 8
Commits by Godzilla over the last 8 hours
▃▃▁▆▅▁▁▃█
⚡ git spark -d 14 HulkHogan
Commits by HulkHogan over the last 14 days
▇▅▄▁▁▄▅▂█▂▁▁▁▅
⚡ git spark -w 52 Tarzan
Commits by Tarzan over the last 52 weeks
▃▁▂▃▃▃▂▁█▆▁▄▄▃▂▂▁▁▂▃▃▄▃▃▂▃▁▁▁▁▁▂▂▃▆▅▂▁▄▃▂▄▄▄▁▂▁▁▂▂▂▃
</code></pre>

<p>And heres the usage/help:</p>

<pre><code>⚡ git spark -h
usage: git spark [-dhmowy] [long options...] [AUTHOR]
        -o --hours      commits from the last x hours
        -d --days       commits from the last x days
        -w --weeks      commits from the last x weeks
        -m --months     commits from the last x months
        -y --years      commits from the last x years
        -h --help       show this message
</code></pre>

<p>It was fun to build, but afterward I realized its totally useless.  Clearly
&lsquo;commits&rsquo; are a problematic metric.  But its much worse than that.  The peaks
on the graph are relative to the lows on the same graph.  So a peak on one
graph has no relation to a peak on another.  That means I can&rsquo;t compare one
sparkline with another.</p>

<p>Back to the drawing board.  I&rsquo;ll have to come up with something else.</p>

<p><strong>UPDATE:</strong> I solved this problem in <a href="http://blog.kablamo.org/git-spark-revisited/">git-spark revisted</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use Carp::Always to fix circular dependencies]]></title>
    <link href="http://blog.kablamo.org/2013/01/19/how-to-resolve-circular-dependencies/"/>
    <updated>2013-01-19T00:00:00+00:00</updated>
    <id>http://blog.kablamo.org/2013/01/19/how-to-resolve-circular-dependencies</id>
    <content type="html"><![CDATA[<p>Circular dependencies happen when your library requires a library which
requires your library.  Here&rsquo;s an example.  Lets say you have 2 packages:</p>

<p><strong>AlienPlanet.pm</strong></p>

<pre><code>package AlienPlanet;
use Moose;
use Dinosaurs;          # &lt;--- Circular dependency
sub has_dinosaurs {1}
1;
</code></pre>

<p><strong>Dinosaurs.pm</strong></p>

<pre><code>package Dinosaurs;
use Moose;
use AlienPlanet;        # &lt;--- Circular dependency
sub has_rabies {1}
1;
</code></pre>

<p>If you try to compile this, you get the following warning:</p>

<pre><code>⚡ perl -c lib/AlienPlanet.pm 
Subroutine has_dinosaurs redefined at lib/AlienPlanet.pm line 5.
lib/AlienPlanet.pm syntax OK
</code></pre>

<p>In this case its obvious where the problem is.</p>

<p>But if the package you included, included 25 other libraries, which included
other libraries, which included your original library &mdash; then its harder to
figure out where the circle is.</p>

<p>Happily I discovered a good solution. First, modify <strong>AlienPlanet.pm</strong> to look
like this:</p>

<pre><code>package AlienPlanet;
sub has_dinosaurs {1}   &lt;-- swap
use Dinosaurs;          &lt;-- swap
1;
</code></pre>

<p>Next, try compiling your code again but this time with
<a href="http://perladvent.org/2011/2011-12-04.html">Carp::Always</a>:</p>

<pre><code>⚡ perl -MCarp::Always -c lib/AlienPlanet.pm                                                                                                            
Subroutine has_dinosaurs redefined at lib/AlienPlanet.pm line 4.
        require AlienPlanet.pm called at lib/Dinosaurs.pm line 4
        Dinosaurs::BEGIN() called at lib/AlienPlanet.pm line 4
        eval {...} called at lib/AlienPlanet.pm line 4
        require Dinosaurs.pm called at lib/AlienPlanet.pm line 5
        AlienPlanet::BEGIN() called at lib/AlienPlanet.pm line 4
        eval {...} called at lib/AlienPlanet.pm line 4
lib/AlienPlanet.pm syntax OK
</code></pre>

<p>Now you&rsquo;ve got a stack trace and its easy to see where your problem is.  All
thats left is figuring out how to solve it. (Fast solution: use
<a href="https://metacpan.org/module/Class::Load">Class::Load</a> in the Dinosaurs
package.)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Devel::Dwarn helps me type less]]></title>
    <link href="http://blog.kablamo.org/2012/09/05/data-dumper-concise/"/>
    <updated>2012-09-05T00:00:00+01:00</updated>
    <id>http://blog.kablamo.org/2012/09/05/data-dumper-concise</id>
    <content type="html"><![CDATA[<p>2 bajillion times a day I want to print a hashref and see whats inside.
But every time I want to do that I have to type:</p>

<pre><code>use Data::Dumper::Concise;
print Dumper $hashref;
</code></pre>

<p>First of all, thats too much typing.  And second of all I keep forgetting to
delete my print statements when I check in.</p>

<p>Happily I recently discovered
<a href="https://metacpan.org/module/Devel::Dwarn">Devel::Dwarn</a> on CPAN.  It is
(basically) an alias to
<a href="https://metacpan.org/module/Data::Dumper::Concise">Data::Dumper::Concise</a>.</p>

<p>The name is shorter which means its slightly less typing so I am already
winning.  But thats not the best part.  Lets see how to use it.</p>

<p>On the command line I do this:</p>

<pre><code>perl -MDevel::Dwarn codeIWantToDebug.pl
</code></pre>

<p>And then in my code I do this:</p>

<pre><code>print ::Dwarn $hashref;
</code></pre>

<p>There are 2 levels of good here:</p>

<ol>
<li> Less typing.</li>
<li> When I run my code without &lsquo;perl -M&rsquo; I get compile time errors in all
 the places I forgot to remove <code>print ::Dwarn $hashref</code>.</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Slides from my Selenium talk at YAPCEU 2012]]></title>
    <link href="http://blog.kablamo.org/2012/08/26/slides-from-my-selenium-talk-at-yapc-eu-2012/"/>
    <updated>2012-08-26T00:00:00+01:00</updated>
    <id>http://blog.kablamo.org/2012/08/26/slides-from-my-selenium-talk-at-yapc-eu-2012</id>
    <content type="html"><![CDATA[<p>I gave my first <a href="http://act.yapc.eu/ye2012/schedule?day=2012-08-20">YAPC::EU</a>
presentation this year in Frankfurt after doing a trial run at London.pm.  I
received some good questions and comments and a few new ideas.  It was a good
experience and I want to do this again.</p>

<p>My talk introduced Selenium and common problems people have when first trying
to write Selenium tests in Perl.  I also explained how I solved many of those
problems by creating
<a href="https://metacpan.org/module/Test::WWW::Selenium::More">Test::WWW::Selenium::More</a>.</p>

<p>The slides are available
<a href="http://kablamo.org/selenium-2012-yapceu-slides/">online</a>. Or if you need to
download them for some reason, they are hosted on
<a href="https://github.com/kablamo/selenium-2012-yapceu-slides">github</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Test::WWW::Selenium::More]]></title>
    <link href="http://blog.kablamo.org/2012/05/17/test-www-selenium-more/"/>
    <updated>2012-05-17T00:00:00+01:00</updated>
    <id>http://blog.kablamo.org/2012/05/17/test-www-selenium-more</id>
    <content type="html"><![CDATA[<p>I recently released
<a href="https://metacpan.org/module/Test::WWW::Selenium::More">Test::WWW::Selenium::More</a>
to CPAN.  It is a small collection of utilities to help you write Selenium
tests.  Here are some reasons to use it:</p>

<ol>
<li><p>It has a
<a href="https://metacpan.org/module/Test::WWW::Selenium::More::Manual">manual</a> which
provides a concise but fairly comprehensive howto guide to Selenium testing in
Perl.</p></li>
<li><p>It uses Moose so you can more easily use roles.  For example you might want
a role for methods that deal with authentication and a role for methods that
deal with payments.</p></li>
<li><p>Smarter testing with methods like wait_for_jquery() and jquery_click().  You
should never sleep() in your Selenium tests because that leads to slow tests
with random failures which leads to frustration, low morale, hair pulling, and
heavy drinking.</p></li>
<li><p>Method chaining.  Here is what this looks like:</p>

<pre><code> use Test::Most;
 use Test::WWW::Selenium::More;

 Test::WWW::Selenium::More-&gt;new()

 -&gt;note('Search google')
 -&gt;open_ok("http://www.google.com")
 -&gt;title_like(qr/Google Search/)
 -&gt;type_ok('cat pictures')
 -&gt;follow_link_ok('Search')

 -&gt;note('Check the number of results')
 -&gt;is_text_present_ok('2 bajillion results');

 done_testing;
</code></pre></li>
</ol>


<p>Bugs or patches?  <a href="https://github.com/kablamo/Test-WWW-Selenium-More">https://github.com/kablamo/Test-WWW-Selenium-More</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[New on CPAN - MooseX::CachingProxy]]></title>
    <link href="http://blog.kablamo.org/2012/05/10/new-on-cpan-moosex-cachingproxy/"/>
    <updated>2012-05-10T00:00:00+01:00</updated>
    <id>http://blog.kablamo.org/2012/05/10/new-on-cpan-moosex-cachingproxy</id>
    <content type="html"><![CDATA[<p>Last week I released <a href="https://metacpan.org/module/MooseX::CachingProxy">MooseX::CachingProxy</a> to CPAN.</p>

<p>Its a small module that intercepts requests from your LWP based application.
Those requests are relayed on to the intended server unless they already exist
in the cache.</p>

<p>To toggle on and off the caching proxy, MooseX::CachingProxy provides the
attribute &lsquo;caching_proxy&rsquo;.  Here is a quick demo:</p>

<pre><code>package MyApp;
use Moose;
use WWW::Mechanize; # or any LWP based library
with 'MooseX::CachingProxy';

sub url { 'http://example.com' } # required by MooseX::CachingProxy

sub download { 
    my $self = shift;
    $self-&gt;start_caching_proxy;
    return WWW::Mechanize-&gt;new()-&gt;get($self-&gt;url . '/foo'); 
}
</code></pre>

<p>Under the covers, its a tiny Plack application that mashes up
<a href="https://metacpan.org/module/Plack::Middleware::Cache">Plack::Middleware::Cache</a> and <a href="https://metacpan.org/module/Plack::App::Proxy">Plack::App::Proxy</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[New on CPAN - Log::JSON]]></title>
    <link href="http://blog.kablamo.org/2012/04/29/new-on-cpan-log-json/"/>
    <updated>2012-04-29T00:00:00+01:00</updated>
    <id>http://blog.kablamo.org/2012/04/29/new-on-cpan-log-json</id>
    <content type="html"><![CDATA[<p>I released Log::JSON v0.001 to CPAN today.  Its a very simple JSON logger.</p>

<p>The advantage of a JSON logger is that a human can open a mysterious new log
file and quickly decipher the content because each piece of information is
labeled.  Using JSON also means that parsing the log file and reviving the data
structures is trivial.</p>

<p>Here is some example usage for you:</p>

<pre><code>use Log::JSON;
my $logger = Log::JSON-&gt;new(
    file            =&gt; '/path/errorlog.json', # required
    date            =&gt; 1, # optional
    remove_newlines =&gt; 1, # optional
);
$logger-&gt;log(a =&gt; 1, b =&gt; 2);
# '/path/errorlog.json' now contains:
# {"__date":"2010-03-28T23:15:52Z","a":1,"b":1}
</code></pre>

<p>I wish I had written it as a Log::Dispatch plugin, and perhaps I&rsquo;ll get around
to that sometime.</p>

<p>One problem with using JSON is that there is a lot repetition and if your log
file is a bajillion lines long, then that&rsquo;s going to be a big file.  Happily,
file compression solves this problem very well.  And Vim and less handle
compressed files on the fly so viewing the file is not inconvenient.  And now
that I write this, I think some kind of compression feature may be nice for
Log::JSON and pretty great for Log::Dispatch too.</p>

<p>Log::JSON on github: <a href="https://github.com/kablamo/Log-JSON">https://github.com/kablamo/Log-JSON</a></p>
]]></content>
  </entry>
  
</feed>
