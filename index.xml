<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kablamo</title>
    <link>http://blog.kablamo.org/</link>
    <description>Recent content on Kablamo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 29 Jul 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://blog.kablamo.org/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Book Review: The Secrets of Happy Families</title>
      <link>http://blog.kablamo.org/articles/the-secrets-of-happy-families/</link>
      <pubDate>Sun, 29 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>http://blog.kablamo.org/articles/the-secrets-of-happy-families/</guid>
      <description>The Secrets of Happy Families
Agile families
 Just like agile software development: iterative  </description>
    </item>
    
    <item>
      <title>Recommended Modules: Working With Files</title>
      <link>http://blog.kablamo.org/articles/happy-families/</link>
      <pubDate>Tue, 03 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>http://blog.kablamo.org/articles/happy-families/</guid>
      <description>This week I updated the Recommended Libraries chapter of Minimum Viable Perl.
There are thousands of modules on MetaCPAN. Some are abandoned, some were an experiment that never took off, some are discouraged, and sometimes its just not obvious which module solves your problem best. In the Recommended Libraries chapter I&amp;rsquo;m creating a curated guide to MetaCPAN.
I&amp;rsquo;ve included the latest article below but the canonical (and most up to date version) is available here: Working with files.</description>
    </item>
    
    <item>
      <title>Handling exceptions with try/catch</title>
      <link>http://blog.kablamo.org/articles/try-catch/</link>
      <pubDate>Wed, 28 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>http://blog.kablamo.org/articles/try-catch/</guid>
      <description>One way to handle exceptions in Perl is with Syntax::Keyword::Try which adds try and catch keywords to Perl. As always there are trade offs and it depends on your goals and preferences.
It has no dependencies and plays nicely with perltidy and perlcritic. However, it is 2.6 times slower than eval() and it&amp;rsquo;s not included in the Perl core so you will need to install it.
Alternate
Solutions There is more than one way to handle exceptions in Perl and several modules on MetaCPAN which add try/catch keywords to Perl.</description>
    </item>
    
    <item>
      <title>Handling exceptions with die/eval</title>
      <link>http://blog.kablamo.org/articles/die-eval/</link>
      <pubDate>Tue, 20 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>http://blog.kablamo.org/articles/die-eval/</guid>
      <description>The standard Perl syntax for handling exceptions (die/eval) is quirky and has some pitfalls that are easy to tumble into. However its pretty common so you will need to understand it.
Alternate
Solution Several modules exist that add try/catch syntax to Perl. As always there are some trade offs. See Handling exceptions with try/catch for details.   Throwing exceptions To throw an exception call die(). Other languages call it throw(), but in Perl its called die().</description>
    </item>
    
    <item>
      <title>What&#39;s the best Perl module for X</title>
      <link>http://blog.kablamo.org/articles/recommended-modules/</link>
      <pubDate>Sat, 10 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>http://blog.kablamo.org/articles/recommended-modules/</guid>
      <description>Its hard for beginners and experts alike in any language to keep up with the flood of new libraries being written all the time. MetaCPAN has thousands of modules. Its hard to know which module is the best one. For example there are at least 7 modules for parsing JSON in Perl. New modules appear all the time which make the old best solution obsolete.
How to choose a module There are a couple good sources of advice:</description>
    </item>
    
    <item>
      <title>I wrote a Perl book</title>
      <link>http://blog.kablamo.org/articles/mvp/</link>
      <pubDate>Fri, 08 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>http://blog.kablamo.org/articles/mvp/</guid>
      <description>I wrote a Perl book accidentally during my vacation. I started typing and everything just fell out of my head over the next few days. Its still pretty rough but I think its a decent start.
The book is called Minimum Viable Perl.
Ok, its not a real published book. Maybe I&amp;rsquo;ll self publish it on Amazon some day. For now its just a website. I&amp;rsquo;m going to call it a book anyway.</description>
    </item>
    
    <item>
      <title>Vim plugin keybindings</title>
      <link>http://blog.kablamo.org/articles/vim-plugin-keybindings/</link>
      <pubDate>Sun, 26 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>http://blog.kablamo.org/articles/vim-plugin-keybindings/</guid>
      <description>I pick up all kinds of vim tricks and plugins but I can never remember all the shortcuts. I wrote up this quick reference to help myself memorize how to use these tools.
Caveat: some of these keybindings are unique to my .vimrc.
 table { margin-top: 0rem; } td { vertical-align : top; padding-left : .5em; padding-right : .5em; background : #999; color : #333; } th { text-align:left; background : #666; color : #ccc; white-space : nowrap; font-weight : normal; padding-left : .</description>
    </item>
    
    <item>
      <title>My long term goals v2017.1</title>
      <link>http://blog.kablamo.org/articles/five-year-goals/</link>
      <pubDate>Sun, 08 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>http://blog.kablamo.org/articles/five-year-goals/</guid>
      <description>Maybe writing about my long term goals occasionally will help me think through them and commit to them.
I currently group my goals into 4 major categories. I try to re-evaluate them frequently. Which means they change. I try to look at them every day so they are top of mind and I don&amp;rsquo;t get off track.
To achieve these goals I need to break them down into smaller and smaller chunks until I find a chunk thats easy to do.</description>
    </item>
    
    <item>
      <title>My goals for 2017</title>
      <link>http://blog.kablamo.org/articles/next-year/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>http://blog.kablamo.org/articles/next-year/</guid>
      <description>Spend less than $36,500 in 2017. If I can keep my spending at this level I should be on my way to a long term goal of being financially independent at age 42. We spent about $45,000 in 2016.
  Build a portfolio of airline miles and hotel points by travel hacking credit cards. This could save me $4,000 a year or more in annual plane tickets and hotels for a family of 3 to travel to Singapore.</description>
    </item>
    
    <item>
      <title>CPAN::Diff - Compare local Perl modules to your darkpan or cpan</title>
      <link>http://blog.kablamo.org/articles/cpan-diff/</link>
      <pubDate>Fri, 07 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>http://blog.kablamo.org/articles/cpan-diff/</guid>
      <description>At work we have a Pinto powered darkpan. But developers install stuff from cpan on their development servers to try things out and occasionally these experiments don&amp;rsquo;t get cleaned up and cause problems. It would be nice nice to know what modules are installed on a machine and how that compares to whats on our darkpan. Specifically I want to know which modules are:
 Older than those on the darkpan Newer than those on the darkpan Installed on the server but are not in the darkpan  I solved this by stealing a lot of code from cpan-outdated and writing CPAN::Diff:</description>
    </item>
    
    <item>
      <title>Bash tricks: set -euxo pipefail</title>
      <link>http://blog.kablamo.org/articles/bash-tricks-eux/</link>
      <pubDate>Sun, 08 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>http://blog.kablamo.org/articles/bash-tricks-eux/</guid>
      <description>set -eux is a super useful bash trick I&amp;rsquo;ve been using in Chef and Rex tasks. I&amp;rsquo;m going to break it down and explain it one option at a time:
set -e This
cmd1 &amp;amp;&amp;amp; cmd2 &amp;amp;&amp;amp; cmd3  is equivalent to this
set -e cmd1 cmd2 cmd3  set -u The shell prints a message to stderr when it tries to expand a variable that is not set. Also it immediately exits.</description>
    </item>
    
    <item>
      <title>The Perl test ecosystem (slides)</title>
      <link>http://blog.kablamo.org/articles/slides-perl-testing/</link>
      <pubDate>Sat, 26 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>http://blog.kablamo.org/articles/slides-perl-testing/</guid>
      <description>I gave this talk last Thursday at Chicago.pm. This talk assumes the listener knows very little about testing in Perl but likely has something for more advanced users as well.
It begins with prove and Test::More, but then moves on to explore the Test:: namespace on CPAN and talk about 20 other test modules. CPAN has a large number of modules to help with testing &amp;ndash; its a pretty healthy ecosystem.</description>
    </item>
    
    <item>
      <title>Publish your first CPAN module in &lt; 5 minutes (slides)</title>
      <link>http://blog.kablamo.org/articles/slides-first-cpan-module/</link>
      <pubDate>Tue, 15 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>http://blog.kablamo.org/articles/slides-first-cpan-module/</guid>
      <description>I originally gave this talk at Chicago.pm as part of a “Distribution Management Shootout” – a 3 way duel between:
 jberger&amp;rsquo;s talk about Module::Build and and the &amp;ldquo;Classic&amp;rdquo; build systems preaction&amp;rsquo;s talk about Dist::Zilla, and my talk about Minilla and Carton.  It was a great overview of the most popular tools and I think all the talks are worth checking out.
As usual, this talk is both a living document and reference material.</description>
    </item>
    
    <item>
      <title>mstpan quick reference</title>
      <link>http://blog.kablamo.org/articles/mstpan/</link>
      <pubDate>Tue, 08 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>http://blog.kablamo.org/articles/mstpan/</guid>
      <description>Last Christmas, the inimitable Matt Trout (mst) created an opinionated tour of CPAN where he recommended modules for some common problems. I think its brilliant, useful, and entertaining and I&amp;rsquo;ve decided to compile a high level overview all on one page in order to create a quick reference.
I&amp;rsquo;ve tried to distill his wisdom and wit down to a few words. But I recommend clicking the section headers and following the links to Matt&amp;rsquo;s original posts to see his actual real opinions in their full complexity.</description>
    </item>
    
    <item>
      <title>HTTP::Request::AsCurl</title>
      <link>http://blog.kablamo.org/articles/http-request-ascurl/</link>
      <pubDate>Tue, 27 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.kablamo.org/articles/http-request-ascurl/</guid>
      <description>Today, on a whim, I released a module called HTTP::Request::AsCurl to CPAN. It converts an HTTP::Request object to a curl command.
use HTTP::Request::Common; use HTTP::Request::AsCurl; my $request = POST(&#39;api.earth.defense/weapon1&#39;, { target =&amp;gt; &#39;mothership&#39;, when =&amp;gt; &#39;now&#39; }); say join &amp;quot;\n&amp;quot;, $request-&amp;gt;as_curl; # curl --dump-header - -XPOST &amp;quot;api.earth.defense/weapon1&amp;quot; \ # --data &#39;target=mothership&#39; \ # --data &#39;when=now&#39;  It works by injecting the as_curl() method into the HTTP::Request namespace. This must be a bad idea and probably not a great bit of code to rely on in a production environment.</description>
    </item>
    
    <item>
      <title>Reading code - Camel-Snake-Kebab</title>
      <link>http://blog.kablamo.org/articles/perl-camel-snake-kebab/</link>
      <pubDate>Mon, 26 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.kablamo.org/articles/perl-camel-snake-kebab/</guid>
      <description>Camel-Snake-Kebab is a Clojure library for word case conversions. I have wanted to see this on CPAN for a while so last week I finally ported it to Perl. I even ported the test suite. Here is a synopsis of my String::CamelSnakeKebab Perl module:
use String::CamelSnakeKebab qw/:all/; lower_camel_case(&#39;flux-capacitor&#39;) # Returns &#39;fluxCapacitor&#39; upper_camel_case(&#39;flux-capacitor&#39;) # Returns &#39;FluxCapacitor&#39; lower_snake_case &#39;ASnakeSlithersSlyly&#39; # Returns &#39;a_snake_slithers_slyly&#39; upper_snake_case(&#39;ASnakeSlithersSlyly&#39;) # Returns &#39;A_Snake_Slithers_Slyly&#39; constant_case(&amp;quot;I am constant&amp;quot;) # Returns &amp;quot;I_AM_CONSTANT&amp;quot; kebab_case(&#39;Peppers_Meat_Pineapple&#39;) # Returns &#39;peppers-meat-pineapple&#39; http_header_case(&amp;quot;x-ssl-cipher&amp;quot;) # Returns &amp;quot;X-SSL-Cipher&amp;quot;  Clojure This was my first contact with Clojure and I found the code I was reading to be bite sized, concise, elegant code.</description>
    </item>
    
    <item>
      <title>Test::Pretty - because TAP is unnattractive</title>
      <link>http://blog.kablamo.org/articles/test-pretty/</link>
      <pubDate>Thu, 08 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.kablamo.org/articles/test-pretty/</guid>
      <description>Test::Pretty (artfully written by the inimitable @tokuhirom) makes my tests look like this:
This is especially nice when I have subtests.
How it works I can enable Test::Pretty like this
prove -MTest::Pretty -vlr t  But typing extra characters is not fun. Happily @tokuhirom also created a prove plugin (which is included with the Test::Pretty module) which allows me to do this:
prove -Pretty -vlr t  Shorter but still too much typing so I created a ~/.</description>
    </item>
    
    <item>
      <title>Why reading code is good for me</title>
      <link>http://blog.kablamo.org/articles/reading-code/</link>
      <pubDate>Wed, 23 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.kablamo.org/articles/reading-code/</guid>
      <description>So I can start kicking butt faster - When I start a new job or a new contract. Or when I hack on a new feature. Or every day of my life as a programmer that involves legacy code. Yeah pretty much all the time. So I can learn new tricks - Healthy languages evolve. Idioms and slang are tools for more efficiently expressing ideas. I want to be on top of that.</description>
    </item>
    
    <item>
      <title>An experiment - Write code every day</title>
      <link>http://blog.kablamo.org/articles/write-code-every-day/</link>
      <pubDate>Sun, 20 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.kablamo.org/articles/write-code-every-day/</guid>
      <description>If you missed John Resig&amp;rsquo;s recent post about writing code everyday I highly recommend it.
He is a busy guy with a full time job (at Khan Academy), a few open source side projects (the author of jQuery), a wife, and a few hobbies. How to sustainably get stuff done on his open source side projects without his wife leaving him? He decided to start writing (non work) code for 30 minutes every day.</description>
    </item>
    
    <item>
      <title>Codecube.io now supports Perl</title>
      <link>http://blog.kablamo.org/articles/codecube/</link>
      <pubDate>Sat, 19 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.kablamo.org/articles/codecube/</guid>
      <description>Codecube.io is a jsfiddle type service which runs Perl code (and other languages) and shows the results in your browser.
The website is written in Go and runs your code inside a Docker container. It originally had support for C, Go, Python, and Ruby. I was looking for an excuse to play with Docker and Go so I submitted a pull request which added support for Perl.
See also:
 The original Codecube blog post which is a good introduction to Docker.</description>
    </item>
    
    <item>
      <title>Reading code - Plack::Builder</title>
      <link>http://blog.kablamo.org/articles/read-plack-4/</link>
      <pubDate>Sat, 12 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.kablamo.org/articles/read-plack-4/</guid>
      <description>Part 1 - An Overview Part 2 - plackup Architecture Part 3 - PSGI Application Architecture Part 4 - Plack::Builder  Plack::Builder provides a domain specific language (DSL) for middleware developers. It looks like this:
use Plack::Builder; my $app1 = sub { ... }; my $app2 = sub { ... }; builder { enable &amp;quot;Deflater&amp;quot;; enable &amp;quot;Session&amp;quot;, store =&amp;gt; &amp;quot;File&amp;quot;; enable &amp;quot;Debug&amp;quot;, panels =&amp;gt; [ qw(DBITrace Memory Timer) ]; mount &amp;quot;/narwhale&amp;quot; =&amp;gt; $app1; mount &amp;quot;/unicorn&amp;quot; =&amp;gt; $app2; };  How does it work?</description>
    </item>
    
    <item>
      <title>Reading code - PSGI Application Architecture</title>
      <link>http://blog.kablamo.org/articles/read-plack-3/</link>
      <pubDate>Fri, 11 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.kablamo.org/articles/read-plack-3/</guid>
      <description>Part 1 - An Overview Part 2 - plackup Architecture Part 3 - PSGI Application Architecture Part 4 - Plack::Builder  PSGI Applications The PSGI spec defines a PSGI application.
 A PSGI application is a Perl code reference. It takes exactly one argument, the environment, and returns an array reference containing exactly three values.
 The three values are a status, headers, and a body. Here is an example:</description>
    </item>
    
    <item>
      <title>Reading code - plackup Architecture</title>
      <link>http://blog.kablamo.org/articles/read-plack-2/</link>
      <pubDate>Wed, 09 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.kablamo.org/articles/read-plack-2/</guid>
      <description>Part 1 - An Overview Part 2 - plackup Architecture Part 3 - PSGI Application Architecture Part 4 - Plack::Builder  Plack::Runner and plackup plackup starts a PSGI server which executes a PSGI application. However the script itself is just a very small wrapper around Plack::Runner which does all the heavy lifting. Plack::Runner
 parses the command line options. instantiates the chosen loader class (which is in the Plack::Loader namespace).</description>
    </item>
    
    <item>
      <title>Reading code - Plack</title>
      <link>http://blog.kablamo.org/articles/read-plack-1/</link>
      <pubDate>Tue, 08 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.kablamo.org/articles/read-plack-1/</guid>
      <description>I write lots of code. But I want to be better and faster at reading code. When I had the privilege of working with @ranguard I discovered he is a code reading cheetah and I always envied that. So I&amp;rsquo;ve decided to practice by reading the source code of various CPAN modules. I&amp;rsquo;m starting with Plack.
 Part 1 - An Overview Part 2 - plackup Architecture Part 3 - PSGI Application Architecture Part 4 - Plack::Builder  Plack Plack describes itself as a set of tools for using PSGI (the Perl Server Gateway Interface).</description>
    </item>
    
    <item>
      <title>Look around assertions in Perl regular expressions</title>
      <link>http://blog.kablamo.org/articles/regex/</link>
      <pubDate>Mon, 31 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.kablamo.org/articles/regex/</guid>
      <description>When Perl&amp;rsquo;s regex engine evaluates a string, it moves from left to right, one letter at a time checking the match at each position. That position is called the current match position.
Look around assertions allow you to match a specific pattern before or after the current match position without moving the match position.
Look ahead assertions Look ahead assertions match the text after the current match position (without moving the match position).</description>
    </item>
    
    <item>
      <title>Vim cheat sheet</title>
      <link>http://blog.kablamo.org/articles/ddg-vim/</link>
      <pubDate>Fri, 28 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.kablamo.org/articles/ddg-vim/</guid>
      <description>I created a Vim cheat sheet instant answer for DuckDuckDuckGo. If you search for vim cheat sheet or vim help you will get a result like this:
The data is from rtorruellas&amp;rsquo;s excellent vim cheat sheet (also available on github) which has a responsive mobile friendly layout and is also available in Japanese.</description>
    </item>
    
    <item>
      <title>An experiment - Living with less than 200 things</title>
      <link>http://blog.kablamo.org/articles/experiments/</link>
      <pubDate>Mon, 24 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.kablamo.org/articles/experiments/</guid>
      <description>Stuff is expensive to buy. Especially when I end up only using things once or twice like books, dvds, dress shoes, and ties. Stuff is expensive to store. One time I had to rent a storage locker because I couldn&amp;rsquo;t take my things when I moved to China. Some people get big houses with walk in closets and a three car garage. Stuff is expensive to maintain. Broken stuff needs to be fixed.</description>
    </item>
    
    <item>
      <title>Introduction to online credit card processing - part 3</title>
      <link>http://blog.kablamo.org/articles/cc-processors-3/</link>
      <pubDate>Sat, 22 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.kablamo.org/articles/cc-processors-3/</guid>
      <description>I am learning about online credit card processing. Part 1 introduced a number of basic definitions. Part 2 discussed the difference between traditional gateways and the newer full stack gateways.
In Part 3, I am exploring some of the new &amp;ldquo;full stack&amp;rdquo; gateways which are a bit more developer friendly and listing some key facts about each one. All of these provide a merchant account, gateway, payment processor etc and handle all that complexity for you.</description>
    </item>
    
    <item>
      <title>Introduction to online credit card processing - part 2</title>
      <link>http://blog.kablamo.org/articles/cc-processors-2/</link>
      <pubDate>Fri, 21 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.kablamo.org/articles/cc-processors-2/</guid>
      <description>I am learning about online credit card processing. Part 1 introduced a number of basic definitions.
The number of online payments is going to grow. Only 6% of credit card transactions are currently done online. With so much at stake, there are hundreds of payment gateways who provide a variety of services. But I have chosen to divide them into two categories.
First there are traditional gateways who charge a monthly fee (in addition to a variety of other fees) and often you need to obtain a merchant account on your own which also has various fees associated with it.</description>
    </item>
    
    <item>
      <title>What does &#39;use strict&#39; do?</title>
      <link>http://blog.kablamo.org/articles/use-strict/</link>
      <pubDate>Wed, 19 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.kablamo.org/articles/use-strict/</guid>
      <description>I always use strict in all my code. But what does that actually mean?
Enables strict refs Strict refs generates runtime errors when you use symbolic references.
use strict &#39;refs&#39;; $ref = &amp;quot;yarrr matey&amp;quot;; print $$ref; # runtime error but without strict refs this is ok  Enables strict vars Strict vars generates a compile time error if you access a variable that was not declared or is not fully qualified.</description>
    </item>
    
    <item>
      <title>Introduction to online credit card processing - part 1</title>
      <link>http://blog.kablamo.org/articles/cc-processors-1/</link>
      <pubDate>Tue, 18 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.kablamo.org/articles/cc-processors-1/</guid>
      <description>I want to understand credit card processing. So I will probably write a few articles about it. This article has some fundamental definitions.
acquiring bank An acquiring bank is a bank which processes card payments on behalf of a merchant. The term &amp;lsquo;acquirer&amp;rsquo; indicates the bank accepts (or acquires) credit card payments from card issuing banks within a credit card association. Acquirers take all the risk and bear the burdern of most of the regulation.</description>
    </item>
    
    <item>
      <title>my vs our vs local</title>
      <link>http://blog.kablamo.org/articles/our-my-local/</link>
      <pubDate>Mon, 17 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.kablamo.org/articles/our-my-local/</guid>
      <description>The short version for the impatient  my() creates a local variable our() creates a package variable local() temporarily changes the local value of a global variable The above is mostly true.  The long version for the irrepressibly quixotic my() my declares the listed variable to be local to the enclosing block, file, or eval. That is to say its scope is local. This kind of variable is known as a lexical variable.</description>
    </item>
    
    <item>
      <title>Why you should disagree in an interview</title>
      <link>http://blog.kablamo.org/articles/disagree-interview/</link>
      <pubDate>Sun, 16 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.kablamo.org/articles/disagree-interview/</guid>
      <description>Today I&amp;rsquo;m writing about something I noticed while doing interviews recently.
If I disagree with a decision a company made, I need to jump into that with both feet. There is sometimes an instinct to say &amp;ldquo;I suppose I can live with that&amp;rdquo; or &amp;ldquo;I don&amp;rsquo;t know enough about why this choice was made to complain about it&amp;rdquo;. But the goal is not to complain or to highlight their ignorance or to have an argument.</description>
    </item>
    
    <item>
      <title>Questions I ask in interviews</title>
      <link>http://blog.kablamo.org/articles/interview-questions/</link>
      <pubDate>Fri, 14 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.kablamo.org/articles/interview-questions/</guid>
      <description>I recently relocated from London to the Chicago area so I have been doing interviews. When I interview a potential client or employer I carry this list of questions with me. Most of the questions I have taken from other sources online. I have listed them in roughly the order I ask them.
Understanding the job  What will I be doing every day (precisely)? Why are you hiring? New product?</description>
    </item>
    
    <item>
      <title>How to build a Duck Duck Go instant answer</title>
      <link>http://blog.kablamo.org/articles/duckduckgo/</link>
      <pubDate>Fri, 28 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.kablamo.org/articles/duckduckgo/</guid>
      <description>Instant answers are those little boxes at the top of the DuckDuckGo search results page. I made one for discovering international calling codes &amp;ndash; or dialing codes if you prefer.
If you want to hack on DuckDuckGo and add your own instant answer its pretty simple to get started. You can use Vagrant and VirtualBox to get a complete working dev environment. But if you are already running Ubuntu or OSX the following recipe is easier:</description>
    </item>
    
    <item>
      <title>An experiment - No dessert forever</title>
      <link>http://blog.kablamo.org/articles/no-dessert-forever/</link>
      <pubDate>Wed, 01 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.kablamo.org/articles/no-dessert-forever/</guid>
      <description>For years I have been hearing people say sugar is the new bad thing. So I finally got around to reading up on this claim. Here is what I learned.
Nutrition Food is composed of carbohydrates, fats, proteins, water, vitamins, and minerals. Of course, I sometimes swallow stuff that is not on that list but the list is comprehensive in the sense that it covers everything my body needs. Notice that sugar is not in the list.</description>
    </item>
    
    <item>
      <title>I made a Readline cheat sheet</title>
      <link>http://blog.kablamo.org/articles/readline-cheat-sheet/</link>
      <pubDate>Wed, 01 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.kablamo.org/articles/readline-cheat-sheet/</guid>
      <description>Recently Ovid pointed out large projects are much more likely to fail. I have a few large goals I&amp;rsquo;d like to accomplish. For example I want to improve my front end design skills. Rather than trying to tackle this problem all at once, I made up a small project for myself.
I created a Readline cheat sheet and I was able to complete this project in about a day. Here are some of the things I learned:</description>
    </item>
    
    <item>
      <title>Salt and pepper - How to encrypt database passwords</title>
      <link>http://blog.kablamo.org/articles/authen-passphrase/</link>
      <pubDate>Wed, 18 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.kablamo.org/articles/authen-passphrase/</guid>
      <description>To explain how salt and pepper work in encryption, I will walk through a few scenarios.
No salt Summary for the impatient: Using no salt means an attacker doesn&amp;rsquo;t need to generate a rainbow table because they can reuse an existing one.
If an attacker obtains my database of encrypted passwords it will be very time consuming to brute force them. However there exist pre-computed tables of encrypted values of thousands of commonly used passwords.</description>
    </item>
    
    <item>
      <title>Ray Dalio&#39;s &#34;Principles&#34;</title>
      <link>http://blog.kablamo.org/articles/dalios-principles/</link>
      <pubDate>Sun, 15 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.kablamo.org/articles/dalios-principles/</guid>
      <description>I have been reading Ray Dalio&amp;rsquo;s Principles. Ray Dalio is the CEO of Bridgewater which is a big famous successful hedge fund he started in the 70&amp;rsquo;s. Principles, is a 123 page philosophical text he published in 2011 about how to live your life and how to manage people and organizations. Its extremely good. I&amp;rsquo;m not done yet but I have a feeling it is something I&amp;rsquo;m going to be rereading many times over the next few years.</description>
    </item>
    
    <item>
      <title>How to find and restore deleted files with git</title>
      <link>http://blog.kablamo.org/articles/git-restore/</link>
      <pubDate>Sun, 08 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.kablamo.org/articles/git-restore/</guid>
      <description>Don&amp;rsquo;t be afraid to delete files from your git repository. You can get restore them. You can even search for a string in a deleted file. Here is how to find a deleted file and its commit:
git log --diff-filter=D --summary # all deleted files ever git log --diff-filter=D --summary . # all deleted files in cwd git log --diff-filter=D --author=Batman --summary # all files deleted by Batman  How to restore a deleted file:</description>
    </item>
    
    <item>
      <title>Tmux reloaded</title>
      <link>http://blog.kablamo.org/articles/tmux-reloaded/</link>
      <pubDate>Wed, 27 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.kablamo.org/articles/tmux-reloaded/</guid>
      <description>To reload your tmux configuration without restarting the server, add this to your ~/.tmux.conf file:
# reload the config file without restarting the tmux server bind R source-file ~/.tmux.conf \; display-message &amp;quot;Config reloaded&amp;quot;  Notice thats a capital R not a lowercase r. I keep forgetting that.</description>
    </item>
    
    <item>
      <title>Configure tmux to give you status updates about anything</title>
      <link>http://blog.kablamo.org/articles/tmux-status-updates/</link>
      <pubDate>Tue, 26 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.kablamo.org/articles/tmux-status-updates/</guid>
      <description>I use and love OSX growl and Ubuntu notify style desktop notifications. They are gorgeous. But they are also distracting and after a few vibrant and whimsical but fleeting seconds they are gone forever and you have no way to get them back.
A more useful (and less glorious) way to receive notifications is in your tmux status bar. tmux is the brilliant successor to the venerable screen which hasn&amp;rsquo;t been actively developed for quite a while.</description>
    </item>
    
    <item>
      <title>Anyenv &#43; Plenv &#43; Carton</title>
      <link>http://blog.kablamo.org/articles/plenv/</link>
      <pubDate>Mon, 25 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.kablamo.org/articles/plenv/</guid>
      <description>Recently I started breaking out of my Perl-only isolation bubble and dabbling with other languages. I was surprised how easy and comfortable other languages are. I think its because these days good ideas spread from one language to the next incredibly fast. Even in a new language when I reach for a tool I can usually find some Perl technology analogue.
For example, I&amp;rsquo;ve been a perlbrew person for a long time and it has served me well.</description>
    </item>
    
    <item>
      <title>Monit - How to know when your web site is down</title>
      <link>http://blog.kablamo.org/articles/monit/</link>
      <pubDate>Sun, 24 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.kablamo.org/articles/monit/</guid>
      <description>If your website goes down, you want to find out fast. There are a few ways to accomplish this, but I&amp;rsquo;m using monit. Monit is a mature unix monitoring daemon and it gives me the ability not only get alerts but to restart services that go down.
Monit has lotsa power and options and you can read about all of them on the man page. Or if you don&amp;rsquo;t want to mess around with that you can pay them for a pretty web admin interface and some phone/tablet apps for a one time fee of € 65.</description>
    </item>
    
    <item>
      <title>Devops with Rex</title>
      <link>http://blog.kablamo.org/articles/rex/</link>
      <pubDate>Fri, 22 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.kablamo.org/articles/rex/</guid>
      <description>I have recently been playing with Rex and wanted to write down some of my initial thoughts.
Rex is a devops tool that helps you manage your servers. Its similar to Puppet Lab&amp;rsquo;s mcollective tool or ansible. You can easily run commands on your entire fleet of boxen or just on certain subgroups. And you can run them in parallel which saves you giant baskets of time.
The big advantage for People Who Prefer Perl (PWPP) is that Rex is written and configured with Perl.</description>
    </item>
    
    <item>
      <title>Learning Ruby with online university classes</title>
      <link>http://blog.kablamo.org/articles/learning-ruby/</link>
      <pubDate>Tue, 19 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.kablamo.org/articles/learning-ruby/</guid>
      <description>I just completed UC Berkeley&amp;rsquo;s Software as a Service class (via edX.com). I had a great experience and highly recommend it.
The class is a tour of all the tools Ruby developers use to create and deploy websites. It assumes you already know how to program at a fairly high level but not necessarily in Ruby. I have no plans to stop writing Perl code (which I love). I just wanted to broaden my horizons, have some fun, and increase my luck surface area.</description>
    </item>
    
    <item>
      <title>Down a rabbit hole - Docker</title>
      <link>http://blog.kablamo.org/articles/docker/</link>
      <pubDate>Wed, 13 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.kablamo.org/articles/docker/</guid>
      <description>I have been in a rabbit hole for the last week. I started looking at Docker.
Its a really interesting project that all the hosting providers seem to be moving towards. Its helpful at first to think of Docker as a really fast and small virtual machine. You can put an operating system in a virtual machine, setup all the dependencies and permissions, and then configure and install your app. Its encapsulates your web app and makes it easy to move around.</description>
    </item>
    
    <item>
      <title>Down a rabbit hole - Go-lang and its decentralized CPAN</title>
      <link>http://blog.kablamo.org/articles/go/</link>
      <pubDate>Wed, 13 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.kablamo.org/articles/go/</guid>
      <description>I have been in a rabbit hole for the last week. I started by looking at Docker (See my previous post). It turns out Docker is written in Go and so somehow I ended up learning Go. Well &amp;ldquo;learning&amp;rdquo; is an overstatement. I&amp;rsquo;ve read about it for a few days and wrote a tiny bit of code.
But anyway, the coolest thing about Go so far is its decentralized libraries. Centralized collections of libraries have been all the rage the last few years and it seems like all the languages have gotten hip to that &amp;ndash; CPAN, rubygems, pypi, npm, etc.</description>
    </item>
    
    <item>
      <title>My contribution to the Linux ate my RAM problem</title>
      <link>http://blog.kablamo.org/articles/linux_ate_my_ram/</link>
      <pubDate>Tue, 12 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.kablamo.org/articles/linux_ate_my_ram/</guid>
      <description>I can never remember how to know how much free memory I have.
The Linux kernel claims most of the operating system&amp;rsquo;s memory. That doesn&amp;rsquo;t mean the operating system is out of memory. It means the kernel has claimed it and is managing it. The problem is that the Linux kernel defines &amp;lsquo;free&amp;rsquo; memory differently than any reasonable user. There are excellent shiny reasons for that, but as a user I don&amp;rsquo;t really care.</description>
    </item>
    
    <item>
      <title>git-vspark plots your commits vertically with Term::Vspark</title>
      <link>http://blog.kablamo.org/articles/git-vspark/</link>
      <pubDate>Sun, 17 Mar 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.kablamo.org/articles/git-vspark/</guid>
      <description>I added a git-vspark script to my App::Git::Spark CPAN module. It does the same thing as git-spark but instead of normal horizontal sparklines, it uses &amp;ldquo;vertical&amp;rdquo; sparklines. Here&amp;rsquo;s what that looks like:
$ git vspark --months 8 batman Commits by batman over the last 8 months total: 233 avg: 29 max: 69 12 ██▋ 18 ████ 69 ███████████████▏ 59 ████████████▉ 16 ███▌ 28 ██████▏ 12 ██▋ 19 ████▎  This effect is achieved using Term::Vspark.</description>
    </item>
    
    <item>
      <title>Chinese zombie flashcards on GitHub (Catalyst &amp; Perl)</title>
      <link>http://blog.kablamo.org/articles/chinese-flashcards/</link>
      <pubDate>Thu, 28 Feb 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.kablamo.org/articles/chinese-flashcards/</guid>
      <description>There seem to be quite a few Perl people learning Chinese so maybe this will be relevant here.
I created IIJO which is a Perl powered website that does 3 sided flashcards (Chinese, English, and Pinyin).
The main advantage IIJO has over Anki and other flashcard sites is that you can pick your flashcards from a dictionary so you don&amp;rsquo;t have to type all that stuff in yourself. It allows you to share word lists with others and the built in dictionary means that you don&amp;rsquo;t need to worry about the accuracy and completeness of other people who share wordlists.</description>
    </item>
    
    <item>
      <title>Dist::Zilla::PluginBundle::DAGOLDEN is pretty awesome</title>
      <link>http://blog.kablamo.org/articles/how-to-learn-dist-zilla/</link>
      <pubDate>Wed, 20 Feb 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.kablamo.org/articles/how-to-learn-dist-zilla/</guid>
      <description>I&amp;rsquo;ve been using Dist::Zilla for a couple years. It&amp;rsquo;s a powerful way to automate CPAN releases.
But learning how to use it was not as easy as I hoped.
I remember when Dist::Zilla first debuted. It was very exciting. But I think I may have drank too much of the cool aid becuase my expectations were very high when I finally sat down to learn it. I expected my experience to be composed entirely of rainbows and puppy dog tails.</description>
    </item>
    
    <item>
      <title>CPAN release of App::Git::Ribbon, App::Git::Spark</title>
      <link>http://blog.kablamo.org/articles/cpan-release-git-ribbon-git-spark/</link>
      <pubDate>Tue, 12 Feb 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.kablamo.org/articles/cpan-release-git-ribbon-git-spark/</guid>
      <description>I packaged up these scripts and released them on CPAN to make them a little easier to install and manage.
App::Git::Ribbon on CPAN
on GitHub
previous blog post
App::Git::Spark on CPAN
on GitHub
previous blog post</description>
    </item>
    
    <item>
      <title>git-ribbon</title>
      <link>http://blog.kablamo.org/articles/git-ribbon/</link>
      <pubDate>Sat, 02 Feb 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.kablamo.org/articles/git-ribbon/</guid>
      <description>I wrote a little Perl script called git-ribbon to help me review the latest changes in a git repository.
The way I used to review changes was by reading through the git log. I try to do this every morning at work to keep up with whats going on. But I was having a few problems:
 Its hard to know exactly which changes are new. I want to review commits in the order they happened (instead of most recent first).</description>
    </item>
    
    <item>
      <title>Whats in your $PERL5LIB?</title>
      <link>http://blog.kablamo.org/articles/whats-in-your-perl5lib/</link>
      <pubDate>Tue, 29 Jan 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.kablamo.org/articles/whats-in-your-perl5lib/</guid>
      <description>Ever wonder whats in your $PERL5LIB? Here is one way to find out:
⚡ echo $PERL5LIB .:./lib:/home/eric/perl5/perlbrew/perls/perl-5.16.2/lib/perl5:/home/eri c/perl5/perlbrew/perls/perl-5.16.2/lib/perl5/i686-linux:/home/eric/perl 5/perlbrew/perls/perl-5.16.2/lib/perl5/i686-linux-gnu-thread-multi-64in t:/home/eric/perl5/perlbrew/perls/perl-5.16.2/lib/site_perl:/home/eric/ perl5/perlbrew/perls/perl-5.16.2/lib/5.16.2  My human eyeballs are not equipped to parse that. Unhelpful. So I put this in my .bashrc:
alias perl5lib=&#39;perl -E &amp;quot;say join \&amp;quot;\n\&amp;quot;, split \&amp;quot;:\&amp;quot;, \$ENV{PERL5LIB}&amp;quot;&#39;  Here it is in action:
⚡ perl5lib . ./lib /home/eric/perl5/perlbrew/perls/perl-5.16.2/lib/perl5 /home/eric/perl5/perlbrew/perls/perl-5.16.2/lib/perl5/i686-linux /home/eric/perl5/perlbrew/perls/perl-5.16.2/lib/perl5/i686-linux-gnu-thread-multi-64int /home/eric/perl5/perlbrew/perls/perl-5.16.2/lib/site_perl /home/eric/perl5/perlbrew/perls/perl-5.16.2/lib/5.16.2  Better.</description>
    </item>
    
    <item>
      <title>git-spark revisited</title>
      <link>http://blog.kablamo.org/articles/git-spark-revisited/</link>
      <pubDate>Sun, 27 Jan 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.kablamo.org/articles/git-spark-revisited/</guid>
      <description>A few days ago I wrote about my git-spark Perl script. It counts how many commits a user has in a git project and makes a little graph and displays it on the command line.
However I also said it wasn&amp;rsquo;t very useful becuase you can&amp;rsquo;t compare one graph with another because the scale changes when different graphs have different min and max values. For example these two data series produce identical graphs despite have very different data.</description>
    </item>
    
    <item>
      <title>git-spark plots your commit history</title>
      <link>http://blog.kablamo.org/articles/git-spark-plots-your-commits/</link>
      <pubDate>Wed, 23 Jan 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.kablamo.org/articles/git-spark-plots-your-commits/</guid>
      <description>I recently rediscovered spark, Zach Holman&amp;rsquo;s cool little sparklines graphing tool for the command line. I used a little Perl to mash it up with &amp;lsquo;git log&amp;rsquo; and came up with git-spark which works like this:
⚡ git spark --hours 8 Commits by Godzilla over the last 8 hours ▃▃▁▆▅▁▁▃█ ⚡ git spark -d 14 HulkHogan Commits by HulkHogan over the last 14 days ▇▅▄▁▁▄▅▂█▂▁▁▁▅ ⚡ git spark -w 52 Tarzan Commits by Tarzan over the last 52 weeks ▃▁▂▃▃▃▂▁█▆▁▄▄▃▂▂▁▁▂▃▃▄▃▃▂▃▁▁▁▁▁▂▂▃▆▅▂▁▄▃▂▄▄▄▁▂▁▁▂▂▂▃  And heres the usage/help:</description>
    </item>
    
    <item>
      <title>Use Carp::Always to fix circular dependencies</title>
      <link>http://blog.kablamo.org/articles/how-to-resolve-circular-dependencies/</link>
      <pubDate>Sat, 19 Jan 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.kablamo.org/articles/how-to-resolve-circular-dependencies/</guid>
      <description>Circular dependencies happen when your library requires a library which requires your library. Here&amp;rsquo;s an example. Lets say you have 2 packages:
AlienPlanet.pm
package AlienPlanet; use Moose; use Dinosaurs; # &amp;lt;--- Circular dependency sub has_dinosaurs {1} 1;  Dinosaurs.pm
package Dinosaurs; use Moose; use AlienPlanet; # &amp;lt;--- Circular dependency sub has_rabies {1} 1;  If you try to compile this, you get the following warning:
⚡ perl -c lib/AlienPlanet.pm Subroutine has_dinosaurs redefined at lib/AlienPlanet.</description>
    </item>
    
    <item>
      <title>But I want to spend down my nest egg to zero</title>
      <link>http://blog.kablamo.org/articles/but-i-want-to-spend-down-my-nest-egg-to-zero/</link>
      <pubDate>Fri, 04 Jan 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.kablamo.org/articles/but-i-want-to-spend-down-my-nest-egg-to-zero/</guid>
      <description>photo by woodleywonderworks
 The problem with this is you can&amp;rsquo;t predict when you will die. On average, Americans live until about 80. But thats the average. Half of everyone will live longer than that. What will you do if you live to age 100?
Despite this, lots of retirement calculators and planning manuals tell you to enter in your age of death. But you can&amp;rsquo;t predict this. So don&amp;rsquo;t do your retirement planning like you can.</description>
    </item>
    
    <item>
      <title>Withdrawal rates</title>
      <link>http://blog.kablamo.org/articles/withdrawal-rates/</link>
      <pubDate>Thu, 20 Dec 2012 00:00:00 +0000</pubDate>
      
      <guid>http://blog.kablamo.org/articles/withdrawal-rates/</guid>
      <description>Lets say you reach your goal of retirement. You quit your job sit on your sailboat and eat pineapples all day. The wind is in your hair, you are relaxed and carefree, and you have pineapple breath. All because you have a formidable nest egg and can live comfortably off your investment earnings.
But how do you know how much of your nest egg you can withdraw and spend each year?</description>
    </item>
    
    <item>
      <title>The best personal finance blogs</title>
      <link>http://blog.kablamo.org/articles/the-best-personal-finance-blogs/</link>
      <pubDate>Sat, 24 Nov 2012 00:00:00 +0000</pubDate>
      
      <guid>http://blog.kablamo.org/articles/the-best-personal-finance-blogs/</guid>
      <description>Here is a short list of the very best personal finance blogs on the internet. All of these websites are constructed entirely of Excellence. They are so good I read every post in their archives. Each author has found a way to retire in under 10 years with fairly normal human level salaries and has insightful things to say about getting to financial freedom.
Mr Money Mustache If I was marooned on a deserted island &amp;hellip; with limited bandwidth and could only read one blog, this is the one I would choose.</description>
    </item>
    
    <item>
      <title>Devel::Dwarn helps me type less</title>
      <link>http://blog.kablamo.org/articles/data-dumper-concise/</link>
      <pubDate>Wed, 05 Sep 2012 00:00:00 +0000</pubDate>
      
      <guid>http://blog.kablamo.org/articles/data-dumper-concise/</guid>
      <description>2 bajillion times a day I want to print a hashref and see whats inside. But every time I want to do that I have to type:
use Data::Dumper::Concise; print Dumper $hashref;  First of all, thats too much typing. And second of all I keep forgetting to delete my print statements when I check in.
Happily I recently discovered Devel::Dwarn on CPAN. It is (basically) an alias to Data::Dumper::Concise.</description>
    </item>
    
    <item>
      <title>Slides from my Selenium talk at YAPCEU 2012</title>
      <link>http://blog.kablamo.org/articles/slides-from-my-selenium-talk-at-yapc-eu-2012/</link>
      <pubDate>Sun, 26 Aug 2012 00:00:00 +0000</pubDate>
      
      <guid>http://blog.kablamo.org/articles/slides-from-my-selenium-talk-at-yapc-eu-2012/</guid>
      <description>I gave my first YAPC::EU presentation this year in Frankfurt after doing a trial run at London.pm. I received some good questions and comments and a few new ideas. It was a good experience and I want to do this again.
My talk introduced Selenium and common problems people have when first trying to write Selenium tests in Perl. I also explained how I solved many of those problems by creating Test::WWW::Selenium::More.</description>
    </item>
    
    <item>
      <title>The math behind the calculator</title>
      <link>http://blog.kablamo.org/articles/math-behind-the-calculator/</link>
      <pubDate>Fri, 17 Aug 2012 00:00:00 +0000</pubDate>
      
      <guid>http://blog.kablamo.org/articles/math-behind-the-calculator/</guid>
      <description>Networthify.com calculates how many years you have to retirement. Lots of people have been curious about how it arrives at the magic number. The answer to this question is: Math!
More specifically the equation which drives the calculator is derived from two common formulas used for dealing with compound interest. Many people must have done this before me but I couldn&amp;rsquo;t find an example online and I enjoyed doing the math anyway.</description>
    </item>
    
    <item>
      <title>Spending money shortens your life</title>
      <link>http://blog.kablamo.org/articles/spending-shortens-your-life/</link>
      <pubDate>Tue, 14 Aug 2012 00:00:00 +0000</pubDate>
      
      <guid>http://blog.kablamo.org/articles/spending-shortens-your-life/</guid>
      <description>Photo by Thomas Hawk
 One morning you awake to find the tooth fairy made an accounting error in your favor. She left $15 million under your pillow. Now you have some choices to make. Here is one: Would you continue to wake up each day and go to your current job?
We all have a certain amount of time to live. Every dollar we earn is given in exchange for time spent working.</description>
    </item>
    
    <item>
      <title>Test::WWW::Selenium::More</title>
      <link>http://blog.kablamo.org/articles/test-www-selenium-more/</link>
      <pubDate>Thu, 17 May 2012 00:00:00 +0000</pubDate>
      
      <guid>http://blog.kablamo.org/articles/test-www-selenium-more/</guid>
      <description>I recently released Test::WWW::Selenium::More to CPAN. It is a small collection of utilities to help you write Selenium tests. Here are some reasons to use it:
  It has a manual which provides a concise but fairly comprehensive howto guide to Selenium testing in Perl.
  It uses Moose so you can more easily use roles. For example you might want a role for methods that deal with authentication and a role for methods that deal with payments.</description>
    </item>
    
    <item>
      <title>New on CPAN - MooseX::CachingProxy</title>
      <link>http://blog.kablamo.org/articles/new-on-cpan-moosex-cachingproxy/</link>
      <pubDate>Thu, 10 May 2012 00:00:00 +0000</pubDate>
      
      <guid>http://blog.kablamo.org/articles/new-on-cpan-moosex-cachingproxy/</guid>
      <description>Last week I released MooseX::CachingProxy to CPAN.
Its a small module that intercepts requests from your LWP based application. Those requests are relayed on to the intended server unless they already exist in the cache.
To toggle on and off the caching proxy, MooseX::CachingProxy provides the attribute &amp;lsquo;caching_proxy&amp;rsquo;. Here is a quick demo:
package MyApp; use Moose; use WWW::Mechanize; # or any LWP based library with &#39;MooseX::CachingProxy&#39;; sub url { &#39;http://example.</description>
    </item>
    
    <item>
      <title>New on CPAN - Log::JSON</title>
      <link>http://blog.kablamo.org/articles/new-on-cpan-log-json/</link>
      <pubDate>Sun, 29 Apr 2012 00:00:00 +0000</pubDate>
      
      <guid>http://blog.kablamo.org/articles/new-on-cpan-log-json/</guid>
      <description>I released Log::JSON v0.001 to CPAN today. Its a very simple JSON logger.
The advantage of a JSON logger is that a human can open a mysterious new log file and quickly decipher the content because each piece of information is labeled. Using JSON also means that parsing the log file and reviving the data structures is trivial.
Here is some example usage for you:
use Log::JSON; my $logger = Log::JSON-&amp;gt;new( file =&amp;gt; &#39;/path/errorlog.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://blog.kablamo.org/aphorisms/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.kablamo.org/aphorisms/</guid>
      <description>Life is poker, not chess To win at chess: be perfect. In chess, there is always a right answer and a wrong answer. I can compute a perfect game if I&amp;rsquo;m smart enough and I do enough calculations.
In poker, where randomness is built into the game, its not about being perfect. Its about being consistent.
Poker players don&amp;rsquo;t win in a single hand. They don&amp;rsquo;t win by risking it all on a single big bet.</description>
    </item>
    
    <item>
      <title>About</title>
      <link>http://blog.kablamo.org/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.kablamo.org/about/</guid>
      <description>About this blog This blog is about
 Reading and using those new ideas ideas to get better every day. Becoming a better person. Becoming a better parent. Learning how to do personal finance. Anything else I feel like writing about.  Talking to me I&amp;rsquo;m on Twitter at @kablamo and my email address is write.me@kablamo.org.</description>
    </item>
    
    <item>
      <title>Book Recommendations</title>
      <link>http://blog.kablamo.org/books/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.kablamo.org/books/</guid>
      <description>I get excited and hop up and down when I read books that make me better or show me new ideas. This is a short list of the best, most useful, non fiction books I&amp;rsquo;ve discovered. (Follow me on GoodReads?)
How to Lead Turn The Ship Around by L. David Marquet
Key insight: Everyone in an organization should lead. Leader-leader not leader-follower.
This is the true story of how a naval officer took the most troubled submarine in the fleet and gradually turned it into the best.</description>
    </item>
    
    <item>
      <title>Financial Independence</title>
      <link>http://blog.kablamo.org/financial-independence/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.kablamo.org/financial-independence/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Restrospectives</title>
      <link>http://blog.kablamo.org/retrospectives/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.kablamo.org/retrospectives/</guid>
      <description>Every month I write about what I did last month and what I want to do next month.</description>
    </item>
    
    <item>
      <title>Talks</title>
      <link>http://blog.kablamo.org/talks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.kablamo.org/talks/</guid>
      <description>MooX::Commander How to build command line apps with sub commands and option parsing and OO.
Slides | GitHub repo
The Perl test ecosystem How to write tests in Perl. An exploration of CPAN test libraries.
Slides | GitHub repo
Publish your first CPAN module in &amp;lt; 5 minutes I originally gave this talk at Chicago.pm as part of a &amp;ldquo;Distribution Management Shootout&amp;rdquo; &amp;ndash; a 3 way duel between
 jberger&amp;rsquo;s talk about Module::Build and the &amp;ldquo;Classic&amp;rdquo; build systems preaction&amp;rsquo;s talk about Dist::Zilla, and my talk about Minilla and Carton.</description>
    </item>
    
  </channel>
</rss>