<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>kablamo</title>
    <description>Kablamo is Eric Johnson's blog. I want to do more and be better. Financial independence, entrepreneurship, productivity, and code.  
</description>
    <link>http://blog.kablamo.org/</link>
    <atom:link href="http://blog.kablamo.org/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 07 Apr 2018 03:50:25 -0400</pubDate>
    <lastBuildDate>Sat, 07 Apr 2018 03:50:25 -0400</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Recommended Modules: Working With Files</title>
        <description>&lt;p&gt;This week I updated the &lt;strong&gt;Recommended Libraries&lt;/strong&gt; chapter of Minimum Viable Perl.&lt;/p&gt;

&lt;p&gt;There are thousands of modules on MetaCPAN.  Some are abandoned, some were an
experiment that never took off, some are discouraged, and sometimes its just
not obvious which module solves your problem best.  In the &lt;strong&gt;Recommended
Libraries&lt;/strong&gt; chapter I’m creating a curated guide to MetaCPAN.&lt;/p&gt;

&lt;p&gt;I’ve included the latest article below but the canonical (and most up to date
version) is available here: &lt;a href=&quot;http://mvp.kablamo.org/cpan/files/&quot;&gt;Working with
files&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;If you are working with files in Perl, be sure to consider these fine CPAN
modules.&lt;/p&gt;

&lt;h2 id=&quot;table-of-contents&quot;&gt;Table Of Contents&lt;/h2&gt;

&lt;p class=&quot;toc_section&quot;&gt;High Level Modules&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Path::Tiny&lt;/li&gt;
  &lt;li&gt;IO::All&lt;/li&gt;
&lt;/ul&gt;

&lt;p class=&quot;toc_section&quot;&gt;Misc Useful Modules&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Path::Iterator::Rule&lt;/li&gt;
  &lt;li&gt;File::chmod&lt;/li&gt;
  &lt;li&gt;File::pushd&lt;/li&gt;
  &lt;li&gt;File::ReadBackwards&lt;/li&gt;
&lt;/ul&gt;

&lt;p class=&quot;toc_section&quot;&gt;Lower Level Modules&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Cwd&lt;/li&gt;
  &lt;li&gt;File::Basename&lt;/li&gt;
  &lt;li&gt;File::Copy&lt;/li&gt;
  &lt;li&gt;File::Copy::Recursive&lt;/li&gt;
  &lt;li&gt;File::MimeInfo&lt;/li&gt;
  &lt;li&gt;File::Path&lt;/li&gt;
  &lt;li&gt;File::Slurp&lt;/li&gt;
  &lt;li&gt;File::Slurper&lt;/li&gt;
  &lt;li&gt;File::Spec&lt;/li&gt;
  &lt;li&gt;File::stat&lt;/li&gt;
  &lt;li&gt;File::Temp&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;high-level-modules&quot;&gt;High Level Modules&lt;/h1&gt;

&lt;p&gt;These high level modules making working with files and directories easier by
providing convenience and safety in a single unified object oriented interface.
For most situations choosing one of these is probably the best way to go.&lt;/p&gt;

&lt;h2 id=&quot;pathtiny&quot;&gt;Path::Tiny&lt;/h2&gt;

&lt;div class=&quot;module&quot;&gt;
    &lt;div class=&quot;column&quot;&gt;MetaCPAN: &lt;a href=&quot;https://metacpan.org/pod/Path::Tiny&quot;&gt;Path::Tiny&lt;/a&gt;&lt;/div&gt;
    &lt;div class=&quot;column&quot;&gt;++ rating: 126&lt;/div&gt;
    &lt;div class=&quot;column&quot;&gt;Last update: 2017&lt;/div&gt;
    &lt;div class=&quot;column&quot;&gt;Maintainer: DAGOLDEN&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Path::Tiny is a small fast library with a fairly traditional object oriented
interface for dealing with files and directories.  Its probably the most
popular high level module.&lt;/p&gt;

&lt;p&gt;Path::Tiny began life as a minimalist rewrite of the venerable Path::Class
module with a improved user interface.  Over the years its grown in popularity
and has become a mature, full featured library and one of the most common
choices for dealing with files.  These days anyone interested in Path::Class is
probably better served using Path::Tiny.&lt;/p&gt;

&lt;h2 id=&quot;ioall&quot;&gt;IO::All&lt;/h2&gt;

&lt;div class=&quot;module&quot;&gt;
    &lt;div class=&quot;column&quot;&gt;MetaCPAN: &lt;a href=&quot;https://metacpan.org/pod/IO::All&quot;&gt;IO::All&lt;/a&gt;&lt;/div&gt;
    &lt;div class=&quot;column&quot;&gt;++ rating: 58&lt;/div&gt;
    &lt;div class=&quot;column&quot;&gt;Last update: 2017&lt;/div&gt;
    &lt;div class=&quot;column&quot;&gt;Maintainer: FREW&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;IO::All is the other library for dealing with files and directories.  It is
also a good solution and nearly as popular as Path::Tiny.&lt;/p&gt;

&lt;p&gt;While Path::Tiny aims to be somewhat minimalist and focused, IO::All does
everything.  It does file and directory IO but it also has functionality from
IO::Socket and MLDBM and LWP.  You can use it to create a web server, get files
from ftp sites, or send email.&lt;/p&gt;

&lt;p&gt;The user interface is somewhat contraversial.  Depending on your point of view
its powerful, concise, and convenient or makes for hard to read code at times.&lt;/p&gt;

&lt;p&gt;Developers visiting Perl from another language are probably going to be more
comfortable with Path::Tiny.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;misc-useful-modules&quot;&gt;Misc Useful Modules&lt;/h1&gt;

&lt;h2 id=&quot;pathiteratorrule&quot;&gt;Path::Iterator::Rule&lt;/h2&gt;

&lt;div class=&quot;module&quot;&gt;
    &lt;div class=&quot;column&quot;&gt;MetaCPAN: &lt;a href=&quot;https://metacpan.org/pod/Path::Iterator::Rule&quot;&gt;Path::Iterator::Rule&lt;/a&gt;&lt;/div&gt;
    &lt;div class=&quot;column&quot;&gt;++ rating: 64&lt;/div&gt;
    &lt;div class=&quot;column&quot;&gt;Last update: 2018&lt;/div&gt;
    &lt;div class=&quot;column&quot;&gt;Maintainer: DAGOLDEN&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;There are many libraries for iterating over files.  But the bottom line is if
you need to walk a directory tree, select some files, and do stuff you should
almost certainly be using Path::Iterator::Rule.  The user interface is fabulous
and the performance is good.&lt;/p&gt;

&lt;p&gt;Alternatives include File::Find which is part of core (distributed with Perl).
File::Find has similarly good performance but is a lot less fun to work with
due to its user interface.  For benchmarks and a good description of
some alternatives see this &lt;a href=&quot;https://rjbs.manxome.org/rubric/entry/1981&quot;&gt;rjbs
article&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;filechmod&quot;&gt;File::chmod&lt;/h2&gt;

&lt;div class=&quot;module&quot;&gt;
    &lt;div class=&quot;column&quot;&gt;MetaCPAN: &lt;a href=&quot;https://metacpan.org/pod/File::chmod&quot;&gt;File::chmod&lt;/a&gt;&lt;/div&gt;
    &lt;div class=&quot;column&quot;&gt;++ rating: 3&lt;/div&gt;
    &lt;div class=&quot;column&quot;&gt;Last update: 2015&lt;/div&gt;
    &lt;div class=&quot;column&quot;&gt;Maintainer: XENO&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;The Perl builtin function &lt;code&gt;chmod()&lt;/code&gt; only accepts octal permissons.  File::chmod
replaces &lt;code&gt;chmod()&lt;/code&gt; with its own version that accepts octal, symbolic,
or “ls” permissions.&lt;/p&gt;

&lt;h2 id=&quot;filechdir&quot;&gt;File::chdir&lt;/h2&gt;

&lt;div class=&quot;module&quot;&gt;
    &lt;div class=&quot;column&quot;&gt;MetaCPAN: &lt;a href=&quot;https://metacpan.org/pod/File::chdir&quot;&gt;File::chdir&lt;/a&gt;&lt;/div&gt;
    &lt;div class=&quot;column&quot;&gt;++ rating: 9&lt;/div&gt;
    &lt;div class=&quot;column&quot;&gt;Last update: 2016&lt;/div&gt;
    &lt;div class=&quot;column&quot;&gt;Maintainer: DAGOLDEN&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;The Perl builtin function &lt;code&gt;chdir()&lt;/code&gt; changes the current working directory
globally.  If any part of your application or and library calls &lt;code&gt;chdir()&lt;/code&gt;, the
cwd for the entire application changes.  File::chdir provides a mechanism for
changing directory locally.&lt;/p&gt;

&lt;h2 id=&quot;filepushd&quot;&gt;File::pushd&lt;/h2&gt;

&lt;div class=&quot;module&quot;&gt;
    &lt;div class=&quot;column&quot;&gt;MetaCPAN: &lt;a href=&quot;https://metacpan.org/pod/File::pushd&quot;&gt;File::pushd&lt;/a&gt;&lt;/div&gt;
    &lt;div class=&quot;column&quot;&gt;++ rating: 9&lt;/div&gt;
    &lt;div class=&quot;column&quot;&gt;Last update: 2016&lt;/div&gt;
    &lt;div class=&quot;column&quot;&gt;Maintainer: DAGOLDEN&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;File::pushd provides a way to change directory temporarily for a limited scope.&lt;/p&gt;

&lt;h2 id=&quot;filereadbackwards&quot;&gt;File::ReadBackwards&lt;/h2&gt;

&lt;div class=&quot;module&quot;&gt;
    &lt;div class=&quot;column&quot;&gt;MetaCPAN: &lt;a href=&quot;https://metacpan.org/pod/File::ReadBackwards&quot;&gt;File::ReadBackwards&lt;/a&gt;&lt;/div&gt;
    &lt;div class=&quot;column&quot;&gt;++ rating: 6&lt;/div&gt;
    &lt;div class=&quot;column&quot;&gt;Last update: 2011&lt;/div&gt;
    &lt;div class=&quot;column&quot;&gt;Maintainer: URI&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;File::ReadBackwards can read in file contents backwards line by line.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;lower-level-modules&quot;&gt;Lower Level Modules&lt;/h1&gt;

&lt;p&gt;Modules like Path::Tiny and IO::All are built on top of lower level modules
such as these.  None of these provide an object oriented user interface unless
otherwise noted.&lt;/p&gt;

&lt;h2 id=&quot;cwd&quot;&gt;Cwd&lt;/h2&gt;

&lt;div class=&quot;module&quot;&gt;
    &lt;div class=&quot;column&quot;&gt;MetaCPAN: &lt;a href=&quot;https://metacpan.org/pod/Cwd&quot;&gt;Cwd&lt;/a&gt;&lt;/div&gt;
    &lt;div class=&quot;column&quot;&gt;++ rating: 64&lt;/div&gt;
    &lt;div class=&quot;column&quot;&gt;Last update: 2018&lt;/div&gt;
    &lt;div class=&quot;column&quot;&gt;Maintainer: XSAWYERX&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Cwd is a core module (distributed with Perl) which gets the pathname of the
current working directory.&lt;/p&gt;

&lt;h2 id=&quot;filebasename&quot;&gt;File::Basename&lt;/h2&gt;

&lt;div class=&quot;module&quot;&gt;
    &lt;div class=&quot;column&quot;&gt;MetaCPAN: &lt;a href=&quot;https://metacpan.org/pod/File::Basename&quot;&gt;File::Basename&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;File::Basename is a core module (distributed with Perl) for parsing paths into
directory, filename, and suffix.&lt;/p&gt;

&lt;h2 id=&quot;filecopy&quot;&gt;File::Copy&lt;/h2&gt;

&lt;div class=&quot;module&quot;&gt;
    &lt;div class=&quot;column&quot;&gt;MetaCPAN: &lt;a href=&quot;https://metacpan.org/pod/File::Copy&quot;&gt;File::Copy&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;File::Copy is a core module (distributed with Perl) which provides &lt;code&gt;copy()&lt;/code&gt; and &lt;code&gt;move()&lt;/code&gt; functions.&lt;/p&gt;

&lt;h2 id=&quot;filecopyrecursive&quot;&gt;File::Copy::Recursive&lt;/h2&gt;

&lt;div class=&quot;module&quot;&gt;
    &lt;div class=&quot;column&quot;&gt;MetaCPAN: &lt;a href=&quot;https://metacpan.org/pod/File::Copy::Recursive&quot;&gt;File::Copy::Recursive&lt;/a&gt;&lt;/div&gt;
    &lt;div class=&quot;column&quot;&gt;++ rating: 13&lt;/div&gt;
    &lt;div class=&quot;column&quot;&gt;Last update: 2018&lt;/div&gt;
    &lt;div class=&quot;column&quot;&gt;Maintainer: DMUEY&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;File::Copy::Recursive provides methods for copying directories recursively.&lt;/p&gt;

&lt;h2 id=&quot;filemimeinfo&quot;&gt;File::MimeInfo&lt;/h2&gt;

&lt;div class=&quot;module&quot;&gt;
    &lt;div class=&quot;column&quot;&gt;MetaCPAN: &lt;a href=&quot;https://metacpan.org/pod/File::MimeInfo&quot;&gt;File::MimeInfo&lt;/a&gt;&lt;/div&gt;
    &lt;div class=&quot;column&quot;&gt;++ rating: 7&lt;/div&gt;
    &lt;div class=&quot;column&quot;&gt;Last update: 2017&lt;/div&gt;
    &lt;div class=&quot;column&quot;&gt;Maintainer: FREW&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;File::MimeInfo can determine the mimetype from a given filename.&lt;/p&gt;

&lt;h2 id=&quot;filepath&quot;&gt;File::Path&lt;/h2&gt;

&lt;div class=&quot;module&quot;&gt;
    &lt;div class=&quot;column&quot;&gt;MetaCPAN: &lt;a href=&quot;https://metacpan.org/pod/File::Path&quot;&gt;File::Path&lt;/a&gt;&lt;/div&gt;
    &lt;div class=&quot;column&quot;&gt;++ rating: 38&lt;/div&gt;
    &lt;div class=&quot;column&quot;&gt;Last update: 2017&lt;/div&gt;
    &lt;div class=&quot;column&quot;&gt;Maintainer: JKEENAN&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;File::Path can create or remove directory trees.&lt;/p&gt;

&lt;h2 id=&quot;fileslurp&quot;&gt;File::Slurp&lt;/h2&gt;

&lt;div class=&quot;module&quot;&gt;
    &lt;div class=&quot;column&quot;&gt;MetaCPAN: &lt;a href=&quot;https://metacpan.org/pod/File::Slurp&quot;&gt;File::Slurp&lt;/a&gt;&lt;/div&gt;
    &lt;div class=&quot;column&quot;&gt;++ rating: 62&lt;/div&gt;
    &lt;div class=&quot;column&quot;&gt;Last update: 2011&lt;/div&gt;
    &lt;div class=&quot;column&quot;&gt;Maintainer: URI&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;File::Slurp is not recommended.  This was a popular module for a while so
you may see this in older code.  It’s abandoned and has critical flaws which
are not fixed including issues with unicode.  If you like this functionality
try File::Slurper (or better yet Path::Tiny or IO::All).&lt;/p&gt;

&lt;h2 id=&quot;fileslurper&quot;&gt;File::Slurper&lt;/h2&gt;

&lt;div class=&quot;module&quot;&gt;
    &lt;div class=&quot;column&quot;&gt;MetaCPAN: &lt;a href=&quot;https://metacpan.org/pod/File::Slurper&quot;&gt;File::Slurper&lt;/a&gt;&lt;/div&gt;
    &lt;div class=&quot;column&quot;&gt;++ rating: 35&lt;/div&gt;
    &lt;div class=&quot;column&quot;&gt;Last update: 2018&lt;/div&gt;
    &lt;div class=&quot;column&quot;&gt;Maintainer: LEONT&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;File::Slurper provides a way to do fast and correct slurping (reading) and
spewing (writing).  All functions throw exceptions on errors.&lt;/p&gt;

&lt;h2 id=&quot;filespec&quot;&gt;File::Spec&lt;/h2&gt;

&lt;div class=&quot;module&quot;&gt;
    &lt;div class=&quot;column&quot;&gt;MetaCPAN: &lt;a href=&quot;https://metacpan.org/pod/File::Spec&quot;&gt;File::Spec&lt;/a&gt;&lt;/div&gt;
    &lt;div class=&quot;column&quot;&gt;++ rating: 64&lt;/div&gt;
    &lt;div class=&quot;column&quot;&gt;Last update: 2018&lt;/div&gt;
    &lt;div class=&quot;column&quot;&gt;Maintainer: XSAWYERX&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;File::Spec is a core module (distributed with Perl) for portably manipulating
filenames.  It’s not OO.&lt;/p&gt;

&lt;h2 id=&quot;filestat&quot;&gt;File::stat&lt;/h2&gt;

&lt;div class=&quot;module&quot;&gt;
    &lt;div class=&quot;column&quot;&gt;MetaCPAN: &lt;a href=&quot;https://metacpan.org/pod/File::stat&quot;&gt;File::stat&lt;/a&gt;&lt;/div&gt;
    &lt;div class=&quot;column&quot;&gt;++ rating: 58&lt;/div&gt;
    &lt;div class=&quot;column&quot;&gt;Last update: 2017&lt;/div&gt;
    &lt;div class=&quot;column&quot;&gt;Maintainer: FREW&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Perl’s builtin &lt;code&gt;stat()&lt;/code&gt; function returns a list of 13 file attributes: size,
mode, uid, gid, etc.  All you need to do is remember the order of all those
elements.  File::stat adds sanity by providing an object oriented user
interface to &lt;code&gt;stat()&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;filetemp&quot;&gt;File::Temp&lt;/h2&gt;

&lt;div class=&quot;module&quot;&gt;
    &lt;div class=&quot;column&quot;&gt;MetaCPAN: &lt;a href=&quot;https://metacpan.org/pod/File::Temp&quot;&gt;File::Temp&lt;/a&gt;&lt;/div&gt;
    &lt;div class=&quot;column&quot;&gt;++ rating: 50&lt;/div&gt;
    &lt;div class=&quot;column&quot;&gt;Last update: 2013&lt;/div&gt;
    &lt;div class=&quot;column&quot;&gt;Maintainer: DAGOLDEN&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;File::Temp provides an interface for returning the name and handle of a
temporary file safely.  The best part is it automatically cleans up the
temporary file once the variable has gone out of scope.&lt;/p&gt;
</description>
        <pubDate>Tue, 03 Apr 2018 00:00:00 -0400</pubDate>
        <link>http://blog.kablamo.org/2018/04/03/files/</link>
        <guid isPermaLink="true">http://blog.kablamo.org/2018/04/03/files/</guid>
        
        
        <category>perl</category>
        
      </item>
    
      <item>
        <title>Handling exceptions with try/catch</title>
        <description>&lt;p&gt;One way to handle exceptions in Perl is with
&lt;a href=&quot;https://metacpan.org/pod/Syntax::Keyword::Try&quot;&gt;Syntax::Keyword::Try&lt;/a&gt; which
adds &lt;code&gt;try&lt;/code&gt; and &lt;code&gt;catch&lt;/code&gt; keywords to Perl. As always there are trade offs and it
depends on your goals and preferences.&lt;/p&gt;

&lt;p&gt;It has no dependencies and plays nicely with perltidy and perlcritic.  However,
it is 2.6 times slower than &lt;code&gt;eval()&lt;/code&gt; and it’s not included in the Perl core so
you will need to install it.&lt;/p&gt;

&lt;div class=&quot;tip&quot;&gt;
    &lt;div class=&quot;tip-title&quot;&gt;Alternate&lt;br /&gt;Solutions&lt;/div&gt;
    &lt;div class=&quot;tip-content&quot; style=&quot;margin-left:6rem&quot;&gt;
        There is more than one way to handle exceptions in Perl and several modules
on MetaCPAN which add try/catch keywords to Perl.  To find out which solution
is best for you, see &lt;a href=&quot;https://mvp.duckduckgo.com/cpan/exceptions/&quot;&gt;Whats the best way to handle
exceptions?&lt;/a&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;h1 id=&quot;throwing-exceptions&quot;&gt;Throwing exceptions&lt;/h1&gt;
&lt;p&gt;To throw an exception call &lt;code&gt;die()&lt;/code&gt;.  If the exception is not caught, an error
message is displayed to STDERR and the process exits with a non-zero value.
Syntax::Keyword::Try doesn’t change how exceptions are thrown.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;die &quot;Something bad happened&quot;;
# prints &quot;Something bad happened at line 123.&quot; 
# and then the process exits;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;catching-exceptions&quot;&gt;Catching exceptions&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;use Syntax::Keyword::Try

try {
    die &quot;its only a flesh wound&quot;;
}
catch {
    warn &quot;something bad happened: $@&quot;;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The catch block can inspect the exception by looking at &lt;code&gt;$@&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&quot;exceptions-as-objects&quot;&gt;Exceptions as objects&lt;/h1&gt;

&lt;p&gt;Exceptions are usually strings, but you can throw objects too.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;try {
    die My::Exception-&amp;gt;new(
        error    =&amp;gt; 'Something bad happened',
        request  =&amp;gt; $request,
        response =&amp;gt; $response,
    );
}
catch {
    warn &quot;something bad happened: &quot; . $@-&amp;gt;error();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;pitfalls-for-perl-programmers&quot;&gt;Pitfalls for Perl programmers&lt;/h1&gt;
&lt;p&gt;These are not really pitfalls.  Syntax::Keyword::Try works the same as
try/catch works in other languages.  However if you are used to handling
exceptions with die/eval or Try::Tiny here are a few things that you may have
forgotten about try/catch:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;1. A &lt;code&gt;try&lt;/code&gt; block must be followed by &lt;code&gt;catch&lt;/code&gt; or &lt;code&gt;finally&lt;/code&gt; or both.&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;try { do_something_risk() } # syntax error
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;2. A &lt;code&gt;try&lt;/code&gt; block does not catch exceptions.&lt;/em&gt;  The &lt;code&gt;catch&lt;/code&gt; block catches exceptions.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;try     { die &quot;its just a flesh wound&quot; }
finally { say &quot;hello&quot; }
# no exception is caught
# prints &quot;its just a flesh wound&quot; to STDERR
# process exits
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;3. A &lt;code&gt;return&lt;/code&gt; statement will exit the containing function – not the &lt;code&gt;try&lt;/code&gt; block.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;4. Loop control statements like &lt;code&gt;redo&lt;/code&gt;, &lt;code&gt;next&lt;/code&gt;, and &lt;code&gt;last&lt;/code&gt; act on any containing loops.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/mvp/exceptions.jpg&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 28 Mar 2018 00:00:00 -0400</pubDate>
        <link>http://blog.kablamo.org/2018/03/28/try-catch/</link>
        <guid isPermaLink="true">http://blog.kablamo.org/2018/03/28/try-catch/</guid>
        
        
        <category>perl</category>
        
      </item>
    
      <item>
        <title>Handling exceptions with die/eval</title>
        <description>&lt;p&gt;The standard Perl syntax for handling exceptions (die/eval) is quirky and has
some pitfalls that are easy to tumble into.  However its pretty common so 
you will need to understand it.&lt;/p&gt;

&lt;div class=&quot;tip&quot;&gt;
    &lt;div class=&quot;tip-title&quot;&gt;Alternate&lt;br /&gt;Solution&lt;/div&gt;
    &lt;div class=&quot;tip-content&quot; style=&quot;margin-left:6rem&quot;&gt;
        Several modules exist that add try/catch syntax to Perl. 
        As always there are some trade offs.  See &lt;a href=&quot;https://mvp.duckduckgo.com/essentials/try-catch/&quot;&gt; Handling
exceptions with try/catch&lt;/a&gt; for details.
    &lt;/div&gt;
&lt;/div&gt;

&lt;h1 id=&quot;throwing-exceptions&quot;&gt;Throwing exceptions&lt;/h1&gt;

&lt;p&gt;To throw an exception call &lt;code&gt;die()&lt;/code&gt;.  Other languages call it &lt;code&gt;throw()&lt;/code&gt;, but in
Perl its called &lt;code&gt;die()&lt;/code&gt;.  If the exception is not caught, an error message is
displayed to STDERR and the process exits with a non-zero value.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;die &quot;Something bad happened&quot;;
# prints &quot;Something bad happened at line 123.&quot; 
# and then the process exits;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;catching-exceptions&quot;&gt;Catching exceptions&lt;/h1&gt;

&lt;p&gt;To catch an exception, use &lt;code&gt;eval()&lt;/code&gt;. Other languages call it &lt;code&gt;try()&lt;/code&gt; but in
Perl its called &lt;code&gt;eval()&lt;/code&gt; and its a little different.  &lt;code&gt;eval()&lt;/code&gt; parses,
compiles, and evaluates a block of code at compile time and catches any
exceptions that are raised at runtime.  The exception is placed in the global
variable &lt;code&gt;$@&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;eval { die &quot;Something bad happened&quot; }; # try (and catch)
warn $@ if $@;                         # handle exception
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;exceptions-as-objects&quot;&gt;Exceptions as objects&lt;/h1&gt;

&lt;p&gt;Exceptions are usually strings, but you can throw objects too.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;eval {
    die My::Exception-&amp;gt;new(
        error    =&amp;gt; 'Something bad happened',
        request  =&amp;gt; $request,
        response =&amp;gt; $response,
    );
};
warn $@-&amp;gt;error if $@;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;pitfalls&quot;&gt;Pitfalls&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;1. &lt;code&gt;$@&lt;/code&gt; is a global variable&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If your exception handling code calls &lt;code&gt;eval()&lt;/code&gt;, &lt;code&gt;$@&lt;/code&gt; will get clobbered.  This
is easy to forget.  Here is one way to avoid it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;eval { die &quot;something bad&quot; };
if ($@) {
    my $error = $@;
    disconnect_from_the_database(); # calls eval()
    warn $error;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you are a module author and want to be polite and not modify &lt;code&gt;$@&lt;/code&gt; globally
you need to jump through hoops like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;my ($error1, $error2);
{
    local $@;
    unless (eval { ...; return 1 }) {
        $error1 = 1;
        $error2 = $@;
    }
}
if ($error1) {
    # handle exception
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;2. Exception objects that evaluate as false&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You can &lt;a href=&quot;https://metacpan.org/pod/overload&quot;&gt;overload&lt;/a&gt; Perl operators.  For
example, you could have an exception object evaluate to “error” in string
context.  You could also have an exception object evaluate to -1 in string
context.&lt;/p&gt;

&lt;p&gt;This would cause mysterious problems for most people because the common
idiom &lt;code&gt;handle_exception() if $@&lt;/code&gt; will silently fail and the exception won’t be
handled.&lt;/p&gt;

&lt;p&gt;One solution is to use a safer but more verbose idiom everywhere:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;unless ( eval { try_something_risky(); return 1 } ) {
    handle_exception();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;3. &lt;code&gt;eval&lt;/code&gt; blocks behave more like anonymous subroutines than if blocks.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A &lt;code&gt;return&lt;/code&gt; statement will exit the &lt;code&gt;eval&lt;/code&gt; block – not the containing function.&lt;/li&gt;
  &lt;li&gt;Loop control statements like &lt;code&gt;redo&lt;/code&gt;, &lt;code&gt;next&lt;/code&gt;, and &lt;code&gt;last&lt;/code&gt; only work in the context of whats inside the &lt;code&gt;eval&lt;/code&gt; block.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;see-also&quot;&gt;See also&lt;/h1&gt;
&lt;p&gt;For more info read the documentation for 
&lt;a href=&quot;http://perldoc.perl.org/functions/die.html&quot;&gt;die()&lt;/a&gt; and
&lt;a href=&quot;http://perldoc.perl.org/functions/eval.html&quot;&gt;eval()&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Tue, 20 Mar 2018 00:00:00 -0400</pubDate>
        <link>http://blog.kablamo.org/2018/03/20/die-eval/</link>
        <guid isPermaLink="true">http://blog.kablamo.org/2018/03/20/die-eval/</guid>
        
        
        <category>perl</category>
        
      </item>
    
      <item>
        <title>What's the best Perl module for X</title>
        <description>&lt;p&gt;Its hard for beginners and experts alike in any language to keep up with the
flood of new libraries being written all the time.  MetaCPAN has thousands of
modules. Its hard to know which module is the best one. For example there are
at least 7 modules for parsing JSON in Perl. New modules appear all the time
which make the old best solution obsolete.&lt;/p&gt;

&lt;h1 id=&quot;how-to-choose-a-module&quot;&gt;How to choose a module&lt;/h1&gt;

&lt;p&gt;There are a couple good sources of advice:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.kablamo.org/2015/09/08/mstpan/&quot;&gt;mstpan&lt;/a&gt; is a great
set of blog posts from 2015 written by
&lt;a href=&quot;https://shadow.cat/blog/matt-s-trout/&quot;&gt;mst&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://metacpan.org/pod/Task::Kensho&quot;&gt;Task::Kensho&lt;/a&gt; is a list of approved
modules maintained by The Enlighted Perl Organization.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://neilb.org/&quot;&gt;Neil Bowers&lt;/a&gt; wrote some &lt;a href=&quot;http://neilb.org/reviews/&quot;&gt;great module reviews&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://metacpan.org/pod/Perl::Critic::Policy::Freenode::DiscouragedModules&quot;&gt;DiscuragedModules&lt;/a&gt;
is a perlcritic policy which lists modules you probably shouldn’t use.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;some-problems&quot;&gt;Some problems&lt;/h1&gt;

&lt;p&gt;These are great sources of advice that insiders are familiar with.  There are few
issues though.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;This advice is hard to find for new people – or
even for people who are busy solving problems instead of navel gazing about
their language of choice (like I do).&lt;/li&gt;
  &lt;li&gt;There isn’t always a sustained effort to keep these current.&lt;/li&gt;
  &lt;li&gt;Some sources don’t discuss alternatives or provide reasons for the
recommendations.  A discussion helps developers make up their own mind about
whether the advice fits their situation or is outdated or is just silly.&lt;/li&gt;
  &lt;li&gt;Some topics aren’t covered.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;recomended-modules&quot;&gt;Recomended Modules&lt;/h1&gt;

&lt;p&gt;I’m hoping I can solve some of these issues.  Its still new and experimental,
but I started writing a new chapter for my book Minimum Viable Perl called
“Recommended Modules”.&lt;/p&gt;

&lt;p&gt;The first article is out and its about choosing &lt;a href=&quot;http://mvp.kablamo.org/cpan/exceptions/&quot;&gt;the best module for handling
exceptions&lt;/a&gt;.  I reviewed 6 different
ways of handling exceptions and benchmarked them.  Its the 1st of 3
articles on handling exceptions.&lt;/p&gt;

&lt;p&gt;The goal is to make the “Recommended Modules” chapter everyone’s destination
for quickly discovering what the best Perl module is for solving a given
problem.&lt;/p&gt;

&lt;p&gt;Its on github – like the rest of the book.  So feedback is welcome via &lt;a href=&quot;https://github.com/kablamo/mvp.kablamo.org/issues&quot;&gt;github
issues&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img style=&quot;font-size: 20rem&quot; class=&quot;emojidex-emoji&quot; src=&quot;https://cdn.emojidex.com/emoji/seal/thumbsup(ye).png&quot; emoji-code=&quot;thumbsup(ye)&quot; emoji-moji=&quot;👍🏽&quot; alt=&quot;thumbsup(ye)&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 10 Mar 2018 00:00:00 -0500</pubDate>
        <link>http://blog.kablamo.org/2018/03/10/recommended-modules/</link>
        <guid isPermaLink="true">http://blog.kablamo.org/2018/03/10/recommended-modules/</guid>
        
        
        <category>perl</category>
        
      </item>
    
      <item>
        <title>I wrote a Perl book</title>
        <description>&lt;p&gt;I wrote a &lt;a href=&quot;http://mvp.kablamo.org&quot;&gt;Perl book&lt;/a&gt; accidentally during my vacation.
I started typing and everything just fell out of my head over the next few days.
Its still pretty rough but I think its a decent start.&lt;/p&gt;

&lt;p&gt;The book is called &lt;a href=&quot;http://mvp.kablamo.org&quot;&gt;Minimum Viable Perl&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img style=&quot;border: 1px solid #ddd&quot; src=&quot;/images/mvp-book.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ok, its not a real published book.  Maybe I’ll self publish it on Amazon some
day.  For now its just a website.  I’m going to call it a book anyway.&lt;/p&gt;

&lt;h1 id=&quot;what-its-about&quot;&gt;What its about&lt;/h1&gt;

&lt;p&gt;This book is for developers who want to get up to speed with Perl quickly
through concise tutorials (about 1 screenful in size).&lt;/p&gt;

&lt;p&gt;Being concise is one of the primary goals.  In the age of stackoverflow and
blogs and info graphics everyone is in a hurry.  People shouldn’t have to wade
through unnecessary prose. I literally review each sentence in each article and
try to remove unnecessary words.&lt;/p&gt;

&lt;p&gt;In order to keep things short and to the point I’ve also chosen to be
opinionated and intentionally left out some dicussions and edge cases that were
uncommon or not essential. Instead I’ve tried to link to more information.&lt;/p&gt;

&lt;h1 id=&quot;why-i-wrote-it&quot;&gt;Why I wrote it&lt;/h1&gt;

&lt;p&gt;I keep meeting good developers who are visiting Perl from other languages who
are strugglng with the language.  I’ve tried pointing them at various books and
resources but that doesn’t seem to be enough. When I talk to them about their
struggles, the top 3 problems I hear about are:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Dereferencing (confusing)&lt;/li&gt;
  &lt;li&gt;Object oriented programming (how?)&lt;/li&gt;
  &lt;li&gt;Random stuff they can easily do in their favorite language but don’t yet
know how to do in Perl (opening files, testing, templates, dependencies, etc).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;My theory is these all boil down to the fact they don’t have a good, concise,
easily digestable online source of information and answers in one easy to find
location.  The information is out there but its not easy for new people to
find.  This is my attempt to solve that problem.&lt;/p&gt;

&lt;h1 id=&quot;the-future-of-minimum-viable-perl&quot;&gt;The future of Minimum Viable Perl&lt;/h1&gt;

&lt;p&gt;If this seems useful to people, there are many more articles that could be
written and quite a few rough edges that could be smoothed.&lt;/p&gt;

&lt;p&gt;Feedback and bug reports are welcome via
&lt;a href=&quot;https://github.com/kablamo/mvp.kablamo.org/issues&quot;&gt;github&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Fri, 08 Dec 2017 00:00:00 -0500</pubDate>
        <link>http://blog.kablamo.org/2017/12/08/mvp/</link>
        <guid isPermaLink="true">http://blog.kablamo.org/2017/12/08/mvp/</guid>
        
        
        <category>perl</category>
        
      </item>
    
      <item>
        <title>Vim plugin keybindings</title>
        <description>&lt;p&gt;I pick up all kinds of vim tricks and plugins but I can never remember all the
shortcuts.  I wrote up this quick reference to help myself memorize how to use
these tools.&lt;/p&gt;

&lt;p&gt;Caveat: some of these keybindings are unique to my &lt;a href=&quot;https://github.com/kablamo/yadm/blob/master/.vimrc&quot;&gt;.vimrc&lt;/a&gt;.&lt;/p&gt;

&lt;style&gt;
table {
  margin-top: 0rem;
}
td {
  vertical-align : top;
  padding-left   : .5em;
  padding-right  : .5em;
  background     : #ddd;
}
th {
  text-align:left;
  background    : #eee;
  white-space   : nowrap;
  font-weight   : normal;
  padding-left  : .5em;
  padding-right : .5em;
}
a.plugin, a.plugin:visited {
  color     : #333;
  font-size : 2rem;
}
kbd {
  background  : #fff;
  background  : transparent;
  border      : 0px;
  box-shadow  : none;
  color       : #333;
  font-weight : bold;
  font-weight : normal;
}
code {
  background : #5a5e63;
  color      : #fff;
}
*, *:before, *:after {
  -webkit-box-sizing: border-box;
      -moz-box-sizing: border-box;
          box-sizing: border-box;
}
&lt;/style&gt;

&lt;h3&gt;&lt;a class=&quot;plugin&quot; href=&quot;https://vimawesome.com/plugin/fzf&quot;&gt;fzf&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Fuzzy Finder&lt;/p&gt;
&lt;table&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;kbd&gt;&amp;lt;leader&amp;gt;f&lt;/kbd&gt;&lt;/th&gt;
    &lt;td&gt;Find files with rg by filename&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;kbd&gt;&amp;lt;leader&amp;gt;*&lt;/kbd&gt;&lt;/th&gt;
    &lt;td&gt;Search file contents with rg (&lt;kbd&gt;alt-a&lt;/kbd&gt; to select all). Results go in a QuickFix window.&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;kbd&gt;&amp;lt;leader&amp;gt;* -t perl&lt;/kbd&gt;&lt;/th&gt;
    &lt;td&gt;Same as above but only search perl files&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;kbd&gt;&amp;lt;leader&amp;gt;&amp;lt;tab&amp;gt;&lt;/kbd&gt;&lt;/th&gt;
    &lt;td&gt;Search all vim mappings&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;kbd&gt;&amp;lt;c-x&amp;gt;&amp;lt;c-f&amp;gt;&lt;/kbd&gt;&lt;/th&gt;
    &lt;td&gt;Complete file names&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;kbd&gt;&amp;lt;c-x&amp;gt;&amp;lt;c-l&amp;gt;&lt;/kbd&gt;&lt;/th&gt;
    &lt;td&gt;Complete line&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;&lt;br /&gt;
QuickFix keybindings: Search and replace across multiple files&lt;/p&gt;
&lt;table&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;kbd&gt;fn&lt;/kbd&gt;&lt;/th&gt;
    &lt;td&gt;next&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;kbd&gt;fp&lt;/kbd&gt;&lt;/th&gt;
    &lt;td&gt;prev&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;kbd&gt;:cdo &amp;lt;cmd&amp;gt;&lt;/kbd&gt;&lt;/th&gt;
    &lt;td&gt;For each entry run &lt;kbd&gt;&amp;lt;cmd&amp;gt;&lt;/kbd&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;kbd&gt;:cdo s/&amp;lt;c-r&amp;gt;&quot;//c&lt;/kbd&gt;&lt;/th&gt;
    &lt;td&gt;Same as above but don't need to retype the search regexp that was used by fzf&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;kbd&gt;:cfdo &amp;lt;cmd&amp;gt;&lt;/kbd&gt;&lt;/th&gt;
    &lt;td&gt;For each file run &lt;kbd&gt;&amp;lt;cmd&amp;gt;&lt;/kbd&gt;&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3&gt;&lt;a class=&quot;plugin&quot; href=&quot;https://vimawesome.com/plugin/tagbar&quot;&gt;Tagbar&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Browse the tags (packages, labels, subroutines, etc) of the current file and get an overview of its structure.&lt;/p&gt;
&lt;table&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;kbd&gt;&amp;lt;leader&amp;gt;m&lt;/kbd&gt;&lt;/th&gt;
    &lt;td&gt;Show tags&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;h3&gt;&lt;a class=&quot;plugin&quot; href=&quot;https://vimawesome.com/plugin/buffergator&quot;&gt;Buffergator&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;List, navigate between, and select buffers to edit.&lt;/p&gt;
&lt;table&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;kbd&gt;&amp;lt;leader&amp;gt;b&lt;/kbd&gt;&lt;/th&gt;
    &lt;td&gt;Open a window listing all buffers&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;h3&gt;&lt;a class=&quot;plugin&quot; href=&quot;https://vimawesome.com/plugin/vim-easy-align&quot;&gt;EasyAlign&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Vertically align stuff&lt;/p&gt;
&lt;table&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;kbd&gt;&amp;lt;leader&amp;gt;a&lt;/kbd&gt;&lt;/th&gt;
    &lt;td&gt;Align something&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;kbd&gt;&amp;lt;leader&amp;gt;a&amp;lt;ctrl-p&amp;gt;&lt;/kbd&gt;&lt;/th&gt;
    &lt;td&gt;Align something in interactive mode&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;kbd&gt;&amp;lt;leader&amp;gt;a=&lt;/kbd&gt;&lt;/th&gt;
    &lt;td&gt;Align around first occurance of &lt;kbd&gt;=&lt;/kbd&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;kbd&gt;&amp;lt;leader&amp;gt;a2=&lt;/kbd&gt;&lt;/th&gt;
    &lt;td&gt;Align around 2nd &lt;kbd&gt;=&lt;/kbd&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;kbd&gt;&amp;lt;leader&amp;gt;a*=&lt;/kbd&gt;&lt;/th&gt;
    &lt;td&gt;Align around all &lt;kbd&gt;=&lt;/kbd&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;kbd&gt;&amp;lt;leader&amp;gt;a-=&lt;/kbd&gt;&lt;/th&gt;
    &lt;td&gt;Align around last &lt;kbd&gt;=&lt;/kbd&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;kbd&gt;&amp;lt;leader&amp;gt;a&amp;lt;ctrl-x&amp;gt;&lt;/kbd&gt;&lt;/th&gt;
    &lt;td&gt;Align around a regular expression&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;h3&gt;&lt;a class=&quot;plugin&quot; href=&quot;https://vimawesome.com/plugin/vim-gurl&quot;&gt;gurl&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Provides links to the current line/selection on the github website so you easily talk about code with others.&lt;/p&gt;
&lt;table&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;kbd&gt;&amp;lt;leader&amp;gt;t&lt;/kbd&gt;&lt;/th&gt;
    &lt;td&gt;Get a link to the current line/selection&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;h3&gt;&lt;a class=&quot;plugin&quot; href=&quot;https://vimawesome.com/plugin/perlhelp-vim&quot;&gt;PerlHelp&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Quick access to perldoc&lt;/p&gt;
&lt;table&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;kbd&gt;&amp;lt;leader&amp;gt;pd&lt;/kbd&gt;&lt;/th&gt;
    &lt;td&gt;perldoc on the package name under cursor&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;kbd&gt;&amp;lt;leader&amp;gt;ph&lt;/kbd&gt;&lt;/th&gt;
    &lt;td&gt;perldoc on the package name under cursor&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;kbd&gt;&amp;lt;leader&amp;gt;pf&lt;/kbd&gt;&lt;/th&gt;
    &lt;td&gt;perldoc on the function name under cursor&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;kbd&gt;&amp;lt;leader&amp;gt;pv&lt;/kbd&gt;&lt;/th&gt;
    &lt;td&gt;perldoc on the special Perl variable under cursor&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;h3&gt;&lt;a class=&quot;plugin&quot; href=&quot;https://vimawesome.com/plugin/perl-nextmethod&quot;&gt;perl-nextmethod&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Jump to the next/prev Perl method&lt;/p&gt;
&lt;table&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;kbd&gt;]m&lt;/kbd&gt;&lt;/th&gt;
    &lt;td&gt;Jump to the next Perl subroutine start&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;kbd&gt;]M&lt;/kbd&gt;&lt;/th&gt;
    &lt;td&gt;Jump to the next Perl subroutine end&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;kbd&gt;[m&lt;/kbd&gt;&lt;/th&gt;
    &lt;td&gt;Jump to the previous Perl subroutine start&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;kbd&gt;[M&lt;/kbd&gt;&lt;/th&gt;
    &lt;td&gt;Jump to the previous Perl subroutine end&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

</description>
        <pubDate>Sun, 26 Nov 2017 00:00:00 -0500</pubDate>
        <link>http://blog.kablamo.org/2017/11/26/vim-plugin-keybindings/</link>
        <guid isPermaLink="true">http://blog.kablamo.org/2017/11/26/vim-plugin-keybindings/</guid>
        
        
        <category>quick-reference</category>
        
      </item>
    
      <item>
        <title>My long term goals v2017.1</title>
        <description>&lt;p&gt;Maybe writing about my long term goals occasionally will help me think through
them and commit to them.&lt;/p&gt;

&lt;p&gt;I currently group my goals into 4 major categories. I try to re-evaluate them
frequently.  Which means they change.  I try to look at them every day so they
are top of mind and I don’t get off track.&lt;/p&gt;

&lt;p&gt;To achieve these goals I need to break them down into smaller and smaller
chunks until I find a chunk thats easy to do.  Basically its just a matter of
solving problems until all the problems are gone and I reach my goal.
Prioritization, measuring progress, and not getting stuck are important too.&lt;/p&gt;

&lt;h1 id=&quot;financial-independence&quot;&gt;Financial independence&lt;/h1&gt;

&lt;p&gt;I want to be financially independent by 2020.  Which means I need to save
enough money that I can live off the investment returns.&lt;/p&gt;

&lt;p&gt;Some clarification: Its not my goal to sit around and do nothing.   And I’m
not necessarily going to quit my job.  My job is amazing, my coworkers are
brilliant, I’m learning a lot, and our product is both cool and useful.&lt;/p&gt;

&lt;p&gt;The purpose is to have the freedom to do what I want.  And to know with
certainty I’m doing what I want.  And to be able to protect my family from risk
and change more easily.&lt;/p&gt;

&lt;p&gt;There are 3 ways to generate wealth. I will need to:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Keep expenses low&lt;/li&gt;
  &lt;li&gt;Keep income high&lt;/li&gt;
  &lt;li&gt;Invest wisely&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;good-health&quot;&gt;Good health&lt;/h1&gt;

&lt;p&gt;Life is good.  I want to live forever. Failing that I’d like to live as long as
possible with a high quality of life.&lt;/p&gt;

&lt;p&gt;Basic goals&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Eat well&lt;/li&gt;
  &lt;li&gt;Sleep a lot&lt;/li&gt;
  &lt;li&gt;Healthy teeth&lt;/li&gt;
  &lt;li&gt;Weight under 155&lt;/li&gt;
  &lt;li&gt;Aerobic:  Run 3 miles every day&lt;/li&gt;
  &lt;li&gt;Strength: 100 pushups every day&lt;/li&gt;
  &lt;li&gt;Strength:  20 pullups every day&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Stretch goals&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Strength: handstand&lt;/li&gt;
  &lt;li&gt;Body fat: 6 pack&lt;/li&gt;
  &lt;li&gt;Endurance: marathon&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The fitness goals seem fairly simple to achieve but require quite a bit of
time.  The hard part for me is avoiding injury.  Diet is a harder problem.  I
eat pretty well.  Doing better here might require asking some experts and/or
just doing more research.&lt;/p&gt;

&lt;h1 id=&quot;better-relationships&quot;&gt;Better relationships&lt;/h1&gt;

&lt;p&gt;I want:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Friends who live in my neighborhood&lt;/li&gt;
  &lt;li&gt;To see everyone in my family at least once a year&lt;/li&gt;
  &lt;li&gt;To visit friends who are spread around the world once a year&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’m an introvert, I work too much, and I have a 1 year old.  So I
suck at relationships.  Tribes are helpful and fun.  One of the big advantages
to financial independence is having the money and time to spend with friends
and family.&lt;/p&gt;

&lt;p&gt;I believe that like anything else I can do better through analysis, planning,
and practice.  I have some ideas, but exactly what I’m going to do needs to be
fleshed out more.&lt;/p&gt;

&lt;h1 id=&quot;awesome-kids&quot;&gt;Awesome kids&lt;/h1&gt;

&lt;p&gt;I’d have tons of kids if I had tons of money and time.  Atm having more kids
sounds like a terrifying amount of work.  But I also think its one of the most
rewarding things a person can do and I especially think its going to be totally
worth it when I’m old.  This objective is woefully non specific atm and needs a
lot of work.&lt;/p&gt;
</description>
        <pubDate>Sun, 08 Jan 2017 00:00:00 -0500</pubDate>
        <link>http://blog.kablamo.org/2017/01/08/five-year-goals/</link>
        <guid isPermaLink="true">http://blog.kablamo.org/2017/01/08/five-year-goals/</guid>
        
        
      </item>
    
      <item>
        <title>My goals for 2017</title>
        <description>&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Spend less than $36,500 in 2017.&lt;/strong&gt; If I can keep my spending at this level
I should be on my way to a long term goal of being financially
independent at age 42.  We spent about $45,000 in 2016.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Build a portfolio of airline miles and hotel points by travel hacking
credit cards.&lt;/strong&gt; This could save me $4,000 a year or more in annual plane
tickets and hotels for a family of 3 to travel to Singapore.  We go every year
to visit my wife’s family.  I completed a free 15 day email course at
&lt;a href=&quot;https://travelmiles101.com&quot;&gt;travelmiles101.com&lt;/a&gt; and I can’t recommend that
enough.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Help my wife get her license.&lt;/strong&gt; Time is the most valuable thing.  It would
be way more efficient if I can do chores while my wife goes to the grocery
store.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Make at least 1 good friend who is a neighbor.&lt;/strong&gt; We just moved.  Our
neighbors seem like they might be cool.  Science says having friends makes
you live longer – especially if they live close by.  Also part of the appeal
of financial independence is having more time to spend with friends and family.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Write about how to get stuff done - project management for people
who aren’t project managers.&lt;/strong&gt; I think writing is the best way to learn.
Getting better at managing projects at home and at work has been on my mind for
the last 2 years.  Time is everyone’s biggest constraint.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Get 100 readers per month on this blog by the end of the year.&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Learn to walk on my hands.&lt;/strong&gt;  Last year my fitness goal was 100 pushups
and 20 pullups every other day.  Shockingly I managed to acheive that.  I am
apparently old and delicate so it took me most of the year.  But it was just a
stepping stone to my larger goal of learning to walk on my hands.  How is this
useful?  Its not.  I want to be strong but I need a specific goal.  This one
sounded more fun than “lift 500 pounds”.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Fix my knee injury.&lt;/strong&gt;  I need to see a physical therapist so I can run
again.  I’ve been putting this off and trying to solve it on my own for
years which is dumb.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Sun, 01 Jan 2017 00:00:00 -0500</pubDate>
        <link>http://blog.kablamo.org/2017/01/01/next-year/</link>
        <guid isPermaLink="true">http://blog.kablamo.org/2017/01/01/next-year/</guid>
        
        
      </item>
    
      <item>
        <title>CPAN::Diff - Compare local Perl modules to your darkpan or cpan</title>
        <description>&lt;p&gt;At work we have a Pinto powered darkpan.  But developers install stuff from
cpan on their development servers to try things out and occasionally these
experiments don’t get cleaned up and cause problems.  It would be nice nice to
know what modules are installed on a machine and how that compares to whats on
our darkpan.  Specifically I want to know which modules are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Older than those on the darkpan&lt;/li&gt;
  &lt;li&gt;Newer than those on the darkpan&lt;/li&gt;
  &lt;li&gt;Installed on the server but are not in the darkpan&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I solved this by stealing a lot of code from
&lt;a href=&quot;https://metacpan.org/pod/cpan-outdated&quot;&gt;cpan-outdated&lt;/a&gt; and writing
&lt;a href=&quot;https://metacpan.org/pod/CPAN::Diff&quot;&gt;CPAN::Diff&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Usage
$ cpan-diff --help

# Find local modules which are older than whats available in the CPAN
$ cpan-diff older
Acme::LookOfDisapproval
Acme::What

$ cpan-diff older --verbose
Acme::LookOfDisapproval        0.005   0.006 ETHER/Acme-LookOfDisapproval-0.006
Acme::What                     0.004   0.005 T/TO/TOBYINK/Acme-What-0.005.tar.gz

# Find local modules which are older than the ones in your company darkpan.
$ cpan-diff older --verbose --mirror https://darkpan.yourcompany.com
Acme::LookOfDisapproval        0.005   0.006 ETHER/Acme-LookOfDisapproval-0.006
Acme::What                     0.004   0.005 T/TO/TOBYINK/Acme-What-0.005.tar.gz

# Find local modules which are newer than the ones in your darkpan.  
$ cpan-diff newer --mirror https://darkpan.yourcompany.com

# Find local modules which are 'extra' -- ie don't exist in your darkpan.
$ cpan-diff extra --mirror https://darkpan.yourcompany.com
&lt;/code&gt;&lt;/pre&gt;

</description>
        <pubDate>Fri, 07 Oct 2016 00:00:00 -0400</pubDate>
        <link>http://blog.kablamo.org/2016/10/07/cpan-diff/</link>
        <guid isPermaLink="true">http://blog.kablamo.org/2016/10/07/cpan-diff/</guid>
        
        
        <category>perl</category>
        
      </item>
    
      <item>
        <title>Bash tricks: set -euxo pipefail</title>
        <description>&lt;p&gt;&lt;code&gt;set -eux&lt;/code&gt; is a super useful bash trick I’ve been using in Chef and
&lt;a href=&quot;https://metacpan.org/pod/Rex&quot;&gt;Rex&lt;/a&gt; tasks.  I’m going to break it down and
explain it one option at a time:&lt;/p&gt;

&lt;h1 id=&quot;set--e&quot;&gt;set -e&lt;/h1&gt;
&lt;p&gt;This&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cmd1 &amp;amp;&amp;amp; cmd2 &amp;amp;&amp;amp; cmd3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;is equivalent to this&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;set -e
cmd1
cmd2
cmd3
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;set--u&quot;&gt;set -u&lt;/h1&gt;
&lt;p&gt;The shell prints a message to stderr when it tries to expand a variable that is
not set.  Also it immediately exits. An interactive shell will not exit.  I
think this is similar to Perl’s 
&lt;a href=&quot;https://metacpan.org/pod/strictures&quot;&gt;use strictures&lt;/a&gt; which is something Moo
enables.&lt;/p&gt;

&lt;h1 id=&quot;set--x&quot;&gt;set -x&lt;/h1&gt;
&lt;p&gt;The shell prints each command in a script to stderr before running it.  I think
this would be particularly useful in Rex.  And Chef.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;set -x
echo hey
echo woah
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;output:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+ echo hey
hey
+ echo woah
woah
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;set--o-pipefail&quot;&gt;set -o pipefail&lt;/h1&gt;

&lt;p&gt;Pipelines fail on the first command which fails instead of dying later on
down the pipeline.  This is especially good when cmd3 is a command that always
succeeds (like echo):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cmd1 | cmd2 | cmd3
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;see-also&quot;&gt;See also&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.peterbe.com/plog/set-ex&quot;&gt;The most useful bash trick of the year&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://explainshell.com/explain?cmd=set+-euxo pipefail&quot;&gt;explainshell: set -euxo pipefail&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 08 Nov 2015 00:00:00 -0500</pubDate>
        <link>http://blog.kablamo.org/2015/11/08/bash-tricks-eux/</link>
        <guid isPermaLink="true">http://blog.kablamo.org/2015/11/08/bash-tricks-eux/</guid>
        
        
        <category>bash</category>
        
        <category>rex</category>
        
      </item>
    
  </channel>
</rss>
