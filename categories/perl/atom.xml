<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: perl | KABLAMO]]></title>
  <link href="http://blog.kablamo.org/categories/perl/atom.xml" rel="self"/>
  <link href="http://blog.kablamo.org/"/>
  <updated>2014-03-31T14:54:40-04:00</updated>
  <id>http://blog.kablamo.org/</id>
  <author>
    <name><![CDATA[Eric Johnson]]></name>
    <email><![CDATA[kablamo@kablamo.org]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Look around assertions in Perl regular expressions]]></title>
    <link href="http://blog.kablamo.org/2014/03/31/regex/"/>
    <updated>2014-03-31T00:00:00-04:00</updated>
    <id>http://blog.kablamo.org/2014/03/31/regex</id>
    <content type="html"><![CDATA[<p>When Perl&rsquo;s regex engine evaluates a string, it moves from left to right, one
letter at a time checking the match at each position.  That position is called
the <em>current match position</em>.</p>

<p>Look around assertions allow you to match a specific pattern before or after
the current match position without moving the match position.</p>

<h1>Look ahead assertions</h1>

<p>Look ahead assertions match the text after the current match position
(without moving the match position).  They look like <code>(?=pattern)</code>.</p>

<pre><code>my $job = "space cowboy";
$job =~ /space (?=cow)/;    # matches
$job =~ /space (?=cow)cow/; # also matches
</code></pre>

<h1>Look behind assertions</h1>

<p>Look behind assertions match the text before the current match position
(without moving the match position).  They look like <code>(?&lt;=pattern)</code>.</p>

<pre><code>my $job = "space cowboy";
$job =~ /(?&lt;=space) cowboy/;      # matches
$job =~ /(?&lt;=space)space cowboy/; # also matches
</code></pre>

<h1>Positive and negative look ahead assertions</h1>

<p><em>Positive</em> look ahead assertions are look ahead assertions which match when their
subpattern matches. They look like <code>(?=pattern)</code>.</p>

<pre><code> my $job = "space cowboy";
 $job =~ /space (?=cowboy)/;   # matches
</code></pre>

<p><em>Negative</em> look ahead assertions are look ahead assertions which match when their
subpattern fails. They look like <code>(?!pattern)</code>.</p>

<pre><code> my $job = "space cowboy";
 $job =~ /space (?!mooseboy)/;   # matches
</code></pre>

<h1>Positive and negative look behind assertions</h1>

<p>Positive look behind assertions are look behind assertions which match when their
subpattern matches. They look like <code>(?&lt;=pattern)</code>.</p>

<pre><code> my $job = "space cowboy";
 $job =~ /(?&lt;=space) cowboy/;   # matches
</code></pre>

<p>Negative look behind assertions are look behind assertions which match when
their subpattern fails. They look like <code>(?&lt;!pattern)</code>.</p>

<pre><code> my $job = "space cowboy";
 $job =~ /(?&lt;!earth) cowboy/;   # matches
</code></pre>

<p>For more details see <code>perldoc perlre</code>.  I also recommend the DuckDuckGo
<a href="https://duckduckgo.com/?q=regex+cheat+sheet">regex cheat sheet</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim cheat sheet]]></title>
    <link href="http://blog.kablamo.org/2014/03/28/ddg-vim/"/>
    <updated>2014-03-28T00:00:00-04:00</updated>
    <id>http://blog.kablamo.org/2014/03/28/ddg-vim</id>
    <content type="html"><![CDATA[<p>I created a Vim cheat sheet instant answer for DuckDuckDuckGo.  If you search
for <a href="https://duckduckgo.com/?q=vim+cheat+sheet">vim cheat sheet</a> or
<a href="https://duckduckgo.com/?q=vim+help">vim help</a> you will get a result like this:</p>

<p><img src="/images/for-posts/2014-03-28-ddg-vim.png" width="700" height="424"></p>

<p>The data is from rtorruellas&rsquo;s excellent <a href="http://rtorruellas.com/vim-cheat-sheet/">vim cheat sheet</a>
(also available on <a href="https://github.com/rtorr/vim-cheat-sheet">github</a>) which has a responsive
mobile friendly layout and is also available in Japanese.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What does 'use strict' do?]]></title>
    <link href="http://blog.kablamo.org/2014/03/19/use-strict/"/>
    <updated>2014-03-19T00:00:00-04:00</updated>
    <id>http://blog.kablamo.org/2014/03/19/use-strict</id>
    <content type="html"><![CDATA[<p>I always <code>use strict</code> in all my code.  But what does that actually mean?</p>

<h1>Enables strict refs</h1>

<p>Strict refs generates runtime errors when you use symbolic references.</p>

<pre><code>use strict 'refs';
$ref = "yarrr matey";
print $$ref;        # runtime error but without strict refs this is ok
</code></pre>

<h1>Enables strict vars</h1>

<p>Strict vars generates a compile time error if you access a variable that was
not declared or is not fully qualified.</p>

<pre><code>use strict 'vars';
$X::foo = 1;         # ok because its fully qualified
my $foo = 10;        # ok because my() was used.
$baz = 9;            # compile time error because $baz not declared before
</code></pre>

<h1>Enables strict subs</h1>

<p>Strict subs generates a compile time error if you use a bareword identifier
that&rsquo;s not a subroutine.</p>

<pre><code>no strict 'subs';
my $a = boop;
print $a; 
sub boop { return "dinosaurs smell good" }
</code></pre>

<p>The above prints &ldquo;boop&rdquo; instead of &ldquo;dinosaurs smell good&rdquo;.</p>

<pre><code>use strict 'subs';
my $b = splarf;      # &lt;--- compile time error here
sub splarf { return "dinosaurs smell good" }
</code></pre>

<p>The above generates a compile time error on line 2.</p>

<pre><code>use strict 'subs';
my $b = splarf(); 
sub splarf { return "dinosaurs smell good" }
</code></pre>

<p>The above prints &ldquo;dinosaurs smell good&rdquo; which is probably the desired output.</p>

<p>Sources:</p>

<ul>
<li><a href="https://metacpan.org/pod/strict">https://metacpan.org/pod/strict</a></li>
<li><a href="http://www.perl.com/pub/2001/01/begperl6.html#use">http://www.perl.com/pub/2001/01/begperl6.html#use</a> strict</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[my vs our vs local]]></title>
    <link href="http://blog.kablamo.org/2014/03/17/our-my-local/"/>
    <updated>2014-03-17T00:00:00-04:00</updated>
    <id>http://blog.kablamo.org/2014/03/17/our-my-local</id>
    <content type="html"><![CDATA[<h1>The short version for the impatient</h1>

<ul>
<li> <code>my()</code> creates a local variable</li>
<li> <code>our()</code> creates a package variable</li>
<li> <code>local()</code> temporarily changes the local value of a global variable</li>
<li> The above is mostly true.</li>
</ul>


<h1>The long version for the irrepressibly quixotic</h1>

<h2>my()</h2>

<p><code>my</code> declares the listed variable to be local to the enclosing block, file,
or <code>eval</code>.  That is to say its <em>scope</em> is local.  This kind of variable is
known as a <em>lexical variable</em>.  Note that lexical variables are hidden from
subroutines which are called from within the enclosing block.  This is known as
<em>lexical scoping</em>.</p>

<h2>our()</h2>

<p><code>our</code> creates an alias to a <em>package variable</em>.  The alias is local to the
enclosing block, file, or <code>eval</code>.  That is to say the alias is lexically scoped
just like any lexical variable.  However a package variable belongs to a
package.  It can be accessed from anywhere if you use its fully qualified name.
Here are two examples of fully qualified package variables:</p>

<pre><code>$main::a
%MyPackage::boop
</code></pre>

<p>Note that package variables are also global variables.</p>

<h2>local()</h2>

<p><code>local</code> gives temporary values to global variables.  It does not create a local
variable.  It is most commonly used when you want to locally modify a global
variable such as one of the punctuation variables.  For example:</p>

<pre><code>{ 
    local $| = 1; # enable autoflush for STDOUT
    say "hi mom";
}
</code></pre>

<p><code>local</code> modifies the listed variable to be local to the enclosing block,
file, or <code>eval</code> &mdash; AND to any subroutine called from within that block.  This
is known as <em>dynamic scoping</em>.</p>

<h1>Sources</h1>

<p>For a more complete understanding I recommend <code>perldoc perlfunc</code> and especially
<code>perldoc perlsub</code>.  Also the following links may be helpful:</p>

<ul>
<li><a href="https://metacpan.org/pod/perlfunc">https://metacpan.org/pod/perlfunc</a></li>
<li><a href="https://metacpan.org/pod/perlsub">https://metacpan.org/pod/perlsub</a></li>
<li><a href="http://perlmaven.com/package-variables-and-lexical-variables-in-perl">http://perlmaven.com/package-variables-and-lexical-variables-in-perl</a></li>
<li><a href="http://www.perlmonks.org/?node_id=95813">http://www.perlmonks.org/?node_id=95813</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why you should disagree in an interview]]></title>
    <link href="http://blog.kablamo.org/2014/03/16/disagree-interview/"/>
    <updated>2014-03-16T00:00:00-04:00</updated>
    <id>http://blog.kablamo.org/2014/03/16/disagree-interview</id>
    <content type="html"><![CDATA[<p>Today I&rsquo;m writing about something I noticed while doing interviews recently.</p>

<p>If I disagree with a decision a company made, I need to jump into that with
both feet.  There is sometimes an instinct to say &ldquo;I suppose I can live with
that&rdquo; or &ldquo;I don&rsquo;t know enough about why this choice was made to complain about
it&rdquo;.  But the goal is not to complain or to highlight their ignorance or to
have an argument.</p>

<p>Disagreeing starts a discussion.  This creates an opportunity to do 2 things.</p>

<p>First, it allows me to show case what I know.  The fact I have an opinion shows
I have worked on this problem before and over the course of the discussion I
will be able to demonstrate I understand the pros and cons of the different
options and have expertise there.</p>

<p>Second, I will come to understand why the company got into the position they
are in.  Usually there is a good reason.  If it was made through ignorance I
will find out if are they open to fixing the problem &mdash; subject to priorities
of course.  I may also learn if they are interested in my opinion or are
looking for a soldier who follows orders.</p>
]]></content>
  </entry>
  
</feed>
