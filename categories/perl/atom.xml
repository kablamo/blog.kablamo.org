<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: perl | KABLAMO]]></title>
  <link href="http://blog.kablamo.org/categories/perl/atom.xml" rel="self"/>
  <link href="http://blog.kablamo.org/"/>
  <updated>2014-03-01T10:16:20-05:00</updated>
  <id>http://blog.kablamo.org/</id>
  <author>
    <name><![CDATA[Eric Johnson]]></name>
    <email><![CDATA[kablamo@kablamo.org]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to build a Duck Duck Go instant answer]]></title>
    <link href="http://blog.kablamo.org/2014/02/28/duckduckgo/"/>
    <updated>2014-02-28T00:00:00-05:00</updated>
    <id>http://blog.kablamo.org/2014/02/28/duckduckgo</id>
    <content type="html"><![CDATA[<p>Instant answers are those little boxes at the top of the DuckDuckGo search
results page.  I made one for discovering international calling codes &mdash; or
dialing codes if you prefer.</p>

<p><img src="/images/for-posts/2014-02-28-singapore.png" width="700" height="424">
<img src="/images/for-posts/2014-02-28-down-under.png" width="700" height="424"></p>

<p>If you want to hack on DuckDuckGo its pretty simple to <a href="http://duckduckhack.com">get started</a>.
You can use Vagrant and VirtualBox to get a complete working dev environment.
But if you are already running Ubuntu or OSX the following recipe is easier:</p>

<pre><code>curl http://duckpan.org/install.pl | perl
cpanm App::DuckPAN
duckpan installdeps
</code></pre>

<p>Next fork the repo you want to hack on.  This depends on what data source you use
to generate your instant answer.</p>

<ul>
<li> Fork the <a href="https://github.com/duckduckgo/zeroclickinfo-spice">spice repo</a>
 if you have a real time data source like a JSON web API.</li>
<li> Fork the <a href="https://github.com/duckduckgo/zeroclickinfo-goodie">goodie repo</a>
 if you generate your instant answer with code and need no network access.</li>
<li> Fork the <a href="https://github.com/duckduckgo/zeroclickinfo-fathead">fathead repo</a>
 if your data source can be placed in a key/value store.</li>
<li> Fork the <a href="https://github.com/duckduckgo/zeroclickinfo-fathead">longtail repo</a>
 if your data source requires a full text search.</li>
</ul>


<p>Now you can start hacking.  I&rsquo;ll show you a very simple goodie from the repo,
but I added comments to explain whats happening.</p>

<pre><code>package DDG::Goodie::Capitalize;
use DDG::Goodie;

# If a DuckDuckGo search query contains any of these words at the start or
# end of the query, the 'remainder' handler below will run.
triggers startend =&gt; 'capitalize', 'uppercase', 'upper case';

# This block of code is pretty much meta data describing this instant
# answer.  Mostly it is used by https://duckduckgo.com/goodies.
zci answer_type =&gt; "capitalize";
primary_example_queries 'capitalize this';
secondary_example_queries 'uppercase that';
description 'capitalize a string';
name 'Capitalize';
code_url 'https://github.com/duckduckgo/zeroclickinfo-goodies/blob/master/lib/DDG/Goodie/Capitalize.pm';
category 'conversions';
topics 'programming';
attribution twitter =&gt; 'crazedpsyc',
            cpan    =&gt; 'CRZEDPSYC' ;

# This is is where the magic happens.  $_ contains the query minus the
# trigger word.  The return value from this sub shows up on the DuckDuckGo
# search results page as an instant answer.
handle remainder =&gt; sub { uc ($_) };
</code></pre>

<p>To see your code in action launch a little web server with the following command:</p>

<pre><code>duckpan server
</code></pre>

<p>Then open your favorite web browser and surf to <a href="http://0:5000/.">http://0:5000/.</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[I made a Readline cheat sheet]]></title>
    <link href="http://blog.kablamo.org/2014/01/01/readline-cheat-sheet/"/>
    <updated>2014-01-01T00:00:00-05:00</updated>
    <id>http://blog.kablamo.org/2014/01/01/readline-cheat-sheet</id>
    <content type="html"><![CDATA[<p>Recently Ovid pointed out <a href="http://blogs.perl.org/users/ovid/2014/01/ditching-a-language.html">large projects are much more likely to fail</a>.
I have a few large goals I&rsquo;d like to accomplish.  For example I want to improve
my front end design skills.  Rather than trying to tackle this problem all
at once, I made up a small project for myself.</p>

<p>I created a <a href="http://readline.kablamo.org/emacs.html">Readline cheat sheet</a> and
I was able to complete this project in about a day.  Here are some
of the things I learned:</p>

<ul>
<li><p><strong>Bootstrap</strong> &ndash; I always worry libraries and frameworks like
<a href="http://getbootstrap.com">Bootstrap</a> are overkill and bloat since I only need
a tiny portion of their features.  But its undeniable that I was able to quickly
build a responsive mobile friendly website without needing to worry about the
technical details.</p></li>
<li><p><strong>Readline commands</strong> &ndash; If I had to pick one keyboad shortcut to recommend it
would be <code>Ctrl-r</code> which allows you to search backwards through your
history.  I also like the incremental undo command: <code>Ctrl-_</code>.</p></li>
<li><p><strong>Text::Xslate</strong> &ndash; People keep mentioning
<a href="https://metacpan.org/pod/Text::Xslate">Text::Xslate</a> so I wanted to give it a try.
The docs say its full featured and very fast.  I liked that HTML metacharacters
are escaped by default to avoid cross site scripting attacks.  Also it supports
Template Toolkit syntax.  I didn&rsquo;t find any new killer features, but it was a
pleasure to work with.</p></li>
<li><p><strong>Some new <a href="http://helabs.com.br/blog/2014/01/21/prevent-common-problems-when-writing-css-from-scratch/">CSS tricks</a></strong> &ndash;
The best trick I learned is how to keep my footer at the bottom of the page
even when it has only a few lines of content.</p></li>
</ul>


<p>I was able to practice design, layout, color, and font selection.  And who
knows &mdash; perhaps this project will also drive a tiny bit of traffic to my
github profile and increase my
<a href="http://www.codusoperandi.com/posts/increasing-your-luck-surface-area">luck surface area</a>.</p>

<p>The momentum feels good.  I need to remember to keep my projects small more often.</p>

<p><img src="/images/for-posts/2014-02-02.png" width="700" height="424"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Salt and pepper - How to encrypt database passwords]]></title>
    <link href="http://blog.kablamo.org/2013/12/18/authen-passphrase/"/>
    <updated>2013-12-18T00:00:00-05:00</updated>
    <id>http://blog.kablamo.org/2013/12/18/authen-passphrase</id>
    <content type="html"><![CDATA[<p>To explain how salt and pepper work in encryption, I will walk through a few
scenarios.</p>

<h1>No salt</h1>

<p><strong>Summary for the impatient:</strong>  <em>Using no salt means an attacker doesn&rsquo;t need
to generate a rainbow table because they can reuse an existing one.</em></p>

<p>If an attacker obtains my database of encrypted passwords it will be very time
consuming to brute force them.  However there exist pre-computed tables of
encrypted values of thousands of commonly used passwords.  These tables are called
rainbow tables.  It is computationally inexpensive to match the encrypted
values in a rainbow table with the encrypted values in my database.</p>

<h1>One salt</h1>

<p><strong>Summary for the impatient:</strong>  <em>Using the same salt for all your passwords
means an attacker must generate 1 rainbow table.</em></p>

<p>Salt is data used as an additional input to the algorthim that encrypts a
password.  If I use a salt when I encrypt a password the resulting output will
be different from someone who did not use the same salt.  That means my
attacker cannot reuse an existing rainbow table.  They must generate a new one
using the same salt I used.</p>

<p>Note that salt is usually stored as plain text in the database with the
encrypted passwords.  So the attacker usually has access to the salt.  Even so,
I have successfully made the attack more expensive.</p>

<h1>A random salt per password</h1>

<p><strong>Summary for the impatient:</strong>  <em>Using a random salt for each password means an
attacker must generate 1 rainbow table per password.</em></p>

<p>Instead of using a single salt for the entire database I can use a different
(random) salt for each user&rsquo;s password.  This means the attacker must generate
a set of rainbow tables for each password which is even more expensive.</p>

<p>Note that I also need to store the salt for each password I have generated.
This is a pain to do manually.  Happily some clever person came up with RFC
2307 which suggests a much simpler solution.</p>

<p>Instead of storing the just the encrypted password in the password column, store
a string which concatenates the salt and the encrypted password.  This may not
sound easier.  It implies the need to parse and concatenate strings.  However
this is handled for me by the encryption libraries so its 100% pain free.  Lets
see an example.</p>

<p>To encrypt the plaintext string &lsquo;pie&rsquo; use the following Perl code</p>

<pre><code>my $blowfish = Authen::Passphrase::BlowfishCrypt-&gt;new(
   passphrase  =&gt; 'pie',
   salt_random =&gt; 1,
   cost        =&gt; 16,
);

say $blowfish-&gt;as_rfc2307; 
# the output will look like this:
# {CRYPT}$2a$14$sS80d1JlF3oR6Q4UHT.9w.DIXnV0/dLQMoVBsOp2gMRT65bWvP0P2
</code></pre>

<p>That crazy <em>{CRYPT}$2a$blarblar</em> mumbo jumbo is what we will save to the db in the password
column.  However if I know what to look for, I can see the mumbo jumbo is actually
several things smushed together:</p>

<pre><code>{CRYPT} $ 2a $ 16 $ sS80d1JlF3oR6Q4UHT.9w.DIXnV0/dLQMoVBsOp2gMRT65bWvP0P2
</code></pre>

<ul>
<li><strong>{CRYPT}</strong> &ndash; This is the scheme identifier.  It indicates which scheme is being used
so I know how to parse the rest of the string.</li>
<li><strong>$</strong> &ndash; These are field separators</li>
<li><strong>2a</strong> &ndash; A version number for this scheme</li>
<li><strong>16</strong> &ndash; The cost</li>
<li>Then there is the <strong>salt</strong> (22 base 64 digits &mdash; plain text)</li>
<li>Followed by the <strong>encrypted password</strong> (31 base 64 digits)</li>
</ul>


<p>To check if a user has submitted a valid <code>$password</code>  use the following code</p>

<pre><code>my $secret   = ''{CRYPT}$2a$16$sS80d1JlF3oR6Q4UHT.9w.DIXnV0/dLQMoVBsOp2gMRT65bWvP0P2';
my $blowfish = Authen::Passphrase-&gt;from_rfc2307($secret);

if ($blowfish-&gt;match($password)) {
    say "You may enter";
}
else {
    say "You did not say the magic word";
}
</code></pre>

<p>Of course we want to build this into our ORM so the Authen::Passphrase objects
are inflated and deflated for us.  Here is what that looks like in a DBIx
Result class:</p>

<pre><code>__PACKAGE__-&gt;load_components(qw/FilterColumn/);
__PACKAGE__-&gt;filter_column( password =&gt; {
    filter_to_storage   =&gt; sub { $_[1]-&gt;as_rfc2307() },                      # deflate
    filter_from_storage =&gt; sub { Authen::Passphrase-&gt;from_rfc2307($_[1]) },  # inflate
});
</code></pre>

<p>But I only showed you that so you would understand what
DBIx::Class::InflateColumn::Authen::Passphrase does under the covers.  I use
that because it makes my code simpler:</p>

<pre><code>__PACKAGE__-&gt;load_components(qw/InflateColumn::Authen::Passphrase/);
__PACKAGE__-&gt;add_columns(
    ...,
    password =&gt; {
        data_type          =&gt; 'text',
        inflate_passphrase =&gt; 'rfc2307',
    },
    ...,
);
</code></pre>

<p>This is how I encrypt passwords on <a href="https://networthify.com">networthify.com</a>
and <a href="http://iijo.org">iijo.org</a>.</p>

<h1>Adding pepper</h1>

<p><strong>Summary for the impatient:</strong>  <em>Using pepper means an attacker must generate
many rainbow tables per password. But few people use pepper and its
controversial.</em></p>

<p>Pepper is the same as salt except that I don&rsquo;t save the value anywhere.  Lets
say I choose an 8 bit value for my pepper.  That means there are 256
possible values.  If I don&rsquo;t save that value anywhere then when a user logs
in I will need to try up to 256 values to see if the user has the right
password.  However it means my attacker will need to generate up to 256
rainbow tables for each password.</p>

<p>One big problem is that trying 256 possible values is going to take me about 4
minutes on average hardware.</p>

<p>Even if I ignore that issue, this option is controversial and my understanding
is that few people do it.  It is generally accepted that messing about with
salt and pepper should be left to the professionals who are writing the
encryption libraries.  Pepper is not supported by Authen::Passphrase.</p>

<h1>Caveats</h1>

<p>Salting is done to make rainbow tables inneffective.  For various reasons
crackers rarely use rainbow tables anymore.  Instead they use sophisticated
brute force algorithms which combine dictionary attacks with databases of known
or commonly used passwords.  These kinds of brute force attacks can often crack
battery-horse-staple <a href="http://xkcd.com/936/">XKCD</a> style passwords even if they
are very long.  Password are not secure unless they are very long <em>and</em>
very random.</p>

<p>And there is more bad news.  While salting makes it harder to crack all the
passwords in the database, cracking a single targeted password is often not
computationally hard.  A single completely random 8 character password can be
cracked with brute force in 10 days.</p>

<p>The only way to protect your users is to require very long and very random
passwords.  Make sure your website requires a minimum password length of 8
characters or more.</p>

<h4>Sources</h4>

<ul>
<li><a href="http://www.wired.co.uk/news/archive/2013-05/28/password-cracking/viewall">Anatomy of a hack: even your &lsquo;complicated&rsquo; password is easy to crack</a> (Wired magazine)</li>
<li><a href="https://metacpan.org/pod/Authen::Passphrase">Authen::Passphrase</a></li>
<li><a href="https://metacpan.org/pod/Authen::Passphrase::BlowfishCrypt">Authen::Passphrase::BlowfishCrypt</a></li>
<li><a href="https://metacpan.org/pod/DBIx::Class::InflateColumn::Authen::Passphrase">DBIx::Class::InflateColumn::Authen::Passphrase</a></li>
<li><a href="http://blog.afoolishmanifesto.com/archives/1910">frew</a></li>
<li><a href="http://crypto.stackexchange.com/questions/1776/can-you-help-me-understand-what-a-cryptographic-salt-is">crypto.stackexchange.com</a></li>
<li><a href="http://security.stackexchange.com/questions/3272/password-hashing-add-salt-pepper-or-is-salt-enough">security.stackexchange.com</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Anyenv + Plenv + Carton]]></title>
    <link href="http://blog.kablamo.org/2013/11/25/plenv/"/>
    <updated>2013-11-25T00:00:00-05:00</updated>
    <id>http://blog.kablamo.org/2013/11/25/plenv</id>
    <content type="html"><![CDATA[<p>Recently I started breaking out of my Perl-only isolation bubble and dabbling
with other languages. I was surprised how easy and comfortable other languages
are. I think its because these days good ideas spread from one language to the
next incredibly fast. Even in a new language when I reach for a tool I can
usually find some Perl technology analogue.</p>

<p>For example, I&rsquo;ve been a perlbrew person for a long time and it has served me
well.  Ruby has its own version of perlbrew called rbenv which is pretty great.
But actually it seems every language has a clone of rbenv.</p>

<ul>
<li>Python has pyenv.</li>
<li>PHP has phpenv.</li>
<li>Node has ndenv.</li>
<li>Java has jenv.</li>
<li>Perl has plenv.</li>
</ul>


<p>So I thought, what the heck &mdash; lets try that out.  The nice thing
is all the envs have pretty much the same command line options and the same
approach to managing dependencies.  I thought it might be calming and soothing
for my brain to have one way of doing things.</p>

<p>I found <a href="https://github.com/riywo/anyenv">Anyenv</a> just a second ago as I was
writing this.  It claims it will manage all my envs. Looks like brilliant
stuff. Fortune favors the bold. (I eat danger for breakfast.)  I&rsquo;ll try it.</p>

<pre><code>git clone https://github.com/riywo/anyenv ~/.anyenv
echo 'export PATH="$HOME/.anyenv/bin:$PATH"' &gt;&gt; ~/.my_profile
echo 'eval "$(anyenv init -)"'               &gt;&gt; ~/.my_profile
exec bash -l
anyenv install rbenv    # ruby
anyenv install plenv    # perl
anyenv install pyenv    # python
anyenv install phpenv   # php
anyenv install ndenv    # nodejs
anyenv install denv     # dunno
anyenv install jenv     # java
exec bash -l            # &lt;-- useful trick btw
anyenv versions
</code></pre>

<p>Ok now I have all the envs.  But I want to actually do some work with plenv.
Lets see if I can do that.</p>

<pre><code>plenv install --list  # list all the potential perl versions you can use
plenv install 5.19.6  # install perl v5.19.6
plenv rehash          # reload the shell environment with the new perl
plenv global 5.19.6   # use v5.19.6 everywhere by default
plenv local  5.19.6   # use v5.19.6 in this directory for this project
plenv install-cpanm   # install cpanm for this version of perl
plenv rehash          #
plenv which cpanm     # see where cpanm is installed. should be ~/.anyenv
</code></pre>

<p>Now I will install the dependencies for my project.  I will manage them with
<a href="https://metacpan.org/pod/Carton">Carton</a>.</p>

<pre><code>cpanm Carton          # install carton for this version of perl
plenv list-modules
</code></pre>

<p>At this point I need to create a <code>cpanfile</code>.  There are all kinds of cool
things you can do in this file, but with your permision I will begin with baby
steps.  Here is mine cpanfile for now:</p>

<pre><code>requires "Catalyst";
requires "Plack";
requires "DBD::SQLite";
</code></pre>

<p>And then I run carton to install these modules locally into local/lib/perl5.</p>

<pre><code>carton               # install all the dependencies from the cpanfile
ls local/lib/perl5/  # see all the new modules installed here
plenv list-modules   # see mountains of installed stuff
cd /tmp
plenv list-modules   # see nothing installed except Carton
</code></pre>

<p>Notice that a carton.snapshot file was created.  If I look inside, I can see a
list of all my project dependencies, and all their dependencies, etc all the
way down to the first turtle &mdash; AND there are version numbers for everything.</p>

<pre><code># carton snapshot format: version 1.0
DISTRIBUTIONS
Apache-LogFormat-Compiler-0.13
  pathname: K/KA/KAZEBURO/Apache-LogFormat-Compiler-0.13.tar.gz
    provides:
      Apache::LogFormat::Compiler 0.13
    requirements:
      CPAN::Meta 0
      CPAN::Meta::Prereqs 0
      Module::Build 0.38
...blah biddee blah etc...
</code></pre>

<p>I can add <code>cpanfile</code> and <code>cpanfile.snapshot</code> to my git repo.  Now when I deploy
or share the code, the user at the destination can run Carton and they will end
up with the exact dependencies with the exact same version numbers I had. This
way I can be sure my code will run as successfully for them as it did for me.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Monit - How to know when your web site is down]]></title>
    <link href="http://blog.kablamo.org/2013/11/24/monit/"/>
    <updated>2013-11-24T00:00:00-05:00</updated>
    <id>http://blog.kablamo.org/2013/11/24/monit</id>
    <content type="html"><![CDATA[<p>If your website goes down, you want to find out fast.  There are a few ways to
accomplish this, but I&rsquo;m using <a href="http://mmonit.com/monit">monit</a>.  Monit is a
mature unix monitoring daemon and it gives me the ability not only get alerts
but to restart services that go down.</p>

<p>Monit has lotsa power and options and you can read about all of them on
the man page.  Or if you don&rsquo;t want to mess around with that you can pay them
for a <a href="https://mmonit.com/screenshots/">pretty web admin interface</a> and some
phone/tablet apps for a one time fee of € 65.  Another simpler and I think less
powerful option is <a href="http://monitis.com/?affiliate=1303230640">monitor.us</a>.</p>

<p>I don&rsquo;t want to pay.  So I installed monit like this:</p>

<pre><code>apt-get install monit
</code></pre>

<p>The configuration file for monit lives at <code>/etc/monit/monitrc</code>.  You probably
don&rsquo;t need to bother with that.  When monit runs, it looks in
<code>/etc/monit/conf.d</code> and executes any scripts it finds in there.  Like many
people I&rsquo;m running nginx in front of my Starman web apps.  So I want monitor
both of those processes.</p>

<p>Here is how to do that.  Created a script named <code>/etc/monit/confd/nginx</code>:</p>

<pre><code>check process nginx with pidfile /var/run/nginx.pid

    start program = "/etc/init.d/nginx start"
    stop  program = "/etc/init.d/nginx stop"

    alert kablamo@example.com with mail-format {
           from: monit@example.com
        subject: monit alert: $SERVICE $EVENT $DATE
        message: $DESCRIPTION
    }

    if failed port 80 protocol HTTP
        request /
        with timeout 7 seconds
        then restart
</code></pre>

<p>Then create a second script named <code>/etc/monit/conf.d/mywebapp</code>.  Its very
similar.  This assumes you are running your web app as the user <code>web</code> on
localhost port 22222.</p>

<pre><code>check process mywebapp with pidfile /var/run/mywebapp.pid

    start program = "/etc/init.d/mywebapp start" as uid web and gid web
    stop  program = "/etc/init.d/mywebapp stop"  as uid web and gid web

    alert kablamo@example.com with mail-format {
           from: monit@example.com
        subject: monit alert: $SERVICE $EVENT $DATE
        message: $DESCRIPTION
    }

    if failed port 22222 protocol HTTP
        request /
        with timeout 7 seconds
        then restart
</code></pre>

<p>With these scripts, anytime your processes disappear or stop working you will
get email and monit will try to restart them.</p>

<p>But I&rsquo;m paranoid.  So I created a third monit script to do an end to end test in case
something ever gets misconfigured somewhere. <code>/etc/monit/conf.d/end2end</code>:</p>

<pre><code>check host networthify.com with address 71.19.156.131

    alert kablamo@example.com with mail-format {
           from: monit@monit@example.com
        subject: monit alert: $SERVICE $EVENT $DATE
        message: $DESCRIPTION
    }

    if failed port 80 protocol HTTP
        request /
        with timeout 9 seconds
        then alert
</code></pre>

<p>Suggestions for improvment?</p>
]]></content>
  </entry>
  
</feed>
