<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>kablamo</title>
    <description>Kablamo is Eric Johnson's blog. I want to do more and be better. Financial independence, entrepreneurship, productivity, and code.  
</description>
    <link>http://blog.kablamo.org/</link>
    <atom:link href="http://blog.kablamo.org/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 22 Dec 2017 14:32:01 -0500</pubDate>
    <lastBuildDate>Fri, 22 Dec 2017 14:32:01 -0500</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>I wrote a Perl book</title>
        <description>&lt;p&gt;I wrote a &lt;a href=&quot;http://mvp.kablamo.org&quot;&gt;Perl book&lt;/a&gt; accidentally during my vacation.
I started typing and everything just fell out of my head over the next few days.
Its still pretty rough but I think its a decent start.&lt;/p&gt;

&lt;p&gt;The book is called &lt;a href=&quot;http://mvp.kablamo.org&quot;&gt;Minimum Viable Perl&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img style=&quot;border: 1px solid #ddd&quot; src=&quot;/images/mvp-book.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ok, its not a real published book.  Maybe I’ll self publish it on Amazon some
day.  For now its just a website.  I’m going to call it a book anyway.&lt;/p&gt;

&lt;h1 id=&quot;what-its-about&quot;&gt;What its about&lt;/h1&gt;

&lt;p&gt;This book is for developers who want to get up to speed with Perl quickly
through concise tutorials (about 1 screenful in size).&lt;/p&gt;

&lt;p&gt;Being concise is one of the primary goals.  In the age of stackoverflow and
blogs and info graphics everyone is in a hurry.  People shouldn’t have to wade
through unnecessary prose. I literally review each sentence in each article and
try to remove unnecessary words.&lt;/p&gt;

&lt;p&gt;In order to keep things short and to the point I’ve also chosen to be
opinionated and intentionally left out some dicussions and edge cases that were
uncommon or not essential. Instead I’ve tried to link to more information.&lt;/p&gt;

&lt;h1 id=&quot;why-i-wrote-it&quot;&gt;Why I wrote it&lt;/h1&gt;

&lt;p&gt;I keep meeting good developers who are visiting Perl from other languages who
are strugglng with the language.  I’ve tried pointing them at various books and
resources but that doesn’t seem to be enough. When I talk to them about their
struggles, the top 3 problems I hear about are:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Dereferencing (confusing)&lt;/li&gt;
  &lt;li&gt;Object oriented programming (how?)&lt;/li&gt;
  &lt;li&gt;Random stuff they can easily do in their favorite language but don’t yet
know how to do in Perl (opening files, testing, templates, dependencies, etc).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;My theory is these all boil down to the fact they don’t have a good, concise,
easily digestable online source of information and answers in one easy to find
location.  The information is out there but its not easy for new people to
find.  This is my attempt to solve that problem.&lt;/p&gt;

&lt;h1 id=&quot;the-future-of-minimum-viable-perl&quot;&gt;The future of Minimum Viable Perl&lt;/h1&gt;

&lt;p&gt;If this seems useful to people, there are many more articles that could be
written and quite a few rough edges that could be smoothed.&lt;/p&gt;

&lt;p&gt;Feedback and bug reports are welcome via
&lt;a href=&quot;https://github.com/kablamo/mvp.kablamo.org/issues&quot;&gt;github&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Fri, 08 Dec 2017 00:00:00 -0500</pubDate>
        <link>http://blog.kablamo.org/2017/12/08/mvp/</link>
        <guid isPermaLink="true">http://blog.kablamo.org/2017/12/08/mvp/</guid>
        
        
        <category>perl</category>
        
      </item>
    
      <item>
        <title>Vim plugin keybindings</title>
        <description>&lt;p&gt;I pick up all kinds of vim tricks and plugins but I can never remember all the
shortcuts.  I wrote up this quick reference to help myself memorize how to use
these tools.&lt;/p&gt;

&lt;p&gt;Caveat: some of these keybindings are unique to my &lt;a href=&quot;https://github.com/kablamo/yadm/blob/master/.vimrc&quot;&gt;.vimrc&lt;/a&gt;.&lt;/p&gt;

&lt;style&gt;
table {
  margin-top: 0rem;
}
td {
  vertical-align : top;
  padding-left   : .5em;
  padding-right  : .5em;
  background     : #ddd;
}
th {
  text-align:left;
  background    : #eee;
  white-space   : nowrap;
  font-weight   : normal;
  padding-left  : .5em;
  padding-right : .5em;
}
a.plugin, a.plugin:visited {
  color     : #333;
  font-size : 2rem;
}
kbd {
  background  : #fff;
  background  : transparent;
  border      : 0px;
  box-shadow  : none;
  color       : #333;
  font-weight : bold;
  font-weight : normal;
}
code {
  background : #5a5e63;
  color      : #fff;
}
*, *:before, *:after {
  -webkit-box-sizing: border-box;
      -moz-box-sizing: border-box;
          box-sizing: border-box;
}
&lt;/style&gt;

&lt;h3&gt;&lt;a class=&quot;plugin&quot; href=&quot;https://vimawesome.com/plugin/fzf&quot;&gt;fzf&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Fuzzy Finder&lt;/p&gt;
&lt;table&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;kbd&gt;&amp;lt;leader&amp;gt;f&lt;/kbd&gt;&lt;/th&gt;
    &lt;td&gt;Find files with rg by filename&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;kbd&gt;&amp;lt;leader&amp;gt;*&lt;/kbd&gt;&lt;/th&gt;
    &lt;td&gt;Search file contents with rg (&lt;kbd&gt;alt-a&lt;/kbd&gt; to select all). Results go in a QuickFix window.&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;kbd&gt;&amp;lt;leader&amp;gt;* -t perl&lt;/kbd&gt;&lt;/th&gt;
    &lt;td&gt;Same as above but only search perl files&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;kbd&gt;&amp;lt;leader&amp;gt;&amp;lt;tab&amp;gt;&lt;/kbd&gt;&lt;/th&gt;
    &lt;td&gt;Search all vim mappings&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;kbd&gt;&amp;lt;c-x&amp;gt;&amp;lt;c-f&amp;gt;&lt;/kbd&gt;&lt;/th&gt;
    &lt;td&gt;Complete file names&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;kbd&gt;&amp;lt;c-x&amp;gt;&amp;lt;c-l&amp;gt;&lt;/kbd&gt;&lt;/th&gt;
    &lt;td&gt;Complete line&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;&lt;br /&gt;
QuickFix keybindings: Search and replace across multiple files&lt;/p&gt;
&lt;table&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;kbd&gt;fn&lt;/kbd&gt;&lt;/th&gt;
    &lt;td&gt;next&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;kbd&gt;fp&lt;/kbd&gt;&lt;/th&gt;
    &lt;td&gt;prev&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;kbd&gt;:cdo &amp;lt;cmd&amp;gt;&lt;/kbd&gt;&lt;/th&gt;
    &lt;td&gt;For each entry run &lt;kbd&gt;&amp;lt;cmd&amp;gt;&lt;/kbd&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;kbd&gt;:cdo s/&amp;lt;c-r&amp;gt;&quot;//c&lt;/kbd&gt;&lt;/th&gt;
    &lt;td&gt;Same as above but don't need to retype the search regexp that was used by fzf&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;kbd&gt;:cfdo &amp;lt;cmd&amp;gt;&lt;/kbd&gt;&lt;/th&gt;
    &lt;td&gt;For each file run &lt;kbd&gt;&amp;lt;cmd&amp;gt;&lt;/kbd&gt;&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3&gt;&lt;a class=&quot;plugin&quot; href=&quot;https://vimawesome.com/plugin/tagbar&quot;&gt;Tagbar&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Browse the tags (packages, labels, subroutines, etc) of the current file and get an overview of its structure.&lt;/p&gt;
&lt;table&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;kbd&gt;&amp;lt;leader&amp;gt;m&lt;/kbd&gt;&lt;/th&gt;
    &lt;td&gt;Show tags&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;h3&gt;&lt;a class=&quot;plugin&quot; href=&quot;https://vimawesome.com/plugin/buffergator&quot;&gt;Buffergator&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;List, navigate between, and select buffers to edit.&lt;/p&gt;
&lt;table&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;kbd&gt;&amp;lt;leader&amp;gt;b&lt;/kbd&gt;&lt;/th&gt;
    &lt;td&gt;Open a window listing all buffers&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;h3&gt;&lt;a class=&quot;plugin&quot; href=&quot;https://vimawesome.com/plugin/vim-easy-align&quot;&gt;EasyAlign&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Vertically align stuff&lt;/p&gt;
&lt;table&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;kbd&gt;&amp;lt;leader&amp;gt;a&lt;/kbd&gt;&lt;/th&gt;
    &lt;td&gt;Align something&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;kbd&gt;&amp;lt;leader&amp;gt;a&amp;lt;ctrl-p&amp;gt;&lt;/kbd&gt;&lt;/th&gt;
    &lt;td&gt;Align something in interactive mode&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;kbd&gt;&amp;lt;leader&amp;gt;a=&lt;/kbd&gt;&lt;/th&gt;
    &lt;td&gt;Align around first occurance of &lt;kbd&gt;=&lt;/kbd&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;kbd&gt;&amp;lt;leader&amp;gt;a2=&lt;/kbd&gt;&lt;/th&gt;
    &lt;td&gt;Align around 2nd &lt;kbd&gt;=&lt;/kbd&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;kbd&gt;&amp;lt;leader&amp;gt;a*=&lt;/kbd&gt;&lt;/th&gt;
    &lt;td&gt;Align around all &lt;kbd&gt;=&lt;/kbd&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;kbd&gt;&amp;lt;leader&amp;gt;a-=&lt;/kbd&gt;&lt;/th&gt;
    &lt;td&gt;Align around last &lt;kbd&gt;=&lt;/kbd&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;kbd&gt;&amp;lt;leader&amp;gt;a&amp;lt;ctrl-x&amp;gt;&lt;/kbd&gt;&lt;/th&gt;
    &lt;td&gt;Align around a regular expression&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;h3&gt;&lt;a class=&quot;plugin&quot; href=&quot;https://vimawesome.com/plugin/vim-gurl&quot;&gt;gurl&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Provides links to the current line/selection on the github website so you easily talk about code with others.&lt;/p&gt;
&lt;table&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;kbd&gt;&amp;lt;leader&amp;gt;t&lt;/kbd&gt;&lt;/th&gt;
    &lt;td&gt;Get a link to the current line/selection&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;h3&gt;&lt;a class=&quot;plugin&quot; href=&quot;https://vimawesome.com/plugin/perlhelp-vim&quot;&gt;PerlHelp&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Quick access to perldoc&lt;/p&gt;
&lt;table&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;kbd&gt;&amp;lt;leader&amp;gt;pd&lt;/kbd&gt;&lt;/th&gt;
    &lt;td&gt;perldoc on the package name under cursor&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;kbd&gt;&amp;lt;leader&amp;gt;ph&lt;/kbd&gt;&lt;/th&gt;
    &lt;td&gt;perldoc on the package name under cursor&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;kbd&gt;&amp;lt;leader&amp;gt;pf&lt;/kbd&gt;&lt;/th&gt;
    &lt;td&gt;perldoc on the function name under cursor&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;kbd&gt;&amp;lt;leader&amp;gt;pv&lt;/kbd&gt;&lt;/th&gt;
    &lt;td&gt;perldoc on the special Perl variable under cursor&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;h3&gt;&lt;a class=&quot;plugin&quot; href=&quot;https://vimawesome.com/plugin/perl-nextmethod&quot;&gt;perl-nextmethod&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Jump to the next/prev Perl method&lt;/p&gt;
&lt;table&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;kbd&gt;]m&lt;/kbd&gt;&lt;/th&gt;
    &lt;td&gt;Jump to the next Perl subroutine start&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;kbd&gt;]M&lt;/kbd&gt;&lt;/th&gt;
    &lt;td&gt;Jump to the next Perl subroutine end&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;kbd&gt;[m&lt;/kbd&gt;&lt;/th&gt;
    &lt;td&gt;Jump to the previous Perl subroutine start&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;kbd&gt;[M&lt;/kbd&gt;&lt;/th&gt;
    &lt;td&gt;Jump to the previous Perl subroutine end&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

</description>
        <pubDate>Sun, 26 Nov 2017 00:00:00 -0500</pubDate>
        <link>http://blog.kablamo.org/2017/11/26/vim-plugin-keybindings/</link>
        <guid isPermaLink="true">http://blog.kablamo.org/2017/11/26/vim-plugin-keybindings/</guid>
        
        
        <category>quick-reference</category>
        
      </item>
    
      <item>
        <title>My long term goals v2017.1</title>
        <description>&lt;p&gt;Maybe writing about my long term goals occasionally will help me think through
them and commit to them.&lt;/p&gt;

&lt;p&gt;I currently group my goals into 4 major categories. I try to re-evaluate them
frequently.  Which means they change.  I try to look at them every day so they
are top of mind and I don’t get off track.&lt;/p&gt;

&lt;p&gt;To achieve these goals I need to break them down into smaller and smaller
chunks until I find a chunk thats easy to do.  Basically its just a matter of
solving problems until all the problems are gone and I reach my goal.
Prioritization, measuring progress, and not getting stuck are important too.&lt;/p&gt;

&lt;h1 id=&quot;financial-independence&quot;&gt;Financial independence&lt;/h1&gt;

&lt;p&gt;I want to be financially independent by 2020.  Which means I need to save
enough money that I can live off the investment returns.&lt;/p&gt;

&lt;p&gt;Some clarification: Its not my goal to sit around and do nothing.   And I’m
not necessarily going to quit my job.  My job is amazing, my coworkers are
brilliant, I’m learning a lot, and our product is both cool and useful.&lt;/p&gt;

&lt;p&gt;The purpose is to have the freedom to do what I want.  And to know with
certainty I’m doing what I want.  And to be able to protect my family from risk
and change more easily.&lt;/p&gt;

&lt;p&gt;There are 3 ways to generate wealth. I will need to:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Keep expenses low&lt;/li&gt;
  &lt;li&gt;Keep income high&lt;/li&gt;
  &lt;li&gt;Invest wisely&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;good-health&quot;&gt;Good health&lt;/h1&gt;

&lt;p&gt;Life is good.  I want to live forever. Failing that I’d like to live as long as
possible with a high quality of life.&lt;/p&gt;

&lt;p&gt;Basic goals&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Eat well&lt;/li&gt;
  &lt;li&gt;Sleep a lot&lt;/li&gt;
  &lt;li&gt;Healthy teeth&lt;/li&gt;
  &lt;li&gt;Weight under 155&lt;/li&gt;
  &lt;li&gt;Aerobic:  Run 3 miles every day&lt;/li&gt;
  &lt;li&gt;Strength: 100 pushups every day&lt;/li&gt;
  &lt;li&gt;Strength:  20 pullups every day&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Stretch goals&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Strength: handstand&lt;/li&gt;
  &lt;li&gt;Body fat: 6 pack&lt;/li&gt;
  &lt;li&gt;Endurance: marathon&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The fitness goals seem fairly simple to achieve but require quite a bit of
time.  The hard part for me is avoiding injury.  Diet is a harder problem.  I
eat pretty well.  Doing better here might require asking some experts and/or
just doing more research.&lt;/p&gt;

&lt;h1 id=&quot;better-relationships&quot;&gt;Better relationships&lt;/h1&gt;

&lt;p&gt;I want:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Friends who live in my neighborhood&lt;/li&gt;
  &lt;li&gt;To see everyone in my family at least once a year&lt;/li&gt;
  &lt;li&gt;To visit friends who are spread around the world once a year&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’m an introvert, I work too much, and I have a 1 year old.  So I
suck at relationships.  Tribes are helpful and fun.  One of the big advantages
to financial independence is having the money and time to spend with friends
and family.&lt;/p&gt;

&lt;p&gt;I believe that like anything else I can do better through analysis, planning,
and practice.  I have some ideas, but exactly what I’m going to do needs to be
fleshed out more.&lt;/p&gt;

&lt;h1 id=&quot;awesome-kids&quot;&gt;Awesome kids&lt;/h1&gt;

&lt;p&gt;I’d have tons of kids if I had tons of money and time.  Atm having more kids
sounds like a terrifying amount of work.  But I also think its one of the most
rewarding things a person can do and I especially think its going to be totally
worth it when I’m old.  This objective is woefully non specific atm and needs a
lot of work.&lt;/p&gt;
</description>
        <pubDate>Sun, 08 Jan 2017 00:00:00 -0500</pubDate>
        <link>http://blog.kablamo.org/2017/01/08/five-year-goals/</link>
        <guid isPermaLink="true">http://blog.kablamo.org/2017/01/08/five-year-goals/</guid>
        
        
      </item>
    
      <item>
        <title>My goals for 2017</title>
        <description>&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Spend less than $36,500 in 2017.&lt;/strong&gt; If I can keep my spending at this level
I should be on my way to a long term goal of being financially
independent at age 42.  We spent about $45,000 in 2016.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Build a portfolio of airline miles and hotel points by travel hacking
credit cards.&lt;/strong&gt; This could save me $4,000 a year or more in annual plane
tickets and hotels for a family of 3 to travel to Singapore.  We go every year
to visit my wife’s family.  I completed a free 15 day email course at
&lt;a href=&quot;https://travelmiles101.com&quot;&gt;travelmiles101.com&lt;/a&gt; and I can’t recommend that
enough.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Help my wife get her license.&lt;/strong&gt; Time is the most valuable thing.  It would
be way more efficient if I can do chores while my wife goes to the grocery
store.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Make at least 1 good friend who is a neighbor.&lt;/strong&gt; We just moved.  Our
neighbors seem like they might be cool.  Science says having friends makes
you live longer – especially if they live close by.  Also part of the appeal
of financial independence is having more time to spend with friends and family.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Write about how to get stuff done - project management for people
who aren’t project managers.&lt;/strong&gt; I think writing is the best way to learn.
Getting better at managing projects at home and at work has been on my mind for
the last 2 years.  Time is everyone’s biggest constraint.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Get 100 readers per month on this blog by the end of the year.&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Learn to walk on my hands.&lt;/strong&gt;  Last year my fitness goal was 100 pushups
and 20 pullups every other day.  Shockingly I managed to acheive that.  I am
apparently old and delicate so it took me most of the year.  But it was just a
stepping stone to my larger goal of learning to walk on my hands.  How is this
useful?  Its not.  I want to be strong but I need a specific goal.  This one
sounded more fun than “lift 500 pounds”.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Fix my knee injury.&lt;/strong&gt;  I need to see a physical therapist so I can run
again.  I’ve been putting this off and trying to solve it on my own for
years which is dumb.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Sun, 01 Jan 2017 00:00:00 -0500</pubDate>
        <link>http://blog.kablamo.org/2017/01/01/next-year/</link>
        <guid isPermaLink="true">http://blog.kablamo.org/2017/01/01/next-year/</guid>
        
        
      </item>
    
      <item>
        <title>CPAN::Diff - Compare local Perl modules to your darkpan or cpan</title>
        <description>&lt;p&gt;At work we have a Pinto powered darkpan.  But developers install stuff from
cpan on their development servers to try things out and occasionally these
experiments don’t get cleaned up and cause problems.  It would be nice nice to
know what modules are installed on a machine and how that compares to whats on
our darkpan.  Specifically I want to know which modules are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Older than those on the darkpan&lt;/li&gt;
  &lt;li&gt;Newer than those on the darkpan&lt;/li&gt;
  &lt;li&gt;Installed on the server but are not in the darkpan&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I solved this by stealing a lot of code from
&lt;a href=&quot;https://metacpan.org/pod/cpan-outdated&quot;&gt;cpan-outdated&lt;/a&gt; and writing
&lt;a href=&quot;https://metacpan.org/pod/CPAN::Diff&quot;&gt;CPAN::Diff&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Usage
$ cpan-diff --help

# Find local modules which are older than whats available in the CPAN
$ cpan-diff older
Acme::LookOfDisapproval
Acme::What

$ cpan-diff older --verbose
Acme::LookOfDisapproval        0.005   0.006 ETHER/Acme-LookOfDisapproval-0.006
Acme::What                     0.004   0.005 T/TO/TOBYINK/Acme-What-0.005.tar.gz

# Find local modules which are older than the ones in your company darkpan.
$ cpan-diff older --verbose --mirror https://darkpan.yourcompany.com
Acme::LookOfDisapproval        0.005   0.006 ETHER/Acme-LookOfDisapproval-0.006
Acme::What                     0.004   0.005 T/TO/TOBYINK/Acme-What-0.005.tar.gz

# Find local modules which are newer than the ones in your darkpan.  
$ cpan-diff newer --mirror https://darkpan.yourcompany.com

# Find local modules which are 'extra' -- ie don't exist in your darkpan.
$ cpan-diff extra --mirror https://darkpan.yourcompany.com
&lt;/code&gt;&lt;/pre&gt;

</description>
        <pubDate>Fri, 07 Oct 2016 00:00:00 -0400</pubDate>
        <link>http://blog.kablamo.org/2016/10/07/cpan-diff/</link>
        <guid isPermaLink="true">http://blog.kablamo.org/2016/10/07/cpan-diff/</guid>
        
        
        <category>perl</category>
        
      </item>
    
      <item>
        <title>Bash tricks: set -euxo pipefail</title>
        <description>&lt;p&gt;&lt;code&gt;set -eux&lt;/code&gt; is a super useful bash trick I’ve been using in Chef and
&lt;a href=&quot;https://metacpan.org/pod/Rex&quot;&gt;Rex&lt;/a&gt; tasks.  I’m going to break it down and
explain it one option at a time:&lt;/p&gt;

&lt;h1 id=&quot;set--e&quot;&gt;set -e&lt;/h1&gt;
&lt;p&gt;This&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cmd1 &amp;amp;&amp;amp; cmd2 &amp;amp;&amp;amp; cmd3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;is equivalent to this&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;set -e
cmd1
cmd2
cmd3
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;set--u&quot;&gt;set -u&lt;/h1&gt;
&lt;p&gt;The shell prints a message to stderr when it tries to expand a variable that is
not set.  Also it immediately exits. An interactive shell will not exit.  I
think this is similar to Perl’s 
&lt;a href=&quot;https://metacpan.org/pod/strictures&quot;&gt;use strictures&lt;/a&gt; which is something Moo
enables.&lt;/p&gt;

&lt;h1 id=&quot;set--x&quot;&gt;set -x&lt;/h1&gt;
&lt;p&gt;The shell prints each command in a script to stderr before running it.  I think
this would be particularly useful in Rex.  And Chef.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;set -x
echo hey
echo woah
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;output:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+ echo hey
hey
+ echo woah
woah
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;set--o-pipefail&quot;&gt;set -o pipefail&lt;/h1&gt;

&lt;p&gt;Pipelines fail on the first command which fails instead of dying later on
down the pipeline.  This is especially good when cmd3 is a command that always
succeeds (like echo):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cmd1 | cmd2 | cmd3
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;see-also&quot;&gt;See also&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.peterbe.com/plog/set-ex&quot;&gt;The most useful bash trick of the year&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://explainshell.com/explain?cmd=set+-euxo pipefail&quot;&gt;explainshell: set -euxo pipefail&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 08 Nov 2015 00:00:00 -0500</pubDate>
        <link>http://blog.kablamo.org/2015/11/08/bash-tricks-eux/</link>
        <guid isPermaLink="true">http://blog.kablamo.org/2015/11/08/bash-tricks-eux/</guid>
        
        
        <category>bash</category>
        
        <category>rex</category>
        
      </item>
    
      <item>
        <title>The Perl test ecosystem (slides)</title>
        <description>&lt;p&gt;I gave this talk last Thursday at
&lt;a href=&quot;http://chicago.pm.org/blog/2015/09/19/the-perl-test-ecosystem/&quot;&gt;Chicago.pm&lt;/a&gt;.
This talk assumes the listener knows very little about testing in Perl but
likely has something for more advanced users as well.&lt;/p&gt;

&lt;p&gt;It begins with &lt;code&gt;prove&lt;/code&gt; and &lt;code&gt;Test::More&lt;/code&gt;, but then moves on to explore the &lt;code&gt;Test::&lt;/code&gt;
namespace on CPAN and talk about 20 other test modules.  CPAN has a large
number of modules to help with testing – its a pretty healthy ecosystem.&lt;/p&gt;

&lt;p&gt;My goal was to create talk which not only gives new people an introduction to
testing in Perl, but also provides up to date advice about which modules are
useful and recommended.  Feedback and corrections welcome.&lt;/p&gt;

&lt;p&gt;As usual, this talk is both a living document and reference material. I keep my
talks updated and relevant so I can refer people to them. If I’ve missed
anything feel free to contribute to the github repo or leave a comment.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://kablamo.org/slides-perl-testing&quot;&gt;Slides&lt;/a&gt; |
&lt;a href=&quot;http://github.com/kablamo/slides-perl-testing&quot;&gt;GitHub repo&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Sat, 26 Sep 2015 00:00:00 -0400</pubDate>
        <link>http://blog.kablamo.org/2015/09/26/slides-perl-testing/</link>
        <guid isPermaLink="true">http://blog.kablamo.org/2015/09/26/slides-perl-testing/</guid>
        
        
        <category>perl</category>
        
        <category>slides</category>
        
      </item>
    
      <item>
        <title>Publish your first CPAN module in &lt; 5 minutes (slides)</title>
        <description>&lt;p&gt;I originally gave this talk at Chicago.pm as part of a “Distribution Management
Shootout” – a 3 way duel between:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;jberger’s &lt;a href=&quot;http://jberger.github.io/ModuleBuildPresentation&quot;&gt;talk&lt;/a&gt; about Module::Build and and the “Classic” build systems&lt;/li&gt;
  &lt;li&gt;preaction’s &lt;a href=&quot;http://preaction.github.io/Introduction-to-Dist-Zilla&quot;&gt;talk&lt;/a&gt; about Dist::Zilla, and&lt;/li&gt;
  &lt;li&gt;my &lt;a href=&quot;http://kablamo.org/slides-first-cpan-module&quot;&gt;talk&lt;/a&gt; about Minilla and Carton.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It was a great overview of the most popular tools and I think all the talks
are worth checking out.&lt;/p&gt;

&lt;p&gt;As usual, this talk is both a living document and reference material. I keep my
talks updated and relevant so I can refer people to them. If I’ve missed
anything feel free to contribute to the github repo or leave a comment.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://kablamo.org/slides-first-cpan-module&quot;&gt;Slides&lt;/a&gt; |
&lt;a href=&quot;http://github.com/kablamo/slides-first-cpan-module&quot;&gt;GitHub repo&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Tue, 15 Sep 2015 00:00:00 -0400</pubDate>
        <link>http://blog.kablamo.org/2015/09/15/slides-first-cpan-module/</link>
        <guid isPermaLink="true">http://blog.kablamo.org/2015/09/15/slides-first-cpan-module/</guid>
        
        
        <category>perl</category>
        
        <category>slides</category>
        
      </item>
    
      <item>
        <title>mstpan quick reference</title>
        <description>&lt;p&gt;Last Christmas, the inimitable Matt Trout (mst) created an opinionated tour of
CPAN where he recommended modules for some common problems.  I think its
brilliant, useful, and entertaining and I’ve decided to compile a high level
overview all on one page in order to create a quick reference.&lt;/p&gt;

&lt;p&gt;I’ve tried to distill his wisdom and wit down to a few words.  But I recommend
clicking the section headers and following the links to Matt’s original posts
to see his actual real opinions in their full complexity.  This single page
can’t replace 16 great posts and he usually includes advice on the best way
to use the module.  You won’t want to miss that.&lt;/p&gt;

&lt;h1 id=&quot;table-of-contents&quot;&gt;Table of Contents&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#webframeworks&quot;&gt;Web Frameworks&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#webdeployment&quot;&gt;Web Deployment&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#xml&quot;&gt;XML&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#html&quot;&gt;HTML&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#files&quot;&gt;Files&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#databases&quot;&gt;Databases&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#json&quot;&gt;JSON&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#async&quot;&gt;Async&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#librarydeployment&quot;&gt;Library Deployment&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#perlvmdeployment&quot;&gt;Perl VM Deployment&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#distributionbuilding&quot;&gt;Distribution building&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#objectorientation&quot;&gt;Object orientation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#soap&quot;&gt;SOAP&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#exporting&quot;&gt;Exporting&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#email&quot;&gt;Email&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#logging&quot;&gt;Logging&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;&lt;a name=&quot;webframeworks&quot; href=&quot;http://shadow.cat/blog/matt-s-trout/mstpan-1&quot;&gt;Web Frameworks&lt;/a&gt;&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;CGI.pm (the CPAN module)&lt;/strong&gt; - Run away&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Catalyst&lt;/strong&gt; - Venerable&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Dancer&lt;/strong&gt; - Solid and lightweight&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Mojolicious&lt;/strong&gt; - Shiny&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Web::Simple&lt;/strong&gt; - Low level&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Plack&lt;/strong&gt; - Awesome (but not a web framework)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;&lt;a name=&quot;webdeployment&quot; href=&quot;http://shadow.cat/blog/matt-s-trout/mstpan-2&quot;&gt;Web Deployment&lt;/a&gt;&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;mod_perl&lt;/strong&gt; - Run away&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;CGI (the protocol)&lt;/strong&gt; - Ok for some trivial things&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;FastCGI + unix sockets for zero downtime deploys&lt;/strong&gt; - Yes&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Apache + FastCgiExternalServer&lt;/strong&gt; - Good&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Nginx + Starman + Unix sockets&lt;/strong&gt; - Good&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Mojolicious + Hypnotoad&lt;/strong&gt; - Good&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;PSGI Async&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Net::Async::HTTP::Server::PSGI&lt;/strong&gt; if you like IO::Async&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Twiggy&lt;/strong&gt; if you like AnyEvent&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;&lt;a name=&quot;xml&quot; href=&quot;http://shadow.cat/blog/matt-s-trout/mstpan-3&quot;&gt;XML&lt;/a&gt;&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;XML::Simple&lt;/strong&gt; - No&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;XML::Twig&lt;/strong&gt; - Excellent whipuptitude&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;XPath&lt;/strong&gt; - Not a CPAN module but you should learn it&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;XML::LibXML&lt;/strong&gt; - Good&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Template::Semantic&lt;/strong&gt; - Good&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;XML::Toolkit&lt;/strong&gt; - Good&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;XML::Rabbit&lt;/strong&gt; - Nice&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;xmllint&lt;/strong&gt; - Not a Perl module. But useful if you’re XML file is made of “old man wee and fail”&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;&lt;a name=&quot;html&quot; href=&quot;http://shadow.cat/blog/matt-s-trout/mstpan-4&quot;&gt;HTML&lt;/a&gt;&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Parsing HTML
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Regular expressions&lt;/strong&gt; - Don’t&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;HTML::TreeBuilder&lt;/strong&gt; - Venerable&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Mojo::DOM&lt;/strong&gt; - Pleasant&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;XML::LibXML&lt;/strong&gt; or &lt;strong&gt;XML::Twig&lt;/strong&gt; - Ok but why&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Generating HTML
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;CGI.pm&lt;/strong&gt; - Please don’t&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Template Toolkit&lt;/strong&gt; - Venerable&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Text::Xslate&lt;/strong&gt; - Brilliant&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;HTML::Mason&lt;/strong&gt; - Yes but no because embedded Perl&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Mojo::Template&lt;/strong&gt; - Yes but no because embedded Perl&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;HTML::Zoom&lt;/strong&gt; - mst wrote it, mst doesn’t hate it&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;&lt;a name=&quot;files&quot; href=&quot;http://shadow.cat/blog/matt-s-trout/mstpan-5&quot;&gt;Files&lt;/a&gt;&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Files::Spec&lt;/strong&gt; - Core, standard&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Files::Spec::Functions&lt;/strong&gt; - Use this instead of File::Spec&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;File::stat&lt;/strong&gt; - Yes&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;autodie&lt;/strong&gt; - Core, but “a giant bag of crack balanced precariously atop .. an even bigger bag of tainted crack”&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;File::Open&lt;/strong&gt; - Better than autodie&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;File::Slurp&lt;/strong&gt; - Avoid&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Path::Tiny&lt;/strong&gt; - Excellent&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;IO::All&lt;/strong&gt; - Good if you want to be procedural and don’t want OO&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;&lt;a name=&quot;databases&quot; href=&quot;http://shadow.cat/blog/matt-s-trout/mstpan-6&quot;&gt;Databases&lt;/a&gt;&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;DBI&lt;/strong&gt; - 99% of the time, just use these 2 methods and nothing else&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;
    $dbh-&amp;gt;do($sql, {}, @args);
    my @array_of_hashrefs = @{$dbh-&amp;gt;selectall_arrayref($self, { Slice =&amp;gt; {} }, @args)};
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;DBIx::Connector&lt;/strong&gt; - You want it&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Mojo::PG&lt;/strong&gt; - Yes&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;DBIx::Class&lt;/strong&gt; - Yes&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;DBIx::Class::Candy&lt;/strong&gt; - Shiny&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;DBIx::Class::DeploymentHandler&lt;/strong&gt; - Yes&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;DBIx::Class::Fixtures&lt;/strong&gt; - Useful for testing&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;DBIx::Class::PassphraseColum&lt;/strong&gt; - Yes please&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;&lt;a name=&quot;json&quot; href=&quot;http://shadow.cat/blog/matt-s-trout/mstpan-7&quot;&gt;JSON&lt;/a&gt;&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;JSON&lt;/strong&gt; - Yes but there are alternatives&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;JSON::PP&lt;/strong&gt; - Pure perl, core, fatpacks&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;JSON::XS&lt;/strong&gt; - Fast&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Cpanel::JSON::XS&lt;/strong&gt; - Faster&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;JSON::MaybeXS&lt;/strong&gt; - Recommended&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;JSON::Diffable&lt;/strong&gt; - Useful&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Mojo::JSON&lt;/strong&gt; - Really nice&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;&lt;a name=&quot;async&quot; href=&quot;http://shadow.cat/blog/matt-s-trout/mstpan-8&quot;&gt;Async&lt;/a&gt;&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Don’t&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;threads.pm&lt;/strong&gt; - Don’t.  Its slow.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;POE&lt;/strong&gt; - Good but weird UI.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;MooseX::POE&lt;/strong&gt; - Better&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Reflex&lt;/strong&gt; - Interesting&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;AnyEvent&lt;/strong&gt; - Ok, but maintainer is difficult&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;IO::Async&lt;/strong&gt; - Nice&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Mojo::IOLoop&lt;/strong&gt; - Nice&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Promises&lt;/strong&gt; - Neat but mst likes Future&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;curry&lt;/strong&gt; - Useful&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;&lt;a name=&quot;librarydeployment&quot; href=&quot;http://shadow.cat/blog/matt-s-trout/mstpan-9&quot;&gt;Library deployment&lt;/a&gt;&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;cpan as root&lt;/strong&gt; - No&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Vendor Packages&lt;/strong&gt; - Ok&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;CPANPLUS&lt;/strong&gt; - Out of favor&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;CPAN&lt;/strong&gt; - Standard&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;cpanminus&lt;/strong&gt; - Use this&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;FindBin&lt;/strong&gt; - Good for git deploys, bad for dist deploys&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;local::lib&lt;/strong&gt; - Yes&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Carton&lt;/strong&gt; - Yes&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;App::FatPacker&lt;/strong&gt; - Yes&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;CPAN::Mini&lt;/strong&gt; - Maximum underkill&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Pinto&lt;/strong&gt; - Maximum overkill&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;&lt;a name=&quot;perlvmdeployment&quot; href=&quot;http://shadow.cat/blog/matt-s-trout/mstpan-10&quot;&gt;Perl VM deployment&lt;/a&gt;&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;System perl&lt;/strong&gt; - Ok with local::lib&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Manual compilation&lt;/strong&gt; - Yes&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;perlbrew&lt;/strong&gt; - Yes usually all the shims are more annoying than necessary&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Perl::Build&lt;/strong&gt; - Nice&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;plenv&lt;/strong&gt; - Nice&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Windows&lt;/strong&gt; - Active State or Strawberry Perl&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;&lt;a name=&quot;distributionbuilding&quot; href=&quot;http://shadow.cat/blog/matt-s-trout/mstpan-11&quot;&gt;Distribution building&lt;/a&gt;&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;ExtUtils::MakeMaker&lt;/strong&gt; - Hated by everyone except people who like Makefiles.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Module::Build&lt;/strong&gt; - No&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Module::Install&lt;/strong&gt; - “a giant tower of crack”&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Module::Build::Tiny&lt;/strong&gt; - Nice.  See also App::ModuleBuildTiny.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Dist::Zilla&lt;/strong&gt; - Power.  Maximum overkill.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Dist::Milla&lt;/strong&gt; - Sensible&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Minilla&lt;/strong&gt; - Great.  Maximum underkill.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;&lt;a name=&quot;objectorientation&quot; href=&quot;http://shadow.cat/blog/matt-s-trout/mstpan-12&quot;&gt;Object orientation&lt;/a&gt;&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Moose&lt;/strong&gt; - Awesome&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Moo&lt;/strong&gt; - Shiny&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Mouse&lt;/strong&gt; - Niche&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Type::Tiny&lt;/strong&gt; - Yes&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Moops&lt;/strong&gt; - Good&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Throwable&lt;/strong&gt; - Sensible&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Safe::Isa&lt;/strong&gt; - Might be useful&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;&lt;a name=&quot;soap&quot; href=&quot;http://shadow.cat/blog/matt-s-trout/mstpan-13&quot;&gt;SOAP&lt;/a&gt;&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;SOAP::WSDL&lt;/strong&gt; - Avoid&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;XML::Compile::SOAP&lt;/strong&gt; - Insane and brilliant&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Catalyst::Controller::SOAP&lt;/strong&gt; - Least worst option&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;SOAP::Lite&lt;/strong&gt; - Ancient and insane&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;&lt;a name=&quot;exporting&quot; href=&quot;http://shadow.cat/blog/matt-s-trout/mstpan-14&quot;&gt;Exporting&lt;/a&gt;&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Exporter&lt;/strong&gt; - Sufficient&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Sub::Exporter&lt;/strong&gt; - Worth a look&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Sub::Exporter::Progressive&lt;/strong&gt; - Light&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Moose::Exporter&lt;/strong&gt; - Yes&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Exporter::Tiny&lt;/strong&gt; - Recommended&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Exporter::Declare&lt;/strong&gt; - Maximum overkill&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;namespace::(auto)clean&lt;/strong&gt; - Useful&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Import::Into&lt;/strong&gt; - or Import::Base&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;&lt;a name=&quot;email&quot; href=&quot;http://shadow.cat/blog/matt-s-trout/mstpan-15&quot;&gt;Email&lt;/a&gt;&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Net::SMTP&lt;/strong&gt; - Too low level&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Email::Send&lt;/strong&gt; - Usable&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Email::Sender&lt;/strong&gt; - Recommended&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Email::Stuffer&lt;/strong&gt; - mst favorite&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Emailesque&lt;/strong&gt; - mst favorite with sugar on top&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Email::Mime&lt;/strong&gt; - Standard&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Email::Mime::Kit&lt;/strong&gt; - Best answer for templating&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Mail::Box&lt;/strong&gt; - Brilliant and insane&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Courriel&lt;/strong&gt; - Elegant&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;&lt;a name=&quot;logging&quot; href=&quot;http://shadow.cat/blog/matt-s-trout/mstpan-16&quot;&gt;Logging&lt;/a&gt;&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;warn()&lt;/strong&gt; - Perfectly fine&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Log::Dispatch&lt;/strong&gt; - Nice&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Log::Log4Pperl&lt;/strong&gt; - Maximum overkill&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Log::Any&lt;/strong&gt; - Good&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Log::Contextual&lt;/strong&gt; - Nice&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Message::Passing&lt;/strong&gt; - Worth a look. Not quite logging.&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Tue, 08 Sep 2015 00:00:00 -0400</pubDate>
        <link>http://blog.kablamo.org/2015/09/08/mstpan/</link>
        <guid isPermaLink="true">http://blog.kablamo.org/2015/09/08/mstpan/</guid>
        
        
        <category>perl</category>
        
      </item>
    
      <item>
        <title>HTTP::Request::AsCurl</title>
        <description>&lt;p&gt;Today, on a whim, I released a module called
&lt;a href=&quot;https://metacpan.org/pod/HTTP::Request::AsCurl&quot;&gt;HTTP::Request::AsCurl&lt;/a&gt; to
CPAN.  It converts an HTTP::Request object to a curl command.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;use HTTP::Request::Common;
use HTTP::Request::AsCurl;

my $request = POST('api.earth.defense/weapon1', { 
    target =&amp;gt; 'mothership', 
    when   =&amp;gt; 'now' 
});

say join &quot;\n&quot;, $request-&amp;gt;as_curl;
# curl --dump-header - -XPOST &quot;api.earth.defense/weapon1&quot; \
# --data 'target=mothership' \
# --data 'when=now'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It works by injecting the &lt;code&gt;as_curl()&lt;/code&gt; method into the HTTP::Request namespace.
This must be a bad idea and probably not a great bit of code to rely on in a
production environment.  But it is pretty convenient syntax for debugging a
REST API and I couldn’t resist.  Thoughts, suggestions, criticism?&lt;/p&gt;

&lt;h1 id=&quot;update-2014-06-01---&quot;&gt;– UPDATE (2014-06-01) –&lt;/h1&gt;

&lt;p&gt;I released a new version which has a totally different user interface.  Here is
the new synopsis:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;use HTTP::Request::Common;
use HTTP::Request::AsCurl qw/as_curl/;

my $request = POST('api.earth.defense/weapon1', { 
    target =&amp;gt; 'mothership', 
    when   =&amp;gt; 'now' 
});

system as_curl($request);

print as_curl($request, pretty =&amp;gt; 1, newline =&amp;gt; &quot;\n&quot;, shell =&amp;gt; 'bourne');
# curl \
# --request POST api.earth.defense/weapon1 \
# --dump-header - \
# --data target=mothership \
# --data when=now
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are 2 major changes.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;I’m no longer doing namespace injection.  I really liked the syntax, but it
was problematic and unnecessary.&lt;/li&gt;
  &lt;li&gt;The old version returned a formatted array of strings which was 
not very useful.  The problem with a formatted string (as was helpfully
pointed out to me) is you have worry about stuff like newlines which
depends on the system you are targeting and shell escaping which depends on
the shell you are targeting.  This is a can of worms.  Hopefully this new
interface is an improvement.&lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Tue, 27 May 2014 00:00:00 -0400</pubDate>
        <link>http://blog.kablamo.org/2014/05/27/http-request-ascurl/</link>
        <guid isPermaLink="true">http://blog.kablamo.org/2014/05/27/http-request-ascurl/</guid>
        
        
        <category>perl</category>
        
        <category>code</category>
        
      </item>
    
  </channel>
</rss>
